<?php

/**
 * @file
 */

use Roomify\Bat\Event\Event;
use Roomify\Bat\Calendar\Calendar;
use Roomify\Bat\Store\DrupalDBStore;
use Roomify\Bat\Unit\Unit;
use Drupal\bat_fullcalendar\FullCalendarOpenStateEventFormatter;

/**
 * Implements hook_menu().
 */
function roomify_offers_menu() {
  $items = array();

  $items['admin/bat/config/global/offers'] = array(
    'title' => 'Manage Offers',
    'page callback' => 'roomify_offers_manage_page',
    'access arguments' => array('administer offers'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/bat/config/global/offers/list'] = array(
    'title' => 'Manage Offers',
    'page callback' => 'roomify_offers_manage_page',
    'access arguments' => array('administer offers'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/bat/config/global/offers/calendar'] = array(
    'title' => 'Manage offers calendar',
    'page callback' => 'roomify_offers_manage_offers_calendar',
    'access arguments' => array('administer offers'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items['admin/bat/config/global/offers/add'] = array(
    'title' => 'Add Offer',
    'page callback' => 'roomify_offers_add_offer_page',
    'access arguments' => array('administer offers'),
  );

  $items['admin/bat/config/property/manage/%roomify_property/offers'] = array(
    'title' => 'Manage offers',
    'page callback' => 'roomify_offers_manage_offers',
    'page arguments' => array(5),
    'access callback' => 'roomify_offers_manage_offers_access',
    'access arguments' => array(5),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/bat/config/global/offers/%roomify_rate/join/%roomify_property'] = array(
    'title' => 'Join Offer',
    'page callback' => 'roomify_offers_join',
    'page arguments' => array(5, 7),
    'access callback' => 'roomify_offers_join_leave_access',
    'access arguments' => array(5, 7),
  );

  $items['admin/bat/config/global/offers/%roomify_rate/leave/%roomify_property'] = array(
    'title' => 'Leave Offer',
    'page callback' => 'roomify_offers_leave',
    'page arguments' => array(5, 7),
    'access callback' => 'roomify_offers_join_leave_access',
    'access arguments' => array(5, 7),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function roomify_offers_permission() {
  $permissions = array(
    'administer offers' => array(
      'title' => t('Administer offers'),
      'description' => t('Allows users to add, edit or delete offers.'),
    ),
    'manage offers for any properties' => array(
      'title' => t('Manage offers for any properties'),
      'description' => t('Allows users to join/leave offers for any properties.'),
    ),
    'manage offers for own properties' => array(
      'title' => t('Manage offers for own properties'),
      'description' => t('Allows users to join/leave offers for own properties.'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function roomify_offers_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "services" && $api == "services") {
    return array("version" => "3");
  }
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function roomify_offers_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_node_info().
 */
function roomify_offers_node_info() {
  $items = array(
    'offer' => array(
      'name' => t('Offer'),
      'base' => 'node_content',
      'description' => t('This content is used to show people your offer and all the properties participating.'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
    ),
  );
  drupal_alter('node_info', $items);
  return $items;
}

/**
 * Implements hook_services_resources().
 */
function roomify_offers_services_resources() {
  $resources = array();

  $resources['offers-calendar'] = array(
    'operations' => array(
      'index' => array(
        'callback' => 'roomify_offers_services_rates_index_calendar',
        'help' => t('Returns an object containing units information.'),
        'access arguments' => array('administer offers'),
        'args'     => array(
          array(
            'name'         => 'offset',
            'type'         => 'string',
            'optional'     => TRUE,
            'default value' => 0,
            'description'  => t('Result offset to start listing'),
            'source'       => array('param' => 'offset'),
          ),
          array(
            'name'         => 'limit',
            'type'         => 'string',
            'optional'     => TRUE,
            'default value' => 100,
            'description'  => t('Number of items to return'),
            'source'       => array('param' => 'limit'),
          ),
        ),
      ),
    ),
  );

  $resources['events-offers-calendar'] = array(
    'operations' => array(
      'index' => array(
        'callback' => 'roomify_offers_services_events_index_calendar',
        'help' => t('Returns an object containing events information.'),
        'access arguments' => array('administer offers'),
        'args'     => array(
          array(
            'name'         => 'start',
            'type'         => 'string',
            'description'  => t('Start date'),
            'source'       => array('param' => 'start'),
            'optional'     => FALSE,
          ),
          array(
            'name'         => 'end',
            'type'         => 'string',
            'description'  => t('End date'),
            'source'       => array('param' => 'end'),
            'optional'     => FALSE,
          ),
        ),
      ),
    ),
  );

  return $resources;
}

/**
 * Implements hook_views_api().
 */
function roomify_offers_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'roomify_offers') . '/views',
  );
}

/**
 * Implements hook_theme().
 */
function roomify_offers_theme() {
  return array(
    'offers_pricing_calendar' => array(
      'template' => 'offers_pricing_calendar',
      'variables' => array(
        'calendar_settings' => array(NULL),
        'js_files' => array(),
        'css_files' => array(),
        'attributes' => array(),
        'links' => array(),
        'top_form' => NULL,
        'bottom_form' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_roomify_rights().
 */
function roomify_offers_roomify_rights() {
  $rights['roomify_offers'] = array(
    'roomify manager' => array(
      'administer offers',
      'manage offers for any properties',
      'create roomify_rate entities of bundle special_offer',
      'update any roomify_rate entity of bundle special_offer',
      'delete any roomify_rate entity of bundle special_offer',
      'create roomify_rate entities of bundle special_offer_percentage',
      'update any roomify_rate entity of bundle special_offer_percentage',
      'delete any roomify_rate entity of bundle special_offer_percentage',
    ),
    'property owner' => array(
      'manage offers for own properties',
    ),
  );

  return $rights;
}

/**
 * Default implementation of hook_preprocess_offers_pricing_calendar().
 */
function roomify_offers_preprocess_offers_pricing_calendar(&$vars) {
  theme_bat_fullcalendar($vars);
}

/**
 * Manage Offers page.
 */
function roomify_offers_manage_page() {
  roomify_dashboard_setup_modal();

  $button_add = l(t('add special offer'), 'admin/bat/config/global/offers/add', array('attributes' => array('class' => 'add-offer-button ctools-use-modal ctools-modal-roomify-dashboard-modal-style')));

  $view = views_embed_view('special_offers', 'block_1');

  return $button_add . $view;
}

/**
 * Add new offer modal page.
 */
function roomify_offers_add_offer_page() {
  ctools_include('ajax');
  ctools_include('modal');

  $form_state = array(
    'ajax' => TRUE,
    'title' => t('Add New Special Offer'),
  );

  // Use ctools to generate ajax instructions for the browser to create
  // a form in a modal popup.
  $output = ctools_modal_form_wrapper('roomify_offers_add_offer_form', $form_state);

  // If the form has been submitted, there may be additional instructions
  // such as dismissing the modal popup.
  if (!empty($form_state['ajax_commands'])) {
    $output = $form_state['ajax_commands'];
  }

  // Return the ajax instructions to the browser via ajax_render().
  print ajax_render($output);
  drupal_exit();
}

/**
 * Property manage offers page.
 */
function roomify_offers_manage_offers($property) {
  $view = views_embed_view('special_offers', 'block_2');

  return $view;
}

/**
 * Add new offer form.
 */
function roomify_offers_add_offer_form($form, &$form_state) {
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Offer Name'),
    '#required' => TRUE,
  );

  $form['type'] = array(
    '#type' => 'radios',
    '#title' => t('Offer Type'),
    '#options' => array('flat' => t('Flat'), 'percentage' => t('Percentage')),
    '#default_value' => 'flat',
    '#required' => TRUE,
  );

  $form['description'] = array(
    '#type' => 'text_format',
    '#format' => 'landing_page_text',
    '#title' => t('Offer Promo'),
    '#rows' => 5,
    '#after_build' => array('roomify_offers_add_offer_form_description_after_build'),
  );

  $form['dates'] = array(
    '#markup' => '<h4 style="margin: 12px 0 5px 0; font-weight: bold;">' . t('Offer will be active from') . '</div>',
  );

  $form += bat_date_range_fields();

  $form['bat_start_date']['#title'] = t('Offer Start Date');
  $form['bat_end_date']['#title'] = t('Offer End Date');

  $form['bat_start_date']['#suffix'] = '<div style="max-width: 240px;">' . t('This offer will be available when making a booking on or after this date/time') . '</div>' . $form['bat_start_date']['#suffix'];
  $form['bat_end_date']['#suffix'] = '<div style="max-width: 240px;">' . t('This offer will no longer be available when making a booking after this date/time') . '</div>' . $form['bat_end_date']['#suffix'];

  $form['bat_start_date']['#date_format'] = variable_get('bat_date_format', 'Y-m-d H:i');
  $form['bat_end_date']['#date_format'] = variable_get('bat_date_format', 'Y-m-d H:i');

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create'),
  );

  return $form;
}

/**
 * After build callback for the 'description' field.
 */
function roomify_offers_add_offer_form_description_after_build(&$form) {
  $form['format']['#access'] = FALSE;
  return $form;
}

/**
 * Submit callback for the roomify_offers_add_offer_form form.
 */
function roomify_offers_add_offer_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  if ($values['type'] == 'flat') {
    $type = 'special_offer';
  }
  elseif ($values['type'] == 'percentage') {
    $type = 'special_offer_percentage';
  }

  $rate = roomify_rate_create(array('type' => $type, 'name' => $values['name']));
  $rate->created = REQUEST_TIME;

  $rate->offer_description[LANGUAGE_NONE][0] = $values['description'];
  $rate->offer_start_date[LANGUAGE_NONE][0]['value'] = $values['bat_start_date'];
  $rate->offer_end_date[LANGUAGE_NONE][0]['value'] = $values['bat_end_date'];

  $rate->rate_default_rate[LANGUAGE_NONE][0] = array(
    'amount' => 0,
    'currency_code' => 'USD',
  );

  $rate->save();

  ctools_add_js('ajax-responder');
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
  $form_state['ajax_commands'][] = ctools_ajax_command_redirect('admin/bat/config/global/offers');
}

/**
 * Manage offers calendar page.
 */
function roomify_offers_manage_offers_calendar() {
  $calendar_settings['modal_style'] = 'default';

  // All Drupal JS settings inside the batCalendar object.
  $fc_user_settings = array(
    'batCalendar' => array(
      array(
        'unitType' => '0',
        'eventType' => 'pricing',
        'eventGranularity' => 'bat_daily',
      ),
    ),
  );

  $calendar_settings['user_settings'] = $fc_user_settings;
  $calendar_settings['calendar_id'] = 'fullcalendar-scheduler';

  $links = array();

  $css_files = array(
    drupal_get_path('module', 'roomify_offers') . '/css/offers_pricing.css',
    drupal_get_path('module', 'bat_fullcalendar') . '/css/bat_fullcalendar_timeline.css',
  );

  $js_files = array(
    drupal_get_path('module', 'roomify_offers') . '/js/offers_pricing.js',
  );

  $bottom_form = array(
    '#markup' => t('This calendar allows you to manage the pricing for offers created in the \'Manage Offers\' tab'),
  );

  $render_array = array(
    'calendar' => array(
      '#theme' => 'offers_pricing_calendar',
      '#calendar_settings' => $calendar_settings,
      '#links' => $links,
      '#top_form' => array(),
      '#bottom_form' => $bottom_form,
      '#css_files' => $css_files,
      '#js_files' => $js_files,
    ),
  );

  return $render_array;
}

/**
 * Retrieve a list of events to use with Fullcalendar scheduler.
 *
 * @param $start_date
 * @param $end_date
 */
function roomify_offers_services_events_index_calendar($start_date, $end_date) {
  global $databases;

  $events_json = array();

  foreach (array('special_offer', 'special_offer_percentage') as $rate_type) {
    $event_type = 'pricing';

    if ($rate_type == 'special_offer_percentage') {
      $event_type = 'percentage_discount';
    }

    $bat_event_type = bat_event_type_load($event_type);

    // For each type of event create a state store and an event store.
    $prefix = (isset($databases['default']['default']['prefix'])) ? $databases['default']['default']['prefix'] : '';
    $event_store = new DrupalDBStore($event_type, DrupalDBStore::BAT_EVENT, $prefix);

    $start_date_object = new DateTime($start_date);
    $end_date_object = new DateTime($end_date);

    $entities = roomify_rate_load_multiple(FALSE, array('type' => $rate_type));

    $childrens = array();

    // Create an array of unit objects - the default value is set to 0 since we want
    // to know if the value in the database is actually 0. This will allow us to identify
    // which events are represented by events in the database (i.e. have a value different to 0)
    $units = array();
    foreach ($entities as $entity) {
      $units[] = new Unit($entity->rate_id, 0);
    }

    if (!empty($units)) {
      $event_calendar = new Calendar($units, $event_store);

      $event_ids = $event_calendar->getEvents($start_date_object, $end_date_object);

      $event_formatter = new FullCalendarOpenStateEventFormatter($bat_event_type, TRUE);

      foreach ($event_ids as $unit_id => $unit_events) {
        foreach ($unit_events as $key => $event) {
          $events_json[] = array(
            'id' => (string) $key . $unit_id,
            'bat_id' => $event->getValue(),
            'resourceId' => 'S' . $unit_id,
          ) + $event->toJson($event_formatter);
        }
      }
    }
  }

  $events_json = _bat_api_merge_non_blocking_events($events_json);

  return array_values($events_json);
}

/**
 * Retrieve a list of rates to use with Fullcalendar scheduler.
 *
 * @param $offset
 * @param $limit
 */
function roomify_offers_services_rates_index_calendar($offset, $limit) {
  $event_type = 'pricing';

  $create_event_access = FALSE;

  if (bat_event_access('create', bat_event_create(array('type' => $event_type)))) {
    $create_event_access = TRUE;
  }

  $entities = roomify_rate_load_multiple(FALSE, array('type' => array('special_offer', 'special_offer_percentage')));

  $childrens = array();
  foreach ($entities as $entity) {
    $event_type = 'pricing';

    if ($entity->type == 'special_offer_percentage') {
      $event_type = 'percentage_discount';
    }

    $childrens[] = array(
      'id' => 'S' . $entity->rate_id,
      'title' => $entity->name,
      'create_event' => $create_event_access,
      'event_type' => $event_type,
    );
  }

  $rates = array(
    array(
      'id' => 0,
      'title' => t('Offers'),
      'children' => $childrens,
    ),
  );

  return $rates;
}

/**
 * Implements hook_menu_link_alter().
 * Hide Offer from node/add page.
 */
function roomify_offers_menu_link_alter(&$item) {
  if (isset($item['menu_name']) && isset($item['link_path'])) {
    if ($item['menu_name'] == 'navigation' && $item['link_path'] == 'node/add/offer') {
      $item['hidden'] = 1;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function roomify_offers_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'offer_node_form') {
    $form['field_offer_reference']['#access'] = FALSE;
  }
  if ($form_id == 'roomify_rate_edit_special_offer_form' || $form_id == 'roomify_rate_edit_special_offer_percentage_form') {
    global $user;

    $form['name']['#title'] = t('Offer Name');

    $form['rate_default_rate']['#access'] = FALSE;
    $form['rate_event_type_reference']['#access'] = FALSE;
    $form['rate_bat_type_reference']['#access'] = FALSE;
    $form['rate_restrictions']['#access'] = FALSE;
    $form['author']['#access'] = FALSE;

    $form['actions']['submit']['#value'] = t('Save Offer');
    $form['actions']['submit']['#submit'][] = 'roomify_offer_inform_about_offer_page';
  }

  if ($form_id == 'roomify_rate_edit_special_offer_percentage_form') {
    $form['rate_discount']['#access'] = FALSE;
  }
}

/**
 * Submission function.
 */
function roomify_offer_inform_about_offer_page(&$form, &$form_state) {
  $values = $form_state['values'];
  if (isset($values['offer_node_reference'][LANGUAGE_NONE][0]['target_id']) && !empty($values['offer_node_reference'][LANGUAGE_NONE][0]['target_id'])) {
    $node = drupal_get_path_alias('/node/' . $values['offer_node_reference'][LANGUAGE_NONE][0]['target_id']);
    drupal_set_message(t('You can view the offer page <a href="@node" target="_blank">here</a>', array('@node' => $node)), 'status');
  }
}

/**
 * 'Join Offer' callback.
 *
 * @param $rate
 * @param $property
 */
function roomify_offers_join($rate, $property) {
  $property_ids = array();
  if ($offer_property_reference = field_get_items('roomify_rate', $rate, 'offer_property_reference')) {
    foreach ($offer_property_reference as $field_item) {
      $property_ids[] = $field_item['target_id'];
    }
  }

  if (!in_array($property->property_id, $property_ids)) {
    $rate->offer_property_reference[LANGUAGE_NONE][]['target_id'] = $property->property_id;
    $rate->save();
  }

  drupal_goto($_GET['destination']);
}

/**
 * 'Leave Offer' callback.
 *
 * @param $rate
 * @param $property
 */
function roomify_offers_leave($rate, $property) {
  foreach ($rate->offer_property_reference[LANGUAGE_NONE] as $id => $property_id) {
    if ($property->property_id == $property_id['target_id']) {
      unset($rate->offer_property_reference[LANGUAGE_NONE][$id]);
    }
  }

  $rate->save();

  drupal_goto($_GET['destination']);
}

/**
 * Get a list of offers bookable today for a selected property.
 *
 * @param $property
 * @param $start_date
 * @param $end_date
 *
 * @return array
 */
function roomify_offers_get_offers($property, $start_date, $end_date) {
  $offers = array();

  $today = new DateTime();

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'roomify_rate')
    ->entityCondition('bundle', array('special_offer', 'special_offer_percentage'), 'IN')
    ->fieldCondition('offer_property_reference', 'target_id', $property->property_id, '=');

  $result = $query->execute();

  if (isset($result['roomify_rate'])) {
    global $databases;

    $prefix = (isset($databases['default']['default']['prefix'])) ? $databases['default']['default']['prefix'] : '';

    foreach ($result['roomify_rate'] as $rate_id) {
      $rate = roomify_rate_load($rate_id->rate_id);

      $offer_start_date = new DateTime($rate->offer_start_date[LANGUAGE_NONE][0]['value']);
      $offer_end_date = new DateTime($rate->offer_end_date[LANGUAGE_NONE][0]['value']);

      if ($offer_start_date <= $today && $offer_end_date >= $today) {
        $rates = array(
          $rate->rate_id => new Unit($rate->rate_id, 0),
        );

        $event_type = 'pricing';

        if ($rate->type == 'special_offer_percentage') {
          $event_type = 'percentage_discount';
        }

        $event_store = new DrupalDBStore($event_type, DrupalDBStore::BAT_EVENT, $prefix);

        $calendar = new Calendar($rates, $event_store);
        $events = $calendar->getEvents($start_date, $end_date);
        foreach ($events[$rate->rate_id] as $event) {
          if ($event->getValue() > 0) {
            $offers[] = $rate;
            break;
          }
        }
      }
    }
  }

  return $offers;
}

/**
 * 'Manage offers' access callback.
 *
 * @param $property
 */
function roomify_offers_manage_offers_access($property) {
  global $user;

  if (user_access('manage offers for any properties') ||
      (user_access('manage offers for own properties') && $property->uid == $user->uid)) {
    return TRUE;
  }
}

/**
 * 'Join offer / Leave offer' access callback.
 *
 * @param $rate
 * @param $property
 */
function roomify_offers_join_leave_access($rate, $property) {
  global $user;

  if (user_access('manage offers for any properties') ||
      (user_access('manage offers for own properties') && $property->uid == $user->uid)) {
    return TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * FORM_ID = bat_fullcalendar_event_manager_form.
 */
function roomify_offers_form_bat_fullcalendar_event_manager_form_alter(&$form, &$form_state) {
  if (isset($form['event_type']['#value']) && $form['event_type']['#value'] == 'percentage_discount') {
    if (isset($form['event_details'])) {
      $date_format = variable_get('bat_daily_date_format', 'Y-m-d');

      $start_date = $form['bat_start_date']['#value'];
      $end_date = $form['bat_end_date']['#value'];

      $form['event_details']['#markup'] = t('Selected Dates:') . ' ' . $start_date->format($date_format) . ' to ' . $end_date->format($date_format);
    }

    $form['submit']['#ajax']['callback'] = 'roomify_offers_event_manager_form_ajax_submit';
  }
}

/**
 * Custom ajax callback for the bat_fullcalendar_event_manager_form form.
 */
function roomify_offers_event_manager_form_ajax_submit($form, &$form_state) {
  bat_fullcalendar_event_manager_form_ajax_submit($form, $form_state);

  ctools_include('modal');

  $commands = array();
  $commands[] = ctools_modal_command_dismiss();

  print ajax_render($commands);
  exit;
}

/**
 * Implements hook_default_cer().
 */
function roomify_offers_default_cer() {
  $items = array();

  $items['roomify_rate:special_offer:offer_node_reference*node:offer:field_offer_reference'] = entity_import('cer', '{
    "cer_bidirectional" : { "und" : [ { "value" : "1" } ] },
    "cer_enabled" : { "und" : [ { "value" : "1" } ] },
    "cer_left" : { "und" : [ { "path" : "roomify_rate:special_offer:offer_node_reference" } ] },
    "cer_right" : { "und" : [ { "path" : "node:offer:field_offer_reference" } ] },
    "cer_weight" : { "und" : [ { "value" : "0" } ] },
    "identifier" : "roomify_rate:special_offer:offer_node_reference*node:offer:field_offer_reference",
    "rdf_mapping" : []
  }');

  $items['roomify_rate:special_offer_percentage:offer_node_reference*node:offer:field_offer_reference'] = entity_import('cer', '{
    "cer_bidirectional" : { "und" : [ { "value" : "1" } ] },
    "cer_enabled" : { "und" : [ { "value" : "1" } ] },
    "cer_left" : { "und" : [ { "path" : "roomify_rate:special_offer_percentage:offer_node_reference" } ] },
    "cer_right" : { "und" : [ { "path" : "node:offer:field_offer_reference" } ] },
    "cer_weight" : { "und" : [ { "value" : "0" } ] },
    "identifier" : "roomify_rate:special_offer_percentage:offer_node_reference*node:offer:field_offer_reference",
    "rdf_mapping" : []
  }');

  return $items;
}
