<?php

/**
 * @file
 */

/**
 * Implements hook_install().
 */
function roomify_accommodation_booking_install() {
  // Create roomify accommodation booking type.
  roomify_accommodation_booking_create_booking_type();

  // Set up commerce.
  commerce_product_configure_product_fields(array('roomify_accommodation_booking'));
  commerce_line_item_configure_line_item_fields(array('roomify_accommodation_booking'));

  // Prepopulate the product reference for all the existing listings.
  roomify_accommodation_booking_add_product_reference_to_all_listing_types();

  $variable_realm_list = variable_get('variable_realm_list_language', array());
  $variable_realm_list[] = 'commerce_checkout_completion_message';

  variable_set('variable_realm_list_language', $variable_realm_list);
}

/**
 * Implements hook_uninstall().
 */
function roomify_accommodation_booking_uninstall() {
  roomify_accommodation_booking_delete_booking_type();
}

/**
 * Delete "Roomify Accommodation Booking" booking type.
 */
function roomify_accommodation_booking_delete_booking_type() {
  if ($booking_type = bat_booking_type_load('roomify_accommodation_booking')) {
    bat_booking_type_delete($booking_type);
  }
}

/**
 * Create "Roomify Accommodation Booking" booking type.
 */
function roomify_accommodation_booking_create_booking_type() {
  module_load_include('inc', 'roomify_accommodation_booking', 'roomify_accommodation_booking.fields');

  $booking_type = bat_booking_type_create(array(
    'label' => 'Roomify Accommodation Booking',
    'type' => 'roomify_accommodation_booking',
  ));

  $booking_type->save();

  roomify_accommodation_booking_add_event_reference_field();
  roomify_accommodation_booking_add_booking_price_field();

  roomify_accommodation_booking_add_listing_product_reference('home');
  roomify_accommodation_booking_add_listing_product_reference('room');

  // Add the Add-ons field to casa/locanda types.
  roomify_accommodation_booking_add_addons_field('home');
  roomify_accommodation_booking_add_addons_field('room');

  // Add telephone field to Billing info.
  roomify_accommodation_booking_add_booking_telephone_to_billing_info();
}

/**
 * Implements hook_update_dependencies().
 */
function roomify_accommodation_booking_update_dependencies() {
  $dependencies['roomify_accommodation_booking'][7012] = array(
    'roomify_system' => 7041,
  );

  return $dependencies;
}

/**
 * Add telephone field to booking.
 */
function roomify_accommodation_booking_update_7001() {
  module_load_include('inc', 'roomify_accommodation_booking', 'roomify_accommodation_booking.fields');

  roomify_accommodation_booking_add_booking_telephone();

  $groups = field_group_read_groups(array(
    'entity_type' => 'bat_booking',
    'bundle'      => 'roomify_accommodation_booking',
    'view_mode'   => 'full',
  ));

  $guest_group = $groups['bat_booking']['roomify_accommodation_booking']['form']['group_guest'];
  $guest_group->children[0] = 'booking_full_name';
  $guest_group->children[1] = 'booking_telephone';
  $guest_group->children[2] = 'booking_address';

  field_group_group_save($guest_group);
}

/**
 * Add telephone field to Billing info.
 */
function roomify_accommodation_booking_update_7002() {
  module_load_include('inc', 'roomify_accommodation_booking', 'roomify_accommodation_booking.fields');

  roomify_accommodation_booking_add_booking_telephone_to_billing_info();
}

/**
 * Add field 'booking_line_item_reference' to all booking types.
 */
function roomify_accommodation_booking_update_7003() {
  module_load_include('inc', 'roomify_accommodation_booking', 'roomify_accommodation_booking.fields');

  $bundles = bat_booking_get_types();
  foreach ($bundles as $bundle) {
    roomify_accommodation_booking_add_line_item_reference($bundle->type);
  }
}

/**
 * Add field 'booking_guest' to all booking types.
 */
function roomify_accommodation_booking_update_7004() {
  module_enable(array('commerce_customer_ui'));

  module_load_include('inc', 'roomify_accommodation_booking', 'roomify_accommodation_booking.fields');

  $bundles = bat_booking_get_types();
  foreach ($bundles as $bundle) {
    roomify_accommodation_booking_add_booking_guest_field($bundle->type);
  }
}

/**
 * Add new order for all existing booking_com or ical bookings.
 */
function roomify_accommodation_booking_update_7005() {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'bat_booking')
    ->entityCondition('bundle', array('booking_com', 'ical'), 'IN');

  $result = $query->execute();

  if (isset($result['bat_booking'])) {
    foreach ($result['bat_booking'] as $booking) {
      $booking = bat_booking_load($booking->booking_id);
      if (!isset($booking->booking_line_item_reference[LANGUAGE_NONE][0]['target_id'])) {
        if ($booking->type == 'booking_com') {
          $event = bat_event_load($booking->booking_event_reference[LANGUAGE_NONE][0]['target_id']);
          $event_wrapper = entity_metadata_wrapper('bat_event', $event);

          $bat_type = bat_type_load($event_wrapper->event_bat_unit_reference->type_id->value());

          // Create a new order.
          $order = commerce_order_new($bat_type->uid, 'pending');
          commerce_order_save($order);

          // Create a new line item.
          $product_id = $bat_type->accommodation_product_reference[LANGUAGE_NONE][0]['target_id'];
          $product = commerce_product_load($product_id);
          $line_item = commerce_product_line_item_new($product, 1, 0, array(), 'roomify_accommodation_booking');

          $amount = $booking->field_bcom_total_price[LANGUAGE_NONE][0]['value'] * 100;
          $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount'] = $amount;
          $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['data']['components']['0']['price']['amount'] = $amount;

          $line_item->order_id = $order->order_id;

          commerce_line_item_save($line_item);

          $customer_profile = commerce_customer_profile_new('billing');
          $customer_profile->commerce_customer_address[LANGUAGE_NONE][0] = array(
            'country' => strtoupper($booking->field_bcom_countrycode[LANGUAGE_NONE][0]['value']),
            'administrative_area' => '',
            'locality' => $booking->field_bcom_city[LANGUAGE_NONE][0]['value'],
            'postal_code' => $booking->field_bcom_zip[LANGUAGE_NONE][0]['value'],
            'thoroughfare' => '',
            'name_line' => $booking->field_bcom_first_name[LANGUAGE_NONE][0]['value'] . ' ' . $booking->field_bcom_last_name[LANGUAGE_NONE][0]['value'],
            'first_name' => $booking->field_bcom_first_name[LANGUAGE_NONE][0]['value'],
            'last_name' => $booking->field_bcom_last_name[LANGUAGE_NONE][0]['value'],
          );
          $customer_profile->booking_telephone = $booking->field_bcom_telephone[LANGUAGE_NONE][0]['value'];

          commerce_customer_profile_save($customer_profile);

          // Add the line item to the order.
          $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
          $order_wrapper->commerce_line_items[] = $line_item;

          $order_wrapper->commerce_customer_billing = $customer_profile;

          // Save the order again to update its line item reference field.
          commerce_order_save($order);

          $booking->booking_line_item_reference[LANGUAGE_NONE][0]['target_id'] = $line_item->line_item_id;
          $booking->booking_guest[LANGUAGE_NONE][0]['target_id'] = $customer_profile->profile_id;

          field_attach_update('bat_booking', $booking);
        }
        elseif ($booking->type == 'ical') {
          $event = bat_event_load($booking->booking_event_reference[LANGUAGE_NONE][0]['target_id']);
          $event_wrapper = entity_metadata_wrapper('bat_event', $event);

          $bat_type = bat_type_load($event_wrapper->event_bat_unit_reference->type_id->value());

          // Create a new order.
          $order = commerce_order_new($bat_type->uid, 'pending');
          commerce_order_save($order);

          // Create a new line item.
          $product_id = $bat_type->accommodation_product_reference[LANGUAGE_NONE][0]['target_id'];
          $product = commerce_product_load($product_id);
          $line_item = commerce_product_line_item_new($product, 1, 0, array(), 'roomify_accommodation_booking');

          $amount = 0;
          $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount'] = $amount;
          $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['data']['components']['0']['price']['amount'] = $amount;

          $line_item->order_id = $order->order_id;

          commerce_line_item_save($line_item);

          $customer_profile = commerce_customer_profile_new('billing');
          commerce_customer_profile_save($customer_profile);

          // Add the line item to the order.
          $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
          $order_wrapper->commerce_line_items[] = $line_item;

          $order_wrapper->commerce_customer_billing = $customer_profile;

          // Save the order again to update its line item reference field.
          commerce_order_save($order);

          $booking->booking_line_item_reference[LANGUAGE_NONE][0]['target_id'] = $line_item->line_item_id;
          $booking->booking_guest[LANGUAGE_NONE][0]['target_id'] = $customer_profile->profile_id;

          field_attach_update('bat_booking', $booking);
        }
      }
    }
  }
}

/**
 * Migrate all existing guest data to a new customer profile.
 */
function roomify_accommodation_booking_update_7006() {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'bat_booking')
    ->entityCondition('bundle', array('roomify_accommodation_booking', 'conversation_booking'), 'IN');

  $result = $query->execute();

  if (isset($result['bat_booking'])) {
    foreach ($result['bat_booking'] as $booking) {
      $booking = bat_booking_load($booking->booking_id);

      $customer_profile = commerce_customer_profile_new('billing');
      if (isset($booking->booking_address[LANGUAGE_NONE][0])) {
        $customer_profile->commerce_customer_address[LANGUAGE_NONE][0] = $booking->booking_address[LANGUAGE_NONE][0];
      }
      if (isset($booking->booking_full_name[LANGUAGE_NONE][0]['value'])) {
        $customer_profile->commerce_customer_address[LANGUAGE_NONE][0]['name_line'] = $booking->booking_full_name[LANGUAGE_NONE][0]['value'];
      }
      $customer_profile->booking_telephone = $booking->booking_telephone;

      commerce_customer_profile_save($customer_profile);

      $booking->booking_guest[LANGUAGE_NONE][0]['target_id'] = $customer_profile->profile_id;

      field_attach_update('bat_booking', $booking);
    }
  }
}

/**
 * Remove Address fields from booking types.
 */
function roomify_accommodation_booking_update_7007() {
  $field_names = array(
    'booking_full_name',
    'booking_address',
    'booking_telephone',
  );

  foreach ($field_names as $field_name) {
    foreach (array('roomify_accommodation_booking', 'conversation_booking') as $bundle) {
      if ($instance = field_info_instance('bat_booking', $field_name, $bundle)) {
        field_delete_instance($instance);
      }
    }
  }
}

/**
 * Add 'Checkout Completion Messsage' variable as translatable.
 */
function roomify_accommodation_booking_update_7008() {
  $variable_realm_list = variable_get('variable_realm_list_language', array());
  $variable_realm_list[] = 'commerce_checkout_completion_message';

  variable_set('variable_realm_list_language', $variable_realm_list);
}

/**
 * Set 'iCal' and 'bookingCom' line item booking reference,
 * update 'iCal' line items label.
 */
function roomify_accommodation_booking_update_7009() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'bat_booking')
    ->entityCondition('bundle', array('booking_com', 'ical', 'roomify_accommodation_booking'), 'IN');

  $results = $query->execute();

  foreach ($results['bat_booking'] as $booking) {
    $booking = bat_booking_load($booking->booking_id);
    if (!empty($booking->booking_line_item_reference)) {
      $line_item = commerce_line_item_load($booking->booking_line_item_reference[LANGUAGE_NONE][0]['target_id']);

      $line_item->commerce_booking_reference[LANGUAGE_NONE][0]['target_id'] = $booking->booking_id;

      $event = bat_event_load($booking->booking_event_reference[LANGUAGE_NONE][0]['target_id']);
      $event_wrapper = entity_metadata_wrapper('bat_event', $event);

      $type = bat_type_load($event_wrapper->event_bat_unit_reference->type_id->value());
      $property = roomify_property_load($type->field_st_property_reference[LANGUAGE_NONE][0]['target_id']);

      $start_date = new DateTime($booking->booking_start_date[LANGUAGE_NONE][0]['value']);
      $end_date = new DateTime($booking->booking_end_date[LANGUAGE_NONE][0]['value']);
      $nights = $start_date->diff($end_date)->days;

      $line_item->line_item_label = roomify_system_get_line_item_label($type, $property, $start_date, $end_date, $nights);

      commerce_line_item_save($line_item);
    }
  }
}

/**
 * Remove booking notification email for cancelled bookings.
 */
function roomify_accommodation_booking_update_7010() {
  $query = db_select('job_schedule', 'j');
  $query->leftJoin('bat_bookings', 'booking_id', 'id = booking_id');
  $item_ids = $query->fields('j', array('item_id'))
    ->condition('j.name', array('roomify_accommodation_booking_owner_notification', 'roomify_accommodation_booking_guest_notification'), 'IN')
    ->condition('booking_id', NULL)
    ->execute()
    ->fetchAllKeyed(0, 0);
  if (!empty($item_ids)) {
    db_delete('job_schedule')
      ->condition('item_id', $item_ids, 'IN')
      ->execute();
  }
}

/**
 * Add field 'booking_user_guest' to all booking types.
 */
function roomify_accommodation_booking_update_7011() {
  module_load_include('inc', 'roomify_accommodation_booking', 'roomify_accommodation_booking.fields');

  $bundles = bat_booking_get_types();
  foreach ($bundles as $bundle) {
    roomify_accommodation_booking_add_booking_user_guest_field($bundle->type);
  }
}

/**
 * Create a dummy user for all iCal bookings.
 */
function roomify_accommodation_booking_update_7012() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'bat_booking')
    ->entityCondition('bundle', 'ical');

  $result = $query->execute();

  if (isset($result['bat_booking'])) {
    $guest_role = user_role_load_by_name('guest');

    foreach ($result['bat_booking'] as $booking) {
      $booking = bat_booking_load($booking->booking_id);

      // A profile is provided.
      if (isset($booking->booking_guest[LANGUAGE_NONE][0]['target_id'])) {
        $profile = commerce_customer_profile_load($booking->booking_guest[LANGUAGE_NONE][0]['target_id']);
        if ($user = user_load($profile->uid)) {
          // It is anonymous or not a guest.
          if ($user->uid == 0 || !in_array('guest', $user->roles)) {
            $user_fields = array(
              'name' => commerce_order_unique_username('rfa-guest-' . user_password(6)),
              'mail' => user_password() . '@example.com',
              'pass' => user_password(8),
              'status' => 1,
              'init' => 'email address',
              'roles' => array($guest_role->rid => $guest_role->name),
            );

            $new_user = user_save('', $user_fields);
            $new_user->commerce_customer_address = $profile->commerce_customer_address;
            user_save($new_user);
            // Let's add information about the billing profile.
            $profile->uid = $new_user->uid;
            commerce_customer_profile_save($profile);
            $booking->user_address[LANGUAGE_NONE][0]['target_id'] = $new_user->uid;
          }
          else {
            $booking->booking_user_guest[LANGUAGE_NONE][0]['target_id'] = $profile->uid;
          }
        }
      }
      else {
        $user_fields = array(
          'name' => commerce_order_unique_username('rfa-guest-' . user_password(6)),
          'mail' => user_password() . '@example.com',
          'pass' => user_password(8),
          'status' => 1,
          'init' => 'email address',
          'roles' => array($guest_role->rid => $guest_role->name)
        );

        $new_user = user_save('', $user_fields);
        $booking->booking_user_guest[LANGUAGE_NONE][0]['target_id'] = $new_user->uid;
      }

      field_attach_update('bat_booking', $booking);
    }
  }
}

/**
 * Create a dummy user for all Booking.com bookings.
 */
function roomify_accommodation_booking_update_7013(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'bat_booking')
      ->entityCondition('bundle', 'booking_com');

    $sandbox['max'] = $query->count()->execute();
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'bat_booking')
    ->entityCondition('bundle', 'booking_com')
    ->range($sandbox['progress'], 20);

  $result = $query->execute();

  if (isset($result['bat_booking'])) {
    $guest_role = user_role_load_by_name('guest');
    foreach ($result['bat_booking'] as $booking) {
      $booking = bat_booking_load($booking->booking_id);

      // A profile is provided.
      if (isset($booking->booking_guest[LANGUAGE_NONE][0]['target_id'])) {
        $profile = commerce_customer_profile_load($booking->booking_guest[LANGUAGE_NONE][0]['target_id']);
        if ($user = user_load($profile->uid)) {
          if ($user->uid == 0 || !in_array('guest', $user->roles)) {
            $user_fields = array(
              'name' => commerce_order_unique_username($booking->field_bcom_first_name[LANGUAGE_NONE][0]['value'] . ' ' . $booking->field_bcom_last_name[LANGUAGE_NONE][0]['value']),
              'mail' => $booking->field_bcom_email[LANGUAGE_NONE][0]['value'],
              'pass' => user_password(8),
              'status' => 1,
              'init' => 'email address',
              'roles' => array($guest_role->rid => $guest_role->name)
            );

            $new_user = user_save('', $user_fields);

            $new_user->user_first_name[LANGUAGE_NONE][0]['value'] = $booking->field_bcom_first_name[LANGUAGE_NONE][0]['value'];
            $new_user->user_last_name[LANGUAGE_NONE][0]['value'] = $booking->field_bcom_last_name[LANGUAGE_NONE][0]['value'];
            $new_user->user_telephone[LANGUAGE_NONE][0]['value'] = $booking->field_bcom_telephone[LANGUAGE_NONE][0]['value'];
            $new_user->user_address = $profile->commerce_customer_address;
            user_save($new_user);
            // Let's add information about the billing profile.
            $profile->uid = $new_user->uid;
            commerce_customer_profile_save($profile);

            $booking->booking_user_guest[LANGUAGE_NONE][0]['target_id'] = $new_user->uid;
          }
          else {
            $booking->booking_user_guest[LANGUAGE_NONE][0]['target_id'] = $profile->uid;
            $user->user_address = $profile->commerce_customer_address;
          }
        }
      }
      else {
        $user_fields = array(
          'name' => commerce_order_unique_username($booking->field_bcom_first_name[LANGUAGE_NONE][0]['value'] . ' ' . $booking->field_bcom_last_name[LANGUAGE_NONE][0]['value']),
          'mail' => $booking->field_bcom_email[LANGUAGE_NONE][0]['value'],
          'pass' => user_password(8),
          'status' => 1,
          'init' => 'email address',
          'roles' => array($guest_role->rid => $guest_role->name)
        );

        $new_user = user_save('', $user_fields);

        $new_user->user_first_name[LANGUAGE_NONE][0]['value'] = $booking->field_bcom_first_name[LANGUAGE_NONE][0]['value'];
        $new_user->user_last_name[LANGUAGE_NONE][0]['value'] = $booking->field_bcom_last_name[LANGUAGE_NONE][0]['value'];
        $new_user->user_telephone[LANGUAGE_NONE][0]['value'] = $booking->field_bcom_telephone[LANGUAGE_NONE][0]['value'];

        user_save($new_user);

        $booking->booking_user_guest[LANGUAGE_NONE][0]['target_id'] = $new_user->uid;
      }

      field_attach_update('bat_booking', $booking);

      $sandbox['progress']++;
    }
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Set "Guest" reference for all "Roomify Accommodation Booking" bookings.
 */
function roomify_accommodation_booking_update_7014(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'bat_booking')
      ->entityCondition('bundle', 'roomify_accommodation_booking');

    $sandbox['max'] = $query->count()->execute();
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'bat_booking')
    ->entityCondition('bundle', 'roomify_accommodation_booking')
    ->range($sandbox['progress'], 20);

  $result = $query->execute();

  if (isset($result['bat_booking'])) {
    $guest_role = user_role_load_by_name('guest');
    foreach ($result['bat_booking'] as $booking) {
      $booking = bat_booking_load($booking->booking_id);

      // A profile is provided.
      if (isset($booking->booking_guest[LANGUAGE_NONE][0]['target_id'])) {
        $profile = commerce_customer_profile_load($booking->booking_guest[LANGUAGE_NONE][0]['target_id']);
        if ($user = user_load($profile->uid)) {
          if ($user->uid == 0 || !in_array('guest', $user->roles)) {
            // The billing profile belongs to an anonymous user or
            // the owner is not a Guest.
            $user_fields = array(
              'name' => commerce_order_unique_username('rfa-guest-' . user_password(6)),
              'mail' => user_password() . '@example.com',
              'pass' => user_password(8),
              'status' => 1,
              'init' => 'email address',
              'roles' => array($guest_role->rid => $guest_role->name)
            );

            $new_user = user_save('', $user_fields);
            $new_user->user_address = $profile->commerce_customer_address;
            $new_user->user_first_name[LANGUAGE_NONE][0]['value'] = $profile->commerce_customer_address[LANGUAGE_NONE][0]['first_name'];
            $new_user->user_last_name[LANGUAGE_NONE][0]['value'] = $profile->commerce_customer_address[LANGUAGE_NONE][0]['last_name'];
            $new_user->user_telephone[LANGUAGE_NONE][0]['value'] = $profile->booking_telephone[LANGUAGE_NONE][0]['value'];
            $new_user = user_save($new_user);
            // Let's add information about the billing profile.
            $profile->uid = $new_user->uid;
            commerce_customer_profile_save($profile);
            $booking->booking_user_guest[LANGUAGE_NONE][0]['target_id'] = $new_user->uid;
          }
          else {
            $user->user_address = $profile->commerce_customer_address;
            $user->user_first_name[LANGUAGE_NONE][0]['value'] = $profile->commerce_customer_address[LANGUAGE_NONE][0]['first_name'];
            $user->user_last_name[LANGUAGE_NONE][0]['value'] = $profile->commerce_customer_address[LANGUAGE_NONE][0]['last_name'];
            $user->user_telephone[LANGUAGE_NONE][0]['value'] = $profile->booking_telephone[LANGUAGE_NONE][0]['value'];

            user_save($user);
            $booking->booking_user_guest[LANGUAGE_NONE][0]['target_id'] = $profile->uid;
          }
        }
      }
      // No profile, let's create a user for that.
      else {
        $user_fields = array(
          'name' => commerce_order_unique_username('rfa-guest-' . user_password(6)),
          'mail' => user_password() . '@example.com',
          'pass' => user_password(8),
          'status' => 1,
          'init' => 'email address',
          'roles' => array($guest_role->rid => $guest_role->name)
        );

        $new_user = user_save('', $user_fields);

        $booking->booking_user_guest[LANGUAGE_NONE][0]['target_id'] = $new_user->uid;
      }

      field_attach_update('bat_booking', $booking);

      $sandbox['progress']++;
    }
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Enable 'administerusersbyrole' module.
 */
function roomify_accommodation_booking_update_7015() {
  module_enable(array('administerusersbyrole'));
}

/**
 * Enable 'subuser' module.
 */
function roomify_accommodation_booking_update_7016() {
  module_enable(array('subuser', 'subuser_ui'));
}

/**
 * Set the Booking guest as Order user.
 */
function roomify_accommodation_booking_update_7017(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'bat_booking')
      ->entityCondition('bundle', 'roomify_accommodation_booking');

    $sandbox['max'] = $query->count()->execute();
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'bat_booking')
    ->range($sandbox['progress'], 20);

  $result = $query->execute();

  if (isset($result['bat_booking'])) {
    foreach ($result['bat_booking'] as $booking) {
      $booking = bat_booking_load($booking->booking_id);
      $booking_wrapper = entity_metadata_wrapper('bat_booking', $booking);

      if (isset($booking->booking_user_guest[LANGUAGE_NONE][0]['target_id'])) {
        if ($user = $booking_wrapper->booking_user_guest->value()) {
          if ($order = commerce_order_load($booking_wrapper->booking_line_item_reference->order_id->value())) {
            if ($order->uid != $user->uid) {
              $order->uid = $user->uid;

              commerce_order_save($order);
            }
          }
        }
      }

      $sandbox['progress']++;
    }
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}
