<?php

/**
 * @file
 */

use Roomify\Bat\Calendar\Calendar;
use Roomify\Bat\Store\DrupalDBStore;
use Roomify\Bat\Unit\Unit;
use Roomify\Bat\Valuator\IntervalValuator;
use Roomify\Bat\Constraint\DateConstraint;

/**
 * Implements hook_menu().
 */
function roomify_accommodation_booking_menu() {
  $items = array();

  $items['admin/bat/config/booking/settings'] = array(
    'title' => 'Global Booking Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('roomify_accommodation_booking_global_settings_form'),
    'access arguments' => array('update any bat_booking entity'),
    'file' => 'roomify_accommodation_booking.admin.inc',
  );

  $items['admin/bat/config/booking/notifications'] = array(
    'title' => 'Booking Notifications',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('roomify_accommodation_booking_notifications_form'),
    'access arguments' => array('update any bat_booking entity'),
  );

  $items['booking/%bat_date/%bat_date/%bat_type'] = array(
    'title' => 'Booking',
    'page callback' => 'roomify_accommodation_booking_confirmation_page',
    'page arguments' => array(1, 2, 3),
    'access arguments' => array('book units'),
    'type' => MENU_CALLBACK,
  );

  $items['conversation-booking/%roomify_conversation'] = array(
    'title' => 'Booking',
    'page callback' => 'roomify_accommodation_booking_conversation_confirmation_page',
    'page arguments' => array(1),
    'access arguments' => array('book units'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function roomify_accommodation_booking_theme() {
  return array(
    'booking_confirmation_page' => array(
      'template' => 'roomify_accommodation_booking_confirmation_page',
      'variables' => array(
        'current_search' => NULL,
        'featured_image' => NULL,
        'form' => NULL,
        'offers' => array(),
      ),
    ),
    'deposit_options_components' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_bat_event_constraints_info().
 */
function roomify_accommodation_booking_bat_event_constraints_info() {
  $constraints = array();

  $start_after = new DateTime();
  $start_after->setTime(0, 0);

  if ($days_advance = variable_get('roomify_accommodation_booking_days_in_advance', 1)) {
    $start_after->add(new DateInterval('P' . $days_advance . 'D'));
  }
  $start_after->sub(new DateInterval('PT1M'));

  $future_limit = variable_get('roomify_accommodation_booking_future_limit', 31104000);
  $end_before = new DateTime();
  $end_before->setTime(0, 0);
  $end_before->add(new DateInterval('PT' . $future_limit . 'S'));

  $types = bat_unit_get_types();
  foreach ($types as $type) {
    $drupal_units = bat_unit_load_multiple(FALSE, array('type_id' => $type->type_id));
    $bat_units = array();
    foreach ($drupal_units as $unit_id => $unit) {
      $bat_units[] = new Unit($unit_id, 0);
      $constraints[] = array(
        'type' => $type->type,
        'constraint' => new DateConstraint($bat_units, $start_after, $end_before),
      );
    }
  }

  return $constraints;
}

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 */
function roomify_accommodation_booking_commerce_checkout_pane_info_alter(&$panes) {
  // Change cart summary pane title.
  $panes['cart_contents']['title'] = t('Bookings');
}

/**
 * Implements hook_commerce_product_type_info().
 */
function roomify_accommodation_booking_commerce_product_type_info() {
  $product_types = array();

  $product_types['roomify_accommodation_product'] = array(
    'type' => 'roomify_accommodation',
    'name' => t('Roomify Accommodation'),
    'description' => t('A Roomify Accommodation product.'),
  );

  return $product_types;
}

/**
 * Implements hook_commerce_line_item_type_info().
 */
function roomify_accommodation_booking_commerce_line_item_type_info() {
  return array(
    'roomify_accommodation_booking' => array(
      'name' => t('Roomify Accommodation Booking'),
      'description' => t('Represents a booking of a Roomify Accommodation product.'),
      'product' => TRUE,
      'add_form_submit_value' => t('Add product'),
      'base' => 'roomify_accommodation_booking_line_item',
    ),
  );
}

/**
 * Ensures the booking line item type contains a product reference field.
 *
 * @param array $line_item_type
 *   The line item type object.
 */
function roomify_accommodation_booking_line_item_configuration($line_item_type) {
  module_load_include('inc', 'roomify_accommodation_booking', 'roomify_accommodation_booking.fields');

  // Create the product reference field for the line item type.
  commerce_product_line_item_configuration($line_item_type);

  roomify_accommodation_booking_line_item_add_booking_reference('roomify_accommodation_booking');
}

/**
 * Implements hook_line_item_title().
 */
function roomify_accommodation_booking_line_item_title($line_item) {
  // Use the line item's label for the title.
  return ($line_item->line_item_label);
}

/**
 * Implements hook_views_api().
 */
function roomify_accommodation_booking_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'roomify_accommodation_booking') . '/views',
  );
}

/**
 * Implements hook_views_default_views_alter().
 */
function roomify_accommodation_booking_views_default_views_alter(&$views) {
  if (isset($views['commerce_cart_summary'])) {
    // Remove filter on non-product line item types.
    unset($views['commerce_cart_summary']->display['default']->display_options['filters']['product_line_item_type']);

    // Show labels for non-product line items.
    $line_item_label = array(
      'id' => 'line_item_label',
      'table' => 'commerce_line_item',
      'field' => 'line_item_label',
      'relationship' => 'commerce_line_items_line_item_id',
      'label' => '',
      'exclude' => TRUE,
      'element_label_colon' => FALSE,
    );
    $views['commerce_cart_summary']->display['default']->display_options['fields'] = array('line_item_label' => $line_item_label) + $views['commerce_cart_summary']->display['default']->display_options['fields'];
    $views['commerce_cart_summary']->display['default']->display_options['fields']['line_item_title']['empty'] = '[line_item_label]';

    // Add row class for line item type.
    $line_item_type = array(
      'id' => 'type',
      'table' => 'commerce_line_item',
      'field' => 'type',
      'relationship' => 'commerce_line_items_line_item_id',
      'label' => '',
      'exclude' => TRUE,
      'alter' => array(
        'make_link' => TRUE,
        'replace_spaces' => TRUE,
      ),
      'element_label_colon' => FALSE,
    );
    $views['commerce_cart_summary']->display['default']->display_options['fields'] = array('type' => $line_item_type) + $views['commerce_cart_summary']->display['default']->display_options['fields'];
    $views['commerce_cart_summary']->display['default']->display_options['style_options']['row_class'] = '[type]';

    // Change "Product" to "Reservation" in cart summary table header.
    $views['commerce_cart_summary']->display['default']->display_options['fields']['line_item_title']['label'] = t('Reservation');
  }

  if (isset($views['commerce_cart_form'])) {
    // Remove filter on non-product line item types.
    unset($views['commerce_cart_form']->display['default']->display_options['filters']['product_line_item_type']);

    // Show labels for non-product line items.
    $line_item_label = array(
      'id' => 'line_item_label',
      'table' => 'commerce_line_item',
      'field' => 'line_item_label',
      'relationship' => 'commerce_line_items_line_item_id',
      'label' => '',
      'exclude' => TRUE,
      'element_label_colon' => FALSE,
    );
    $views['commerce_cart_form']->display['default']->display_options['fields'] = array('line_item_label' => $line_item_label) + $views['commerce_cart_form']->display['default']->display_options['fields'];
    $views['commerce_cart_form']->display['default']->display_options['fields']['line_item_title']['empty'] = '[line_item_label]';

    // Change "Product" to "Reservation" in cart table header.
    $views['commerce_cart_form']->display['default']->display_options['fields']['line_item_title']['label'] = t('Reservation');
    unset($views['commerce_cart_form']->display['default']->display_options['fields']['edit_quantity']);
    $views['commerce_cart_form']->display['default']->display_options['fields']['edit_delete']['label'] = t('Cancel');
  }

  if (isset($views['commerce_cart_block'])) {
    unset($views['commerce_cart_block']->display['default']->display_options['fields']['quantity']);
    unset($views['commerce_cart_block']->display['default']->display_options['footer']['line_item_summary']['info']['quantity']);
  }

  if (isset($views['commerce_line_item_table'])) {
    $views['commerce_line_item_table']->display['default']->display_options['fields']['line_item_label']['exclude'] = TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * FORM_ID = views_form_my_cart_default.
 */
function roomify_accommodation_booking_form_views_form_my_cart_default_alter(&$form, &$form_state, $form_id) {
  // Hide 'Remove' button for mandatory add-ons.
  $line_items_to_disable = array();
  foreach ($form_state['order']->commerce_line_items[LANGUAGE_NONE] as $line_items) {
    $line_item = commerce_line_item_load($line_items['line_item_id']);

    if ($line_item->type == 'roomify_accommodation_booking') {
      $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

      $booking_id = $line_item->commerce_booking_reference[LANGUAGE_NONE][0]['target_id'];
      $type = bat_type_load($line_item_wrapper->commerce_booking_reference->booking_event_reference->event_bat_unit_reference->type_id->value());

      $options = roomify_accommodation_options_get_type_options($type);
      foreach ($options as $option) {
        if ($option['type'] == 'mandatory') {

          // This is a mandatory add-on, find any line items with a matching
          // label and booking reference and add them to the list to disable
          // the delete button.
          foreach ($form_state['order']->commerce_line_items[LANGUAGE_NONE] as $lin) {
            $li = commerce_line_item_load($lin['line_item_id']);
            if (isset($li->commerce_booking_reference)) {
              if ($li->commerce_booking_reference[LANGUAGE_NONE][0]['target_id'] == $booking_id &&
                  $li->line_item_label == $option['name']) {
                $line_items_to_disable[] = $li->line_item_id;
              }
            }
          }
        }
      }
    }
  }

  // Disable delete button for mandatory add-ons.
  foreach ($form['edit_delete'] as &$form_item) {
    if (in_array($form_item['#line_item_id'], $line_items_to_disable)) {
      $form_item['#disabled'] = TRUE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * FORM_ID = views_form_commerce_cart_form_default.
 */
function roomify_accommodation_booking_form_views_form_commerce_cart_form_default_alter(&$form, &$form_state, $form_id) {
  // Hide 'Remove' button for mandatory add-ons.
  $line_items_to_disable = array();

  foreach ($form_state['line_items'] as $line_item) {
    if ($line_item->type == 'roomify_accommodation_booking') {
      $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

      $booking_id = $line_item->commerce_booking_reference[LANGUAGE_NONE][0]['target_id'];
      $type = bat_type_load($line_item_wrapper->commerce_booking_reference->booking_event_reference->event_bat_unit_reference->type_id->value());

      $options = roomify_accommodation_options_get_type_options($type);
      foreach ($options as $option) {
        if ($option['type'] == 'mandatory') {

          // This is a mandatory add-on, find any line items with a matching
          // label and booking reference and add them to the list to disable
          // the delete button.
          foreach ($form_state['line_items'] as $li) {
            if (isset($li->commerce_booking_reference)) {
              if ($li->commerce_booking_reference[LANGUAGE_NONE][0]['target_id'] == $booking_id &&
                  $li->line_item_label == $option['name']) {
                $line_items_to_disable[] = $li->line_item_id;
              }
            }
          }
        }
      }
    }
  }

  // Disable delete button for mandatory add-ons.
  foreach ($form['edit_delete'] as &$form_item) {
    if (in_array($form_item['#line_item_id'], $line_items_to_disable)) {
      $form_item['#disabled'] = TRUE;
    }
  }

  $form['actions']['submit']['#access'] = FALSE;
  $form['actions']['checkout']['#value'] = t('Complete Reservation');
  $form['actions']['checkout']['#attributes']['class'][] = 'btn';
  $form['actions']['checkout']['#attributes']['class'][] = 'btn-success';

  foreach (element_children($form['edit_delete']) as $key) {
    $line_item = commerce_line_item_load($form['edit_delete'][$key]['#line_item_id']);

    if ($line_item->type == 'roomify_accommodation_booking') {
      $form['edit_delete'][$key]['#value'] = t('Cancel Reservation');
      $form['edit_delete'][$key]['#attributes']['class'][] = 'btn';
      $form['edit_delete'][$key]['#attributes']['class'][] = 'btn-danger';
    }
  }
}

/**
 * Confirmation page handler.
 */
function roomify_accommodation_booking_confirmation_page($start_date, $end_date, $type) {
  $days_advance = variable_get('roomify_accommodation_booking_days_in_advance', 1);
  $future_limit = variable_get('roomify_accommodation_booking_future_limit', 31104000);

  $start_after = new DateTime();
  $start_after->setTime(0, 0);
  $start_after->add(new DateInterval('P' . $days_advance . 'D'));

  $end_before = new DateTime();
  $end_before->setTime(0, 0);
  $end_before->add(new DateInterval('PT' . $future_limit . 'S'));

  if ($start_date >= $end_date || $start_date < $start_after || $end_date > $end_before) {
    return drupal_not_found();
  }

  global $databases;

  $prefix = (isset($databases['default']['default']['prefix'])) ? $databases['default']['default']['prefix'] : '';

  if (isset($_GET['property'])) {
    $property = entity_load_single('roomify_property', check_plain($_GET['property']));
  }
  else {
    $property_id = field_get_items('bat_type', $type, 'field_st_property_reference');
    $property = entity_load_single('roomify_property', $property_id[0]['target_id']);
  }

  if (isset($type->name)) {
    drupal_set_title(t('Booking for @type_name', array('@type_name' => $type->name)));
    // Change Title for Locanda Properties.
    if ($property->type == 'locanda_property' && isset($property->name)) {
      drupal_set_title(t('Booking for @property_name - @type_name', array('@property_name' => $property->name, '@type_name' => $type->name)));
    }
    // Change Title for Casa Properties.
    if ($property->type == 'casa_property' && isset($property->name)) {
      drupal_set_title(t('Booking for @property_name', array('@property_name' => $property->name)));
    }
  }

  $group_size = 0;
  if (isset($_GET['group_size']) && !empty($_GET['group_size'])) {
    $group_size = check_plain($_GET['group_size']);
  }

  $nights = $start_date->diff($end_date)->days;

  // We need to use a date with one minute earlier.
  $temp_end_date = clone($end_date);
  $temp_end_date->sub(new DateInterval('PT1M'));

  $offer_descriptions = array();

  $offer_amount = 0;
  $offer_always_override_price = FALSE;
  if (module_exists('roomify_offers')) {
    $offers = roomify_offers_get_offers($property, $start_date, $temp_end_date);

    if (!empty($offers)) {
      foreach ($offers as $offer) {
        if (isset($offer->offer_description[LANGUAGE_NONE][0]['value'])) {
          $offer_descriptions[] = $offer->offer_description[LANGUAGE_NONE][0]['value'];
        }
        if (isset($offer->offer_always_override_price[LANGUAGE_NONE][0]['value']) &&
            $offer->offer_always_override_price[LANGUAGE_NONE][0]['value']) {
          $offer_always_override_price = TRUE;
        }
      }

      if (isset($type->field_st_rates_for_person[LANGUAGE_NONE][0]['value']) &&
          $type->field_st_rates_for_person[LANGUAGE_NONE][0]['value']) {
        $offer_amount = roomify_accommodation_booking_calculate_price($start_date, $temp_end_date, $type->type_id, $group_size, $offers);
      }
      else {
        $offer_amount = roomify_accommodation_booking_calculate_price($start_date, $temp_end_date, $type->type_id, 0, $offers);
      }
    }
  }

  if (isset($type->field_st_rates_for_person[LANGUAGE_NONE][0]['value']) &&
          $type->field_st_rates_for_person[LANGUAGE_NONE][0]['value']) {
    $amount = roomify_accommodation_booking_calculate_price($start_date, $temp_end_date, $type->type_id, $group_size);
  }
  else {
    $amount = roomify_accommodation_booking_calculate_price($start_date, $temp_end_date, $type->type_id);
  }

  // Don't show offer price when greater then amount.
  if ($offer_amount >= $amount && !$offer_always_override_price) {
    $offer_amount = 0;
    $offer_descriptions = array();
  }

  $currency_setting = commerce_currency_load(commerce_default_currency());
  $currency_symbol = $currency_setting['symbol'];

  $booking_cost = commerce_currency_format($amount, $currency_setting['code']);

  $offer_cost = '';
  if ($offer_amount > 0) {
    $offer_cost = commerce_currency_format($offer_amount, $currency_setting['code']);
  }

  $current_search = drupal_get_form('roomify_accommodation_booking_current_search_form', $type->type_id, $start_date, $end_date, $nights, $group_size, $booking_cost, $offer_cost, !$offer_always_override_price);

  $form = drupal_get_form('roomify_accommodation_booking_confirmation_form', $start_date, $end_date, $nights, $type->type_id, $amount, $offer_amount, FALSE, NULL, !$offer_always_override_price);

  $image = FALSE;
  if ($featured_image = field_get_items('roomify_property', $property, 'field_sp_featured_image')) {
    $image = array(
      'style_name' => 'homepage_features',
      'path' => $featured_image[0]['uri'],
    );
  }

  return array(
    '#theme' => 'booking_confirmation_page',
    '#current_search' => $current_search,
    '#featured_image' => $image,
    '#form' => $form,
    '#offers' => $offer_descriptions,
  );
}

/**
 * Change Search form.
 */
function roomify_accommodation_booking_current_search_form($form, &$form_state, $type_id, $start_date, $end_date, $nights, $group_size, $booking_cost, $offer_amount = '', $show_original_price = TRUE) {
  $date_format = variable_get('bat_daily_date_format', 'Y-m-d');

  $type = bat_type_load($type_id);

  $temp_end_date = clone($end_date);
  if ($type->type == 'single_day_activity' || $type->type == 'single_day_tour') {
    $date_format = variable_get('bat_date_format', 'Y-m-d H:i');
    $temp_end_date->add(new DateInterval('PT1M'));
  }
  else {
    $date_format = variable_get('bat_daily_date_format', 'Y-m-d');
  }

  $form['current_search']['start_date'] = array(
    '#markup' => '<div class="current-search-item current-search-arrival"><label>' . t('Arriving On') . '</label>' . '<span>' . $start_date->format($date_format) . '</span></div>',
  );

  $form['current_search']['end_date'] = array(
    '#markup' => '<div class="current-search-item current-search-departure"><label>' . t('Departing On') . '</label>' . '<span>' . $temp_end_date->format($date_format) . '</span></div>',
  );

  $form['current_search']['nights'] = array(
    '#markup' => '<div class="current-search-item current-search-nights"><label>' . t('Nights') . '</label>' . '<span>' . $nights . '</span></div>',
  );

  $form['current_search']['group_size'] = array(
    '#markup' => '<div class="current-search-item current-search-group-size"><label>' . t('Group size') . '</label>' . '<span>' . $group_size . '</span></div>',
  );

  if ($offer_amount != '') {
    if ($show_original_price) {
      $form['current_search']['price'] = array(
        '#markup' => '<div class="current-search-item current-search-price"><label>' . t('Booking Cost') . '</label>' . '<span class="booking-cost">' . $booking_cost . '</span><span class="offer-cost">' . $offer_amount . '</span></div>',
      );
    }
    else {
      $form['current_search']['price'] = array(
        '#markup' => '<div class="current-search-item current-search-price"><label>' . t('Booking Cost') . '</label>' . '<span class="offer-cost">' . $offer_amount . '</span></div>',
      );
    }
  }
  else {
    $form['current_search']['price'] = array(
      '#markup' => '<div class="current-search-item current-search-price"><label>' . t('Booking Cost') . '</label>' . '<span>' . $booking_cost . '</span></div>',
    );
  }

  $form['current_search']['type_id'] = array(
    '#type' => 'hidden',
    '#value' => $type_id,
  );

  $form['current_search']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Change Search'),
    '#prefix' => '<div class="current-search-item current-search-submit">',
    '#suffix' => '</div>',
  );

  return $form;
}

/**
 * Form Submission, just redirect to the listing page.
 */
function roomify_accommodation_booking_current_search_form_submit($form, &$form_state) {
  $type_id = $form_state['values']['type_id'];
  $type = bat_type_load($type_id);

  $property_reference = field_get_items('bat_type', $type, 'field_st_property_reference');

  drupal_goto('listing/' . $property_reference[0]['target_id']);
}

/**
 * Booking confirmation form.
 */
function roomify_accommodation_booking_confirmation_form($form, &$form_state, $start_date, $end_date, $nights, $type_id, $amount, $offer_amount = 0, $unit_id = FALSE, $conversation = NULL, $show_original_price = TRUE) {
  $type = bat_type_load($type_id);
  $property = roomify_property_load($type->field_st_property_reference[LANGUAGE_NONE][0]['target_id']);

  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add-ons'),
    '#tree' => TRUE,
  );

  // Add options checkboxes and convert Price options in Price modifiers.
  $price_modifiers = array();

  $options = roomify_accommodation_options_get_type_options($type);
  if (count($options)) {
    foreach ($options as $option) {
      $option_name = roomify_accommodation_options_get_machine_name($option['name']);
      $operation = roomify_accommodation_options_get_operation_label($option);

      $form['options'][$option_name] = array(
        '#type' => 'checkbox',
        '#title' => t($option['name']) . ' (' . $operation . ')',
        '#ajax' => array(
          'callback' => 'roomify_accommodation_booking_options_change_callback',
          'wrapper' => 'type_' . $type->type_id . '_price',
        ),
      );

      if ($option['type'] == ROOMIFY_ACCOMMODATION_OPTIONS_MANDATORY) {
        $form['options'][$option_name]['#default_value'] = '1';
        $form['options'][$option_name]['#disabled'] = TRUE;
      }

      // Show quantity field selector if in option quantity is set.
      if (is_numeric($option['quantity'])) {
        if (((isset($form_state['values']['options'][$option_name]) && $form_state['values']['options'][$option_name] == 1)
              || $option['type'] == ROOMIFY_ACCOMMODATION_OPTIONS_MANDATORY) && $option['quantity'] > 1) {

          $form['options'][$option_name . ':quantity'] = array(
            '#type' => 'select',
            '#title' => t('Quantity'),
            '#options' => range(1, $option['quantity']),
            '#ajax' => array(
              'callback' => 'roomify_accommodation_booking_options_change_callback',
              'wrapper' => 'type_' . $type->type_id . '_price',
            ),
            '#prefix' => '<div class="roomify_accommodation-search-result__type-quantity" id="type_' . $type->type_id . '_' . $option_name . '_quantity">',
            '#suffix' => '</div>',
          );
        }
        else {
          $form['options'][$option_name . ':quantity'] = array(
            '#prefix' => '<div class="roomify_accommodation-search-result__type-quantity" id="type_' . $type->type_id . '_' . $option_name . '_quantity">',
            '#suffix' => '</div>',
          );
        }
      }

      if ($option['type'] == ROOMIFY_ACCOMMODATION_OPTIONS_MANDATORY) {
        $quantity = 1;
        if (isset($form_state['values']['options'][$option_name . ':quantity']) && $option['operation'] != ROOMIFY_ACCOMMODATION_OPTIONS_REPLACE) {
          $quantity = $form_state['values']['options'][$option_name . ':quantity'] + 1;
        }

        $price_modifiers[$option_name] = array(
          '#type' => ROOMIFY_ACCOMMODATION_OPTIONS_DYNAMIC_MODIFIER,
          '#op_type' => $option['operation'],
          '#amount' => $option['value'],
          '#quantity' => $quantity,
        );
      }
      elseif (isset($form_state['values']['options'][$option_name])) {
        $quantity = 1;
        if (isset($form_state['values']['options'][$option_name . ':quantity']) && $option['operation'] != ROOMIFY_ACCOMMODATION_OPTIONS_REPLACE) {
          $quantity = $form_state['values']['options'][$option_name . ':quantity'] + 1;
        }

        if ($form_state['values']['options'][$option_name] == 1) {
          if ($option['type'] != ROOMIFY_ACCOMMODATION_OPTIONS_ONREQUEST) {
            $price_modifiers[$option_name] = array(
              '#type' => ROOMIFY_ACCOMMODATION_OPTIONS_DYNAMIC_MODIFIER,
              '#op_type' => $option['operation'],
              '#amount' => $option['value'],
              '#quantity' => $quantity,
            );
          }
        }
      }
    }
  }
  else {
    unset($form['options']);
  }

  // Store modifiers in form state.
  $form_state['price_modifiers'] = $price_modifiers;

  $form['start_date'] = array(
    '#type' => 'hidden',
    '#value' => $start_date,
  );

  $form['end_date'] = array(
    '#type' => 'hidden',
    '#value' => $end_date,
  );

  $form['nights'] = array(
    '#type' => 'hidden',
    '#value' => $nights,
  );

  $form['type_id'] = array(
    '#type' => 'hidden',
    '#value' => $type_id,
  );

  $form['amount'] = array(
    '#type' => 'hidden',
    '#value' => $amount,
  );

  $form['offer_amount'] = array(
    '#type' => 'hidden',
    '#value' => $offer_amount,
  );

  if ($conversation !== NULL) {
    $form['conversation'] = array(
      '#type' => 'hidden',
      '#value' => $conversation->conversation_id,
    );
  }

  if (isset($_GET['group_size']) && !empty($_GET['group_size'])) {
    $form_state['storage']['group_size'] = check_plain($_GET['group_size']);
  }

  $total = $amount;
  $total_offer = $offer_amount;

  // Add price for each selected option.
  foreach (roomify_accommodation_options_get_type_options($type) as $option) {
    $option_name = roomify_accommodation_options_get_machine_name($option['name']);

    if ($option['type'] == ROOMIFY_ACCOMMODATION_OPTIONS_MANDATORY) {
      $quantity = isset($form_state['values']['options'][$option_name . ':quantity']) ? $form_state['values']['options'][$option_name . ':quantity'] + 1 : 1;
      $price = roomify_accommodation_options_get_option_price($amount / 100, $option, $quantity, $nights) * $quantity;

      $total += $price;

      if ($offer_amount > 0) {
        $price = roomify_accommodation_options_get_option_price($offer_amount / 100, $option, $quantity, $nights) * $quantity;

        $total_offer += $price;
      }
    }
    elseif (!empty($form_state['values']['options'][$option_name])) {
      $quantity = isset($form_state['values']['options'][$option_name . ':quantity']) ? $form_state['values']['options'][$option_name . ':quantity'] + 1 : 1;
      $price = roomify_accommodation_options_get_option_price($amount / 100, $option, $quantity, $nights) * $quantity;

      $total += $price;

      if ($offer_amount > 0) {
        $price = roomify_accommodation_options_get_option_price($offer_amount / 100, $option, $quantity, $nights) * $quantity;

        $total_offer += $price;
      }
    }
  }

  $currency_setting = commerce_currency_load(commerce_default_currency());

  $header = array(
    array(
      'data' => '',
      'class' => 'name',
    ),
    array(
      'data' => $currency_setting['code'],
      'class' => 'price',
    ),
  );

  $offer_tax = 0;
  $tax = 0;
  $rows = array();
  $deposit = $total;

  if ($deposit_rule = rules_config_load('roomify_accommodation_booking_deposit')) {
    if ($deposit_rule->active) {
      $full_payment = FALSE;

      if (variable_get('roomify_accommodation_booking_full_payment', 0)) {
        $now = new DateTime();
        $interval = format_interval(variable_get('roomify_accommodation_booking_full_payment_duration', 86400));
        $now->modify('+' . $interval);

        if ($start_date <= $now) {
          $full_payment = TRUE;
        }
      }

      if ($full_payment === FALSE) {
        $deposit_options = variable_get('roomify_accommodation_booking_deposit_options', array());

        $multiply_amount = variable_get('roomify_accommodation_booking_deposit_multiply', 25) / 100;

        foreach ($deposit_options as $option) {
          $option_sd = new DateTime($option['start_date']);
          $option_ed = new DateTime($option['end_date']);

          if ($start_date >= $option_sd && $start_date <= $option_ed) {
            $multiply_amount = $option['deposit'] / 100;
            break;
          }
        }

        $deposit = $total * $multiply_amount;

        if ($offer_amount > 0) {
          $offer_deposit = $total_offer * $multiply_amount;

          if ($show_original_price) {
            $rows[] = array(
              array(
                'data' => t(variable_get('roomify_accommodation_booking_deposit_label', 'Deposit (%deposit% down)'), array('%deposit' => $multiply_amount * 100)),
                'class' => 'name',
              ),
              array(
                'data' => '<span class="booking-cost">' . commerce_currency_format($deposit, $currency_setting['code']) . '</span><span class="offer-cost">' . commerce_currency_format($offer_deposit, $currency_setting['code']) . '</span>',
                'class' => 'price',
              ),
            );
          }
          else {
            $rows[] = array(
              array(
                'data' => t(variable_get('roomify_accommodation_booking_deposit_label', 'Deposit (%deposit% down)'), array('%deposit' => $multiply_amount * 100)),
                'class' => 'name',
              ),
              array(
                'data' => '<span class="offer-cost">' . commerce_currency_format($offer_deposit, $currency_setting['code']) . '</span>',
                'class' => 'price',
              ),
            );
          }
        }
        else {
          $rows[] = array(
            array(
              'data' => t(variable_get('roomify_accommodation_booking_deposit_label', 'Deposit (%deposit% down)'), array('%deposit' => $multiply_amount * 100)),
              'class' => 'name',
            ),
            array(
              'data' => commerce_currency_format($deposit, $currency_setting['code']),
              'class' => 'price',
            ),
          );
        }
      }
    }
  }

  if (isset($property->field_tax_enable[LANGUAGE_NONE][0]['value']) && $property->field_tax_enable[LANGUAGE_NONE][0]['value']) {
    $tax = $total * $property->field_tax_rate[LANGUAGE_NONE][0]['value'] / 100;

    if ($offer_amount > 0) {
      $offer_tax = $total_offer * $property->field_tax_rate[LANGUAGE_NONE][0]['value'] / 100;
    }

    if ($offer_amount > 0) {
      $rows[] = array(
        array(
          'data' => $property->field_tax_description[LANGUAGE_NONE][0]['value'],
          'class' => 'name',
        ),
        array(
          'data' => '<span class="tax">' . commerce_currency_format($tax, $currency_setting['code']) . '</span><span class="offer-tax">' . commerce_currency_format($offer_tax, $currency_setting['code']) . '</span>',
          'class' => 'price',
        ),
      );
    }
    else {
      $rows[] = array(
        array(
          'data' => $property->field_tax_description[LANGUAGE_NONE][0]['value'],
          'class' => 'name',
        ),
        array(
          'data' => commerce_currency_format($tax, $currency_setting['code']),
          'class' => 'price',
        ),
      );
    }
  }

  if ($reminder = $total - $deposit) {
    if ($offer_amount > 0) {
      if ($show_original_price) {
        $rows[] = array(
          array(
            'data' => t(variable_get('roomify_accommodation_booking_payable_now_label', 'Payable now')),
            'class' => 'name bold',
          ),
          array(
            'data' => '<span class="booking-cost">' . commerce_currency_format($deposit + $tax, $currency_setting['code']) . '</span><span class="offer-cost">' . commerce_currency_format($offer_deposit + $tax, $currency_setting['code']) . '</span>',
            'class' => 'price bold',
          ),
        );

        $offer_reminder = $total_offer - $offer_deposit;

        $rows[] = array(
          array(
            'data' => t(variable_get('roomify_accommodation_booking_reminder_label', 'Reminder (due 60 days before arrival)')),
            'class' => 'name',
          ),
          array(
            'data' => '<span class="booking-cost">' . commerce_currency_format($reminder, $currency_setting['code']) . '</span><span class="offer-cost">' . commerce_currency_format($offer_reminder, $currency_setting['code']) . '</span>',
            'class' => 'price',
          ),
        );
      }
      else {
        $rows[] = array(
          array(
            'data' => t(variable_get('roomify_accommodation_booking_payable_now_label', 'Payable now')),
            'class' => 'name bold',
          ),
          array(
            'data' => '<span class="offer-cost">' . commerce_currency_format($offer_deposit + $tax, $currency_setting['code']) . '</span>',
            'class' => 'price bold',
          ),
        );

        $offer_reminder = $total_offer - $offer_deposit;

        $rows[] = array(
          array(
            'data' => t(variable_get('roomify_accommodation_booking_reminder_label', 'Reminder (due 60 days before arrival)')),
            'class' => 'name',
          ),
          array(
            'data' => '<span class="offer-cost">' . commerce_currency_format($offer_reminder, $currency_setting['code']) . '</span>',
            'class' => 'price',
          ),
        );
      }
    }
    else {
      $rows[] = array(
        array(
          'data' => t(variable_get('roomify_accommodation_booking_payable_now_label', 'Payable now')),
          'class' => 'name bold',
        ),
        array(
          'data' => commerce_currency_format($deposit + $tax, $currency_setting['code']),
          'class' => 'price bold',
        ),
      );

      $rows[] = array(
        array(
          'data' => t(variable_get('roomify_accommodation_booking_reminder_label', 'Reminder (due 60 days before arrival)')),
          'class' => 'name',
        ),
        array(
          'data' => commerce_currency_format($reminder, $currency_setting['code']),
          'class' => 'price',
        ),
      );
    }
  }
  else {
    if ($offer_amount > 0) {
      if ($show_original_price) {
        $rows[] = array(
          array(
            'data' => t(variable_get('roomify_accommodation_booking_total_cost_label', 'Total cost')),
            'class' => 'name bold',
          ),
          array(
            'data' => '<span class="booking-cost">' . commerce_currency_format($total + $tax, $currency_setting['code']) . '</span><span class="offer-cost">' . commerce_currency_format($total_offer + $offer_tax, $currency_setting['code']) . '</span>',
            'class' => 'price bold',
          ),
        );
      }
      else {
        $rows[] = array(
          array(
            'data' => t(variable_get('roomify_accommodation_booking_total_cost_label', 'Total cost')),
            'class' => 'name bold',
          ),
          array(
            'data' => '<span class="offer-cost">' . commerce_currency_format($total_offer + $offer_tax, $currency_setting['code']) . '</span>',
            'class' => 'price bold',
          ),
        );
      }
    }
    else {
      $rows[] = array(
        array(
          'data' => t(variable_get('roomify_accommodation_booking_total_cost_label', 'Total cost')),
          'class' => 'name bold',
        ),
        array(
          'data' => commerce_currency_format($total + $tax, $currency_setting['code']),
          'class' => 'price bold',
        ),
      );
    }
  }

  $form['summary'] = array(
    '#prefix' => '<div id="type_' . $type->type_id . '_price">',
    '#markup' => theme('table', array('header' => $header, 'rows' => $rows)),
    '#suffix' => '</div>',
  );

  if ($unit_id === FALSE) {
    $form['enquiry'] = array(
      '#type' => 'submit',
      '#value' => t('Send an Enquiry'),
      '#attributes' => array('class' => array('btn-success')),
      '#ajax' => array(
        'callback' => 'roomify_accommodation_booking_confirmation_form_enquiry_submit',
      ),
      '#executes_submit_callback' => FALSE,
    );

    if (variable_get('roomify_accommodation_booking_allow_instant_bookings', 1)) {
      if (isset($property->field_sp_allow_instant_bookings[LANGUAGE_NONE][0]['value']) &&
          $property->field_sp_allow_instant_bookings[LANGUAGE_NONE][0]['value']) {
        if ($type->type == 'home' || (!empty($type->field_st_allow_instant_bookings[LANGUAGE_NONE][0]['value']))) {
          $form['submit'] = array(
            '#type' => 'submit',
            '#value' => t('Confirm booking'),
          );
        }
      }
    }
  }
  else {
    $form['unit_id'] = array(
      '#type' => 'hidden',
      '#value' => $unit_id,
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Confirm booking'),
    );
  }

  return $form;
}

/**
 * Ajax callback on booking search results page when an Options state changes.
 */
function roomify_accommodation_booking_options_change_callback(&$form, $form_state) {
  list($type, $price, $tmp, $fieldset, $tmp, $index, $tmp, $option) = preg_split('/[\[(.)\]]/', $form_state['triggering_element']['#name']);
  $option = $price;

  $commands = array();

  $commands[] = ajax_command_replace('#type_' . $form['type_id']['#value'] . '_' . $option . '_quantity', render($form['options'][$option . ':quantity']));
  $commands[] = ajax_command_replace('#type_' . $form['type_id']['#value'] . '_price', render($form['summary']));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Submit function for the 'Send an Enquiry' button.
 */
function roomify_accommodation_booking_confirmation_form_enquiry_submit($form, &$form_state) {
  $values = $form_state['values'];

  $start_date = clone($values['start_date']);
  $end_date = clone($values['end_date']);
  $end_date->sub(new DateInterval('PT1M'));

  $type_id = $form_state['values']['type_id'];

  if (bat_event_get_matching_units($start_date, $end_date, array(AVAILABLE), $type_id, 'availability') === FALSE) {
    $type = bat_type_load($type_id);
    $property = roomify_property_load($type->field_st_property_reference[LANGUAGE_NONE][0]['target_id']);

    if ($type->type == 'home') {
      // Casa property.
      drupal_set_message(t('These dates are no longer available for "@property_name", please try different dates.', array('@property_name' => $property->name)), 'error');
    }
    else {
      // Locanda property.
      drupal_set_message(t('These dates are no longer available for "@property_name - @type_name", please try different dates.', array('@property_name' => $property->name, '@type_name' => $type->name)), 'error');
    }

    ctools_include('ajax');
    ctools_add_js('ajax-responder');

    $commands = array();
    $commands[] = ctools_ajax_command_redirect('listing/' . $property->property_id);

    print ajax_render($commands);
    exit;
  }
  else {
    ctools_include('modal');
    ctools_modal_add_js();

    $new_form_state = array(
      'ajax' => TRUE,
      'title' => t('Listing Enquiry'),
      'build_info' => array(
        'args' => array(
          $values['start_date'],
          $values['end_date'],
          $values['type_id'],
          $values['amount'] / 100,
          isset($form_state['storage']['group_size']) ? $form_state['storage']['group_size'] : 0,
        ),
      ),
    );

    // Use ctools to generate ajax instructions for the browser to create
    // a form in a modal popup.
    $output = ctools_modal_form_wrapper('roomify_listing_enquiry_form', $new_form_state);

    // If the form has been submitted, there may be additional instructions
    // such as dismissing the modal popup.
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }

    // Return the ajax instructions to the browser via ajax_render().
    print ajax_render($output);
    exit();
  }
}

/**
 * Submit function for the roomify_accommodation_booking_confirmation_form form.
 */
function roomify_accommodation_booking_confirmation_form_submit($form, &$form_state) {
  global $user;

  $values = $form_state['values'];

  $event_type = 'availability';

  $start_date = $values['start_date'];
  $end_date = $values['end_date'];
  $temp_end_date = clone($end_date);
  $end_date->sub(new DateInterval('PT1M'));

  $type_id = $values['type_id'];

  $type = bat_type_load($type_id);
  $property = roomify_property_load($type->field_st_property_reference[LANGUAGE_NONE][0]['target_id']);

  if (isset($values['unit_id'])) {
    $valid_unit_ids = array($values['unit_id']);
  }
  else {
    $valid_unit_ids = bat_event_get_matching_units($start_date, $end_date, array(AVAILABLE), $type_id, 'availability');
  }

  if ($valid_unit_ids === FALSE) {
    if ($type->type == 'home') {
      // Casa property.
      drupal_set_message(t('These dates are no longer available for "@property_name", please try different dates.', array('@property_name' => $property->name)), 'error');
    }
    else {
      // Locanda property.
      drupal_set_message(t('These dates are no longer available for "@property_name - @type_name", please try different dates.', array('@property_name' => $property->name, '@type_name' => $type->name)), 'error');
    }

    drupal_goto('listing/' . $property->property_id);
  }
  else {
    $amount = $values['amount'];
    if ($values['offer_amount'] > 0) {
      $amount = $values['offer_amount'];
    }

    $type = bat_type_load($type_id);

    // Create a new Event.
    $event = bat_event_create(array(
      'type' => $event_type,
      'start_date' => $start_date->format('Y-m-d H:i:s'),
      'end_date' => $end_date->format('Y-m-d H:i:s'),
      'uid' => $type->uid,
      'created' => REQUEST_TIME,
    ));

    $event->event_bat_unit_reference[LANGUAGE_NONE][0]['target_id'] = reset($valid_unit_ids);

    $requested_state = bat_event_load_state_by_machine_name(REQUESTED);
    $event->event_state_reference[LANGUAGE_NONE][0]['state_id'] = $requested_state['id'];

    $event->save();

    $product_id = $type->accommodation_product_reference[LANGUAGE_NONE][0]['target_id'];
    $product = commerce_product_load($product_id);
    $line_item = commerce_product_line_item_new($product, 1, 0, array(), 'roomify_accommodation_booking');

    $line_item->line_item_label = roomify_system_get_line_item_label($type, $property, $start_date, $temp_end_date, $values['nights']);

    // Add line item to cart.
    $line_item = commerce_cart_product_add($user->uid, $line_item, FALSE);

    // Create a new booking.
    $booking = bat_booking_create(array(
      'type' => 'roomify_accommodation_booking',
      'uid' => $type->uid,
      'created' => REQUEST_TIME,
    ));

    $booking->booking_start_date[LANGUAGE_NONE][0]['value'] = $event->start_date;
    $booking->booking_end_date[LANGUAGE_NONE][0]['value'] = $event->end_date;
    $booking->booking_event_reference[LANGUAGE_NONE][0]['target_id'] = $event->event_id;
    $booking->booking_line_item_reference[LANGUAGE_NONE][0]['target_id'] = $line_item->line_item_id;
    $booking->booking_price[LANGUAGE_NONE][0] = array(
      'amount' => $amount,
      'currency_code' => commerce_default_currency(),
    );
    $booking->save();

    if (isset($values['conversation'])) {
      if ($conversation = roomify_conversation_load($values['conversation'])) {
        if ($conversation_booking = bat_booking_load($conversation->conversation_booking_ref[LANGUAGE_NONE][0]['target_id'])) {
          $conversation_booking->booking_accommodation_ref[LANGUAGE_NONE][0]['target_id'] = $booking->booking_id;
          $conversation_booking->save();
        }
      }
    }

    $order = commerce_cart_order_load($user->uid);

    // Add line items for each selected option.
    foreach (roomify_accommodation_options_get_type_options($type) as $option) {
      $option_name = roomify_accommodation_options_get_machine_name($option['name']);

      // If the option is enabled:
      if (!empty($values['options'][$option_name])) {
        $quantity = isset($values['options'][$option_name . ':quantity']) ? $values['options'][$option_name . ':quantity'] + 1 : 1;
        $price = roomify_accommodation_options_get_option_price($amount / 100, $option, $quantity, $values['nights']);

        // Create the new line item.
        $option_line_item = entity_create('commerce_line_item', array(
          'type' => 'roomify_accommodation_option',
          'order_id' => $order->order_id,
          'quantity' => $quantity,
          'data' => array(),
          'line_item_label' => $option['name'],
        ));

        // Set the service textfield and unit price.
        $option_line_item->commerce_unit_price[LANGUAGE_NONE][0] = array(
          'amount' => $price,
          'currency_code' => commerce_default_currency(),
          'data' => array(),
        );

        $option_line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $option_line_item);
        $option_line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
          $option_line_item_wrapper->commerce_unit_price->value(),
          'base_price',
          $option_line_item_wrapper->commerce_unit_price->value(),
          TRUE
        );
        $option_line_item_wrapper->commerce_booking_reference = $booking->booking_id;
        $option_line_item_wrapper->save();

        // Add line item to cart.
        $order->commerce_line_items[LANGUAGE_NONE][]['line_item_id'] = $option_line_item_wrapper->line_item_id->value();
      }
    }

    commerce_order_save($order);

    // Refresh line items price and redirect to bookings page.
    commerce_cart_order_refresh(commerce_cart_order_load($user->uid));

    $form_state['redirect'] = 'checkout';
  }
}

/**
 * Implements hook_default_cer().
 */
function roomify_accommodation_booking_default_cer() {
  $items = array();

  $items['bat_booking:roomify_accommodation_booking:booking_event_reference*bat_event:availability:event_booking_reference'] = entity_import('cer', '{
    "cer_bidirectional" : { "und" : [ { "value" : "1" } ] },
    "cer_enabled" : { "und" : [ { "value" : "1" } ] },
    "cer_left" : { "und" : [
        { "path" : "bat_booking:roomify_accommodation_booking:booking_event_reference" }
      ]
    },
    "cer_right" : { "und" : [ { "path" : "bat_event:availability:event_booking_reference" } ] },
    "cer_weight" : { "und" : [ { "value" : "0" } ] },
    "identifier" : "bat_booking:roomify_accommodation_booking:booking_event_reference*bat_event:availability:event_booking_reference",
    "rdf_mapping" : []
  }');

  $items['bat_booking:roomify_accommodation_booking:booking_line_item_reference*commerce_line_item:roomify_accommodation_booking:commerce_booking_reference'] = entity_import('cer', '{
    "identifier" : "bat_booking:roomify_accommodation_booking:booking_line_item_reference*commerce_line_item:roomify_accommodation_booking:commerce_booking_reference",
    "cer_bidirectional" : { "und" : [ { "value" : "1" } ] },
    "cer_enabled" : { "und" : [ { "value" : "1" } ] },
    "cer_weight" : { "und" : [ { "value" : "0" } ] },
    "cer_left" : { "und" : [ { "path" : "bat_booking:roomify_accommodation_booking:booking_line_item_reference" } ] },
    "cer_right" : { "und" : [
        { "path" : "commerce_line_item:roomify_accommodation_booking:commerce_booking_reference" }
      ]
    },
    "rdf_mapping" : []
  }');

  if (module_exists('roomify_channel_connector')) {
    $items['bat_booking:booking_com:booking_line_item_reference*commerce_line_item:roomify_accommodation_booking:commerce_booking_reference'] = entity_import('cer', '{
      "identifier" : "bat_booking:booking_com:booking_line_item_reference*commerce_line_item:roomify_accommodation_booking:commerce_booking_reference",
      "cer_bidirectional" : { "und" : [ { "value" : "1" } ] },
      "cer_enabled" : { "und" : [ { "value" : "1" } ] },
      "cer_weight" : { "und" : [ { "value" : "0" } ] },
      "cer_left" : { "und" : [ { "path" : "bat_booking:booking_com:booking_line_item_reference" } ] },
      "cer_right" : { "und" : [
          { "path" : "commerce_line_item:roomify_accommodation_booking:commerce_booking_reference" }
        ]
      },
      "rdf_mapping" : []
    }');
  }

  if (module_exists('roomify_channel_ical')) {
    $items['bat_booking:ical:booking_line_item_reference*commerce_line_item:roomify_accommodation_booking:commerce_booking_reference'] = entity_import('cer', '{
      "identifier" : "bat_booking:ical:booking_line_item_reference*commerce_line_item:roomify_accommodation_booking:commerce_booking_reference",
      "cer_bidirectional" : { "und" : [ { "value" : "1" } ] },
      "cer_enabled" : { "und" : [ { "value" : "1" } ] },
      "cer_weight" : { "und" : [ { "value" : "0" } ] },
      "cer_left" : { "und" : [ { "path" : "bat_booking:ical:booking_line_item_reference" } ] },
      "cer_right" : { "und" : [
          { "path" : "commerce_line_item:roomify_accommodation_booking:commerce_booking_reference" }
        ]
      },
      "rdf_mapping" : []
    }');
  }

  return $items;
}

/**
 * Implements hook_entity_insert().
 */
function roomify_accommodation_booking_entity_insert($entity, $type) {
  if ($type == 'bat_type') {
    if ($entity->type == 'home' || $entity->type == 'room') {
      global $user;

      // Create commerce product.
      $product = commerce_product_new('roomify_accommodation_product');

      // Generate new sku.
      $sku = preg_replace('@[^A-Za-z0-9_]+@', '_', $entity->name);
      $base_sku = $sku;

      $i = 1;
      while (commerce_product_load_by_sku($sku)) {
        $sku = $base_sku . '_' . $i++;
      }

      $product->sku = $sku;

      if (isset($entity->field_st_property_reference[LANGUAGE_NONE][0]['target_id'])) {
        $property = roomify_property_load($entity->field_st_property_reference[LANGUAGE_NONE][0]['target_id']);

        if ($entity->type == 'room') {
          $product->title = $property->name . ' - ' . $entity->name;
        }
        else {
          $product->title = $property->name;
        }
      }
      else {
        $product->title = $entity->name;
      }

      $product->commerce_price[LANGUAGE_NONE][0]['amount'] = 100;
      $product->commerce_price[LANGUAGE_NONE][0]['currency_code'] = commerce_default_currency();

      commerce_product_save($product);

      $entity->accommodation_product_reference[LANGUAGE_NONE][0]['target_id'] = $product->product_id;

      field_attach_update($type, $entity);
    }
  }

  if ($type == 'bat_booking') {
    if (in_array($entity->type, array('roomify_accommodation_booking', 'booking_com', 'ical'))) {
      roomify_accommodation_booking_schedule_job($entity);
    }

    if ($entity->type == 'booking_com') {
      $event = bat_event_load($entity->booking_event_reference[LANGUAGE_NONE][0]['target_id']);
      $event_wrapper = entity_metadata_wrapper('bat_event', $event);

      $bat_type = bat_type_load($event_wrapper->event_bat_unit_reference->type_id->value());
      $property = roomify_property_load($bat_type->field_st_property_reference[LANGUAGE_NONE][0]['target_id']);

      $start_date_object = new DateTime($entity->booking_start_date[LANGUAGE_NONE][0]['value']);
      $end_date_object = new DateTime($entity->booking_end_date[LANGUAGE_NONE][0]['value']);
      $nights = $start_date_object->diff($end_date_object)->days;

      // Create a new order.
      $order = commerce_order_new($bat_type->uid, 'pending');
      commerce_order_save($order);

      // Create a new line item.
      $product_id = $bat_type->accommodation_product_reference[LANGUAGE_NONE][0]['target_id'];
      $product = commerce_product_load($product_id);
      $line_item = commerce_product_line_item_new($product, 1, 0, array(), 'roomify_accommodation_booking');

      $line_item->line_item_label = roomify_system_get_line_item_label($bat_type, $property, $start_date_object, $end_date_object, $nights);

      $amount = $entity->field_bcom_total_price[LANGUAGE_NONE][0]['value'] * 100;
      $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount'] = $amount;
      $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['data']['components']['0']['price']['amount'] = $amount;

      $line_item->order_id = $order->order_id;

      commerce_line_item_save($line_item);

      $customer_profile = commerce_customer_profile_new('billing');
      $customer_profile->commerce_customer_address[LANGUAGE_NONE][0] = array(
        'country' => strtoupper($entity->field_bcom_countrycode[LANGUAGE_NONE][0]['value']),
        'administrative_area' => '',
        'locality' => $entity->field_bcom_city[LANGUAGE_NONE][0]['value'],
        'postal_code' => $entity->field_bcom_zip[LANGUAGE_NONE][0]['value'],
        'thoroughfare' => '',
        'name_line' => $entity->field_bcom_first_name[LANGUAGE_NONE][0]['value'] . ' ' . $entity->field_bcom_last_name[LANGUAGE_NONE][0]['value'],
        'first_name' => $entity->field_bcom_first_name[LANGUAGE_NONE][0]['value'],
        'last_name' => $entity->field_bcom_last_name[LANGUAGE_NONE][0]['value'],
      );
      $customer_profile->booking_telephone = $entity->field_bcom_telephone[LANGUAGE_NONE][0]['value'];

      commerce_customer_profile_save($customer_profile);

      // Add the line item to the order.
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
      $order_wrapper->commerce_line_items[] = $line_item;

      $order_wrapper->commerce_customer_billing = $customer_profile;

      // Save the order again to update its line item reference field.
      commerce_order_save($order);

      $entity->booking_line_item_reference[LANGUAGE_NONE][0]['target_id'] = $line_item->line_item_id;

      field_attach_update($type, $entity);
    }
    elseif ($entity->type == 'ical') {
      $event = bat_event_load($entity->booking_event_reference[LANGUAGE_NONE][0]['target_id']);
      $event_wrapper = entity_metadata_wrapper('bat_event', $event);

      $bat_type = bat_type_load($event_wrapper->event_bat_unit_reference->type_id->value());
      $property = roomify_property_load($bat_type->field_st_property_reference[LANGUAGE_NONE][0]['target_id']);

      $start_date_object = new DateTime($entity->booking_start_date[LANGUAGE_NONE][0]['value']);
      $end_date_object = new DateTime($entity->booking_end_date[LANGUAGE_NONE][0]['value']);
      $nights = $start_date_object->diff($end_date_object)->days;

      // Create a new order.
      $order = commerce_order_new($bat_type->uid, 'pending');
      commerce_order_save($order);

      // Create a new line item.
      $product_id = $bat_type->accommodation_product_reference[LANGUAGE_NONE][0]['target_id'];
      $product = commerce_product_load($product_id);
      $line_item = commerce_product_line_item_new($product, 1, 0, array(), 'roomify_accommodation_booking');

      $line_item->line_item_label = roomify_system_get_line_item_label($bat_type, $property, $start_date_object, $end_date_object, $nights);

      $amount = 0;
      $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount'] = $amount;
      $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['data']['components']['0']['price']['amount'] = $amount;

      $line_item->order_id = $order->order_id;

      commerce_line_item_save($line_item);

      $customer_profile = commerce_customer_profile_new('billing');
      commerce_customer_profile_save($customer_profile);

      // Add the line item to the order.
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
      $order_wrapper->commerce_line_items[] = $line_item;

      $order_wrapper->commerce_customer_billing = $customer_profile;

      // Save the order again to update its line item reference field.
      commerce_order_save($order);

      $entity->booking_line_item_reference[LANGUAGE_NONE][0]['target_id'] = $line_item->line_item_id;

      field_attach_update($type, $entity);
    }
  }

  if ($type == 'bat_booking_type') {
    module_load_include('inc', 'roomify_accommodation_booking', 'roomify_accommodation_booking.fields');

    roomify_accommodation_booking_add_line_item_reference($entity->type);
    roomify_accommodation_booking_add_booking_guest_field($entity->type);
  }
}

/**
 * Implements hook_entity_update().
 */
function roomify_accommodation_booking_entity_update($entity, $type) {
  if ($type == 'bat_type') {
    if ($entity->type == 'home' || $entity->type == 'room') {
      if (isset($entity->field_st_property_reference[LANGUAGE_NONE][0]['target_id'])) {
        if (!isset($entity->original->field_st_property_reference[LANGUAGE_NONE][0]['target_id']) ||
            $entity->original->field_st_property_reference[LANGUAGE_NONE][0]['target_id'] != $entity->field_st_property_reference[LANGUAGE_NONE][0]['target_id']) {
          $product = commerce_product_load($entity->accommodation_product_reference[LANGUAGE_NONE][0]['target_id']);
          $property = roomify_property_load($entity->field_st_property_reference[LANGUAGE_NONE][0]['target_id']);

          if ($entity->type == 'room') {
            $product->title = $property->name . ' - ' . $entity->name;
          }
          else {
            $product->title = $property->name;
          }

          commerce_product_save($product);
        }
      }
    }
  }

  if ($type == 'bat_booking') {
    if (in_array($entity->type, array('roomify_accommodation_booking', 'booking_com', 'ical'))) {
      if ($entity->booking_start_date[LANGUAGE_NONE][0]['value'] != $entity->original->booking_start_date[LANGUAGE_NONE][0]['value']) {
        roomify_accommodation_booking_schedule_job($entity);
      }
    }
    if ($entity->type == 'ical') {
      if (!isset($entity->original->booking_price[LANGUAGE_NONE][0]['amount']) ||
          $entity->original->booking_price[LANGUAGE_NONE][0]['amount'] != $entity->booking_price[LANGUAGE_NONE][0]['amount']) {
        $line_item = commerce_line_item_load($entity->booking_line_item_reference[LANGUAGE_NONE][0]['target_id']);

        $amount = $entity->booking_price[LANGUAGE_NONE][0]['amount'];
        $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount'] = $amount;
        $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['data']['components']['0']['price']['amount'] = $amount;

        commerce_line_item_save($line_item);

        $order = commerce_order_load($line_item->order_id);

        $line_item->commerce_order_total[LANGUAGE_NONE]['0']['amount'] = $amount;
        $line_item->commerce_order_total[LANGUAGE_NONE]['0']['data']['components']['0']['price']['amount'] = $amount;

        commerce_order_save($order);
      }
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function roomify_accommodation_booking_entity_delete($entity, $type) {
  if ($type == 'bat_booking') {
    db_delete('job_schedule')
      ->condition('name', array('roomify_accommodation_booking_owner_notification', 'roomify_accommodation_booking_guest_notification'), 'IN')
      ->condition('id', $entity->booking_id)
      ->execute();
  }
}

/**
 * Add a new Commerce product for all existing listing types.
 */
function roomify_accommodation_booking_add_product_reference_to_all_listing_types() {
  $types = bat_unit_get_types();
  foreach ($types as $type) {
    if ($type->type == 'home' || $type->type == 'room') {
      if (isset($type->accommodation_product_reference) && empty($type->accommodation_product_reference)) {

        // Create commerce product.
        $product = commerce_product_new('roomify_accommodation_product');

        // Generate new sku.
        $sku = preg_replace('@[^A-Za-z0-9_]+@', '_', $type->name);
        $base_sku = $sku;

        $i = 1;
        while (commerce_product_load_by_sku($sku)) {
          $sku = $base_sku . '_' . $i++;
        }

        $product->sku = $sku;

        if (isset($type->field_st_property_reference[LANGUAGE_NONE][0]['target_id'])) {
          $property = roomify_property_load($type->field_st_property_reference[LANGUAGE_NONE][0]['target_id']);

          if ($entity->type == 'room') {
            $product->title = $property->name . ' - ' . $type->name;
          }
          else {
            $product->title = $property->name;
          }
        }
        else {
          $product->title = $type->name;
        }

        $product->commerce_price[LANGUAGE_NONE][0]['amount'] = 100;
        $product->commerce_price[LANGUAGE_NONE][0]['currency_code'] = commerce_default_currency();

        commerce_product_save($product);

        $type->accommodation_product_reference[LANGUAGE_NONE][0]['target_id'] = $product->product_id;
        entity_save('bat_type', $type);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * FORM_ID = bat_type_edit_form.
 */
function roomify_accommodation_booking_form_bat_type_edit_form_alter(&$form, &$form_state) {
  if (isset($form['accommodation_product_reference'])) {
    $form['accommodation_product_reference']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_alter().
 */
function roomify_accommodation_booking_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#entity_type']) && isset($form['#bundle'])) {
    if ($form['#entity_type'] == 'bat_booking' && $form['#bundle'] == 'roomify_accommodation_booking' &&
        ($form_id == 'bat_booking_form' || $form_id == 'bat_booking_edit_form' || $form_id == 'bat_booking_edit_roomify_accommodation_booking_form')) {
      global $user;

      // Update the profile reference field.
      $form['booking_guest'][LANGUAGE_NONE][0]['target_id']['#attributes']['readonly'] = 'readonly';
      $form['booking_guest'][LANGUAGE_NONE][0]['target_id']['#attributes']['style'] = 'background-color: #e4e4e4;';
      $form['booking_guest'][LANGUAGE_NONE][0]['target_id']['#description'] = t('Use the "Create Billing information" link to add a new guest, or click "Search" to use a repeat guest\'s details.');

      // Remove the cancel button, users get access denied at the redirect.
      unset($form['actions']['delete']['#suffix']);

      if (isset($_GET['property'])) {
        $form_state['storage']['property_id'] = check_plain($_GET['property']);
      }
      elseif (isset($form['#entity']->booking_event_reference[LANGUAGE_NONE][0]['target_id'])) {
        $event = bat_event_load($form['#entity']->booking_event_reference[LANGUAGE_NONE][0]['target_id']);
        $event_wrapper = entity_metadata_wrapper('bat_event', $event);

        $type = bat_type_load($event_wrapper->event_bat_unit_reference->type_id->value());

        if ($property_id = field_get_items('bat_type', $type, 'field_st_property_reference')) {
          $property = roomify_property_load($property_id[0]['target_id']);

          $form_state['storage']['property_id'] = $property->property_id;
        }
      }

      if (!isset($form_state['storage']['property_id'])) {
        drupal_access_denied();
        module_invoke_all('exit');
        drupal_exit();
      }

      $property = roomify_property_load($form_state['storage']['property_id']);

      if ($property === FALSE || !($user->uid == 1 || bat_entity_access('update', $property, NULL, 'roomify_property'))) {
        drupal_access_denied();
        module_invoke_all('exit');
        drupal_exit();
      }

      if (!user_access('administer bat_booking_type entities')) {
        $form['booking_event_reference']['#access'] = FALSE;
        $form['booking_line_item_reference']['#access'] = FALSE;
        $form['booking_booking_conversation_ref']['#access'] = FALSE;
      }

      if (!((isset($form['#entity']->is_new) && $form['#entity']->is_new) || in_array('administrator', $user->roles))) {
        $form['booking_price']['#disabled'] = TRUE;
      }

      $form['booking_price']['#prefix'] = '<div id="booking-price">';
      $form['booking_price']['#suffix'] = '</div>';

      $form['booking_start_date'][LANGUAGE_NONE][0]['#title'] = t('Arrival Date');
      $form['booking_start_date'][LANGUAGE_NONE][0]['#ajax'] = array(
        'callback' => 'roomify_accommodation_booking_date_changed_callback',
        'wrapper' => 'availability-search',
      );

      $form['booking_end_date'][LANGUAGE_NONE][0]['#title'] = t('Departure Date');
      $form['booking_end_date'][LANGUAGE_NONE][0]['#ajax'] = array(
        'callback' => 'roomify_accommodation_booking_date_changed_callback',
        'wrapper' => 'availability-search',
      );

      if (isset($_GET['start_date'])) {
        $form['booking_start_date'][LANGUAGE_NONE][0]['#default_value']['value'] = check_plain($_GET['start_date']);
      }
      if (isset($_GET['end_date'])) {
        $form['booking_end_date'][LANGUAGE_NONE][0]['#default_value']['value'] = check_plain($_GET['end_date']);
      }

      $start_date = FALSE;
      if (isset($form_state['values']['booking_start_date'][LANGUAGE_NONE][0]['value'])) {
        $start_date = new DateTime($form_state['values']['booking_start_date'][LANGUAGE_NONE][0]['value']);
      }
      elseif (isset($form_state['input']['booking_start_date'][LANGUAGE_NONE][0]['value']['date'])) {
        $start_date = new DateTime($form_state['input']['booking_start_date'][LANGUAGE_NONE][0]['value']['date']);
      }
      elseif ($form['booking_start_date'][LANGUAGE_NONE][0]['#default_value']['value'] != '') {
        $start_date = new DateTime($form['booking_start_date'][LANGUAGE_NONE][0]['#default_value']['value']);
      }

      $end_date = FALSE;
      if (isset($form_state['values']['booking_end_date'][LANGUAGE_NONE][0]['value'])) {
        $end_date = new DateTime($form_state['values']['booking_end_date'][LANGUAGE_NONE][0]['value']);
        $end_date->sub(new DateInterval('PT1M'));
      }
      elseif (isset($form_state['input']['booking_end_date'][LANGUAGE_NONE][0]['value']['date'])) {
        $end_date = new DateTime($form_state['input']['booking_end_date'][LANGUAGE_NONE][0]['value']['date']);
        $end_date->sub(new DateInterval('PT1M'));
      }
      elseif ($form['booking_end_date'][LANGUAGE_NONE][0]['#default_value']['value'] != '') {
        $end_date = new DateTime($form['booking_end_date'][LANGUAGE_NONE][0]['#default_value']['value']);
        $end_date->sub(new DateInterval('PT1M'));
      }

      $options = array();
      if ($start_date && $end_date) {
        if ($start_date <= $end_date) {
          $event_type = 'availability';

          $currency_setting = commerce_currency_load(commerce_default_currency());
          $currency_symbol = $currency_setting['symbol'];

          $types_reference = field_get_items('roomify_property', $property, 'property_bat_type_reference');
          foreach ($types_reference as $reference) {
            $type = bat_type_load($reference['target_id']);

            $valid_unit_ids = bat_event_get_matching_units($start_date, $end_date, array(AVAILABLE), $type->type_id, $event_type, FALSE, FALSE);

            // If there are available units, mark this type as available.
            if ($valid_unit_ids !== FALSE) {
              $price = roomify_accommodation_booking_calculate_price($start_date, $end_date, $type->type_id);
              $booking_cost = commerce_currency_format($price, $currency_setting['code']);

              $options[$type->type_id] = t('@name - Cost: @price', array('@name' => $type->name, '@price' => $booking_cost));
            }
          }
        }
      }

      $form['availability_search'] = array(
        '#type' => 'fieldset',
        '#title' => t('Room type'),
        '#weight' => 2,
        '#prefix' => '<div id="availability-search">',
        '#suffix' => '</div>',
      );
      $form['availability_search']['bat_type'] = array(
        '#type' => 'radios',
        '#options' => $options,
        '#ajax' => array(
          'callback' => 'roomify_accommodation_booking_type_changed_callback',
          'wrapper' => 'booking-price',
        ),
      );

      if (isset($form['#entity']->booking_event_reference[LANGUAGE_NONE][0]['target_id'])) {
        $event = bat_event_load($form['#entity']->booking_event_reference[LANGUAGE_NONE][0]['target_id']);
        $event_wrapper = entity_metadata_wrapper('bat_event', $event);

        $type = bat_type_load($event_wrapper->event_bat_unit_reference->type_id->value());

        $price = roomify_accommodation_booking_calculate_price($start_date, $end_date, $type->type_id);
        $booking_cost = commerce_currency_format($price, $currency_setting['code']);

        $option_label = t('@name - Cost: @price', array('@name' => $type->name, '@price' => $booking_cost));

        $form['availability_search']['bat_type']['#options'] = array($type->type_id => $option_label) + $form['availability_search']['bat_type']['#options'];
        $form['availability_search']['bat_type']['#default_value'] = $type->type_id;
      }

      if (isset($form['#entity']->is_new) && $form['#entity']->is_new) {
        $form['actions']['submit']['#submit'] = array_merge(array('roomify_accommodation_booking_add_booking_form_submit'), $form['actions']['submit']['#submit']);

        if (isset($_GET['unit'])) {
          $form_state['storage']['unit_id'] = check_plain($_GET['unit']);
        }
      }
      else {
        $form['actions']['submit']['#submit'] = array_merge(array('roomify_accommodation_booking_edit_booking_form_submit'), $form['actions']['submit']['#submit']);

        $booking = $form['#entity'];

        $line_item = commerce_line_item_load($booking->booking_line_item_reference[LANGUAGE_NONE][0]['target_id']);
        $order = commerce_order_load($line_item->order_id);

        if (isset($booking->booking_guest[LANGUAGE_NONE][0]['target_id'])) {
          if ($profile = commerce_customer_profile_load($booking->booking_guest[LANGUAGE_NONE][0]['target_id'])) {
            $form['profile'] = array(
             '#type' => 'fieldset',
               '#title' => t('Guest Details'),
              '#group' => 'additional_settings',
              '#weight' => -100,
            );

            $profile_array = entity_view('commerce_customer_profile', array($profile->profile_id => $profile), 'customer');

            $form['profile']['info'] = array(
              '#markup' => '<div class="field-label">' . t('Address:') . '</div>' . drupal_render($profile_array),
            );
          }
        }
        elseif (isset($order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id'])) {
          if ($profile = commerce_customer_profile_load($order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id'])) {
            $form['profile'] = array(
             '#type' => 'fieldset',
              '#title' => t('Guest Details'),
              '#group' => 'additional_settings',
              '#weight' => -100,
            );

            $profile_array = entity_view('commerce_customer_profile', array($profile->profile_id => $profile), 'customer');

            $form['profile']['info'] = array(
              '#markup' => '<div class="field-label">' . t('Address:') . '</div>' . drupal_render($profile_array),
            );
          }
        }

        $form['order'] = array(
          '#type' => 'fieldset',
          '#title' => t('Order'),
          '#group' => 'additional_settings',
          '#weight' => -99,
        );

        $form['order']['info'] = array(
          '#markup' => views_embed_view('roomify_order', 'panel_pane_4', $order->order_id),
        );

        $form['order']['view'] = array(
          '#markup' => '<div class="view-order">' . l(t('View order'), 'admin/commerce/orders/' . $order->order_id . '/view') . '</div>',
        );
      }

      if (count($form['availability_search']['bat_type']['#options']) == 1) {
        $type_id = key($form['availability_search']['bat_type']['#options']);
        $form['availability_search']['bat_type']['#default_value'] = $type_id;

        $price = roomify_accommodation_booking_calculate_price($start_date, $end_date, $type_id);
        $form_state['input']['booking_price'][LANGUAGE_NONE][0]['amount'] = round($price / 100, 2);
      }

      if (isset($_GET['type'])) {
        $type_id = check_plain($_GET['type']);
        if (in_array($type_id, array_keys($options))) {
          $form['availability_search']['bat_type']['#default_value'] = check_plain($_GET['type']);

          $price = roomify_accommodation_booking_calculate_price($start_date, $end_date, $type_id);
          $form['booking_price'][LANGUAGE_NONE][0]['amount']['#default_value'] = round($price / 100, 2);
        }
      }

      if (isset($form_state['values']['bat_type']) && $form_state['values']['bat_type'] != '') {
        if ((isset($form['#entity']->is_new) && $form['#entity']->is_new) || in_array('administrator', $user->roles)) {
          $type_id = $form_state['values']['bat_type'];

          $price = roomify_accommodation_booking_calculate_price($start_date, $end_date, $type_id);
          $form_state['input']['booking_price'][LANGUAGE_NONE][0]['amount'] = round($price / 100, 2);
        }
      }
      if (isset($form['actions']['cancel'])) {
        $form['actions']['cancel']['#markup'] = l(t('Cancel'), 'user');
      }
    }
    if ($form['#entity_type'] == 'bat_booking' && $form['#bundle'] == 'booking_com' &&
        ($form_id == 'bat_booking_form' || $form_id == 'bat_booking_edit_form' || $form_id == 'bat_booking_edit_booking_com_form')) {
      if (!user_access('administer bat_booking_type entities')) {
        $form['booking_event_reference']['#access'] = FALSE;
        $form['booking_line_item_reference']['#access'] = FALSE;
      }

      $booking = $form['#entity'];

      $currency_setting = commerce_currency_load(commerce_default_currency());
      $currency_symbol = $currency_setting['symbol'];

      $form['availability_search'] = array(
        '#type' => 'fieldset',
        '#title' => t('Room type'),
        '#weight' => 2,
        '#prefix' => '<div id="availability-search">',
        '#suffix' => '</div>',
      );
      $form['availability_search']['bat_type'] = array(
        '#type' => 'radios',
        '#options' => array(),
        '#ajax' => array(
          'callback' => 'roomify_accommodation_booking_type_changed_callback',
          'wrapper' => 'booking-price',
        ),
      );

      if (isset($booking->booking_event_reference[LANGUAGE_NONE][0]['target_id'])) {
        $start_date = new DateTime($booking->booking_start_date[LANGUAGE_NONE][0]['value']);
        $end_date = new DateTime($booking->booking_end_date[LANGUAGE_NONE][0]['value']);

        $event = bat_event_load($booking->booking_event_reference[LANGUAGE_NONE][0]['target_id']);
        $event_wrapper = entity_metadata_wrapper('bat_event', $event);

        $type = bat_type_load($event_wrapper->event_bat_unit_reference->type_id->value());

        $price = $booking->field_bcom_total_price[LANGUAGE_NONE][0]['value'] * 100;
        $booking_cost = commerce_currency_format($price, $currency_setting['code']);

        $option_label = t('@name - Cost: @price', array('@name' => $type->name, '@price' => $booking_cost));

        $form['availability_search']['bat_type']['#options'] = array($type->type_id => $option_label) + $form['availability_search']['bat_type']['#options'];
        $form['availability_search']['bat_type']['#default_value'] = $type->type_id;
      }

      if (!(isset($booking->is_new) && $booking->is_new)) {
        $line_item = commerce_line_item_load($booking->booking_line_item_reference[LANGUAGE_NONE][0]['target_id']);
        $order = commerce_order_load($line_item->order_id);

        $profile = commerce_customer_profile_load($order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id']);

        $form['profile'] = array(
          '#type' => 'fieldset',
          '#title' => t('Guest Details'),
          '#group' => 'additional_settings',
          '#weight' => -100,
        );

        $profile_array = entity_view('commerce_customer_profile', array($profile->profile_id => $profile), 'customer');

        $form['profile']['info'] = array(
          '#markup' => '<div class="field-label">' . t('Address:') . '</div>' . drupal_render($profile_array),
        );

        $form['order'] = array(
          '#type' => 'fieldset',
          '#title' => t('Order'),
          '#group' => 'additional_settings',
          '#weight' => -99,
        );

        $form['order']['info'] = array(
          '#markup' => views_embed_view('roomify_order', 'panel_pane_4', $order->order_id),
        );

        $form['order']['view'] = array(
          '#markup' => '<div class="view-order">' . l(t('View order'), 'admin/commerce/orders/' . $order->order_id . '/view') . '</div>',
        );
      }
    }

    if ($form['#entity_type'] == 'bat_booking' && $form['#bundle'] == 'ical' &&
        ($form_id == 'bat_booking_form' || $form_id == 'bat_booking_edit_form' || $form_id == 'bat_booking_edit_ical_form')) {
      if (!user_access('administer bat_booking_type entities')) {
        $form['booking_event_reference']['#access'] = FALSE;
        $form['booking_line_item_reference']['#access'] = FALSE;
        $form['field_reservation_id']['#access'] = FALSE;
        $form['field_event_id']['#access'] = FALSE;
      }

      $booking = $form['#entity'];

      $currency_setting = commerce_currency_load(commerce_default_currency());
      $currency_symbol = $currency_setting['symbol'];

      $form['availability_search'] = array(
        '#type' => 'fieldset',
        '#title' => t('Room type'),
        '#weight' => 2,
        '#prefix' => '<div id="availability-search">',
        '#suffix' => '</div>',
      );
      $form['availability_search']['bat_type'] = array(
        '#type' => 'radios',
        '#options' => array(),
        '#ajax' => array(
          'callback' => 'roomify_accommodation_booking_type_changed_callback',
          'wrapper' => 'booking-price',
        ),
      );

      if (isset($booking->booking_event_reference[LANGUAGE_NONE][0]['target_id'])) {
        $start_date = new DateTime($booking->booking_start_date[LANGUAGE_NONE][0]['value']);
        $end_date = new DateTime($booking->booking_end_date[LANGUAGE_NONE][0]['value']);

        $event = bat_event_load($booking->booking_event_reference[LANGUAGE_NONE][0]['target_id']);
        $event_wrapper = entity_metadata_wrapper('bat_event', $event);

        $type = bat_type_load($event_wrapper->event_bat_unit_reference->type_id->value());

        $price = $booking->booking_price[LANGUAGE_NONE][0]['amount'];
        $booking_cost = commerce_currency_format($price, $currency_setting['code']);

        $option_label = t('@name - Cost: @price', array('@name' => $type->name, '@price' => $booking_cost));

        $form['availability_search']['bat_type']['#options'] = array($type->type_id => $option_label) + $form['availability_search']['bat_type']['#options'];
        $form['availability_search']['bat_type']['#default_value'] = $type->type_id;
      }

      if (!(isset($booking->is_new) && $booking->is_new)) {
        $line_item = commerce_line_item_load($booking->booking_line_item_reference[LANGUAGE_NONE][0]['target_id']);
        $order = commerce_order_load($line_item->order_id);

        $profile = commerce_customer_profile_load($order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id']);

        $form['profile'] = array(
          '#type' => 'fieldset',
          '#title' => t('Guest Details'),
          '#group' => 'additional_settings',
          '#weight' => -100,
        );

        $profile_array = entity_view('commerce_customer_profile', array($profile->profile_id => $profile), 'customer');

        $form['profile']['info'] = array(
          '#markup' => '<div class="field-label">' . t('Address:') . '</div>' . drupal_render($profile_array),
        );

        $form['order'] = array(
          '#type' => 'fieldset',
          '#title' => t('Order'),
          '#group' => 'additional_settings',
          '#weight' => -99,
        );

        $form['order']['info'] = array(
          '#markup' => views_embed_view('roomify_order', 'panel_pane_4', $order->order_id),
        );

        $form['order']['view'] = array(
          '#markup' => '<div class="view-order">' . l(t('View order'), 'admin/commerce/orders/' . $order->order_id . '/view') . '</div>',
        );
      }
    }
  }

  if (isset($form['#entity_type']) && $form['#entity_type'] == 'bat_type') {
    if ($form_id == 'bat_type_edit_form' || $form_id == 'bat_type_edit_' . $form['#bundle'] . '_form') {
      if (isset($form['accommodation_product_reference'])) {
        $form['accommodation_product_reference']['#access'] = FALSE;
      }
    }
  }

  if ($form_id == 'commerce_checkout_form_checkout') {
    if (isset($form['customer_profile_billing']['cancel_button'])) {
      $form['customer_profile_billing']['cancel_button']['#value'] = t('Cancel and Return to address selection');
      $form['customer_profile_billing']['cancel_button']['#attributes']['class'] = array('btn-warning');
    }
  }
}

/**
 * Ajax callback when date changed.
 */
function roomify_accommodation_booking_date_changed_callback($form, &$form_state) {
  $form['booking_price']['#prefix'] = '<div id="booking-price">';
  $form['booking_price']['#suffix'] = '</div>';

  $commands = array();
  $commands[] = ajax_command_replace('#availability-search', render($form['availability_search']));
  $commands[] = ajax_command_replace('#booking-price', render($form['booking_price']));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Ajax callback when type changed.
 */
function roomify_accommodation_booking_type_changed_callback($form, &$form_state) {
  $form['booking_price']['#prefix'] = '<div id="booking-price">';
  $form['booking_price']['#suffix'] = '</div>';

  return $form['booking_price'];
}

/**
 * Custom submit function for the bat_booking_edit_form form on add new booking.
 */
function roomify_accommodation_booking_add_booking_form_submit($form, &$form_state) {
  $start_date = new DateTime($form_state['values']['booking_start_date'][LANGUAGE_NONE][0]['value']);
  $end_date = new DateTime($form_state['values']['booking_end_date'][LANGUAGE_NONE][0]['value']);
  $end_date->sub(new DateInterval('PT1M'));
  $nights = $start_date->diff($end_date)->days;

  $type_id = $form_state['values']['bat_type'];
  $bat_type = bat_type_load($type_id);
  $property = roomify_property_load($bat_type->field_st_property_reference[LANGUAGE_NONE][0]['target_id']);

  $event_type = 'availability';

  $valid_unit_ids = bat_event_get_matching_units($start_date, $end_date, array(AVAILABLE), $type_id, $event_type, FALSE, FALSE);

  if ($valid_unit_ids !== FALSE) {
    $type = bat_type_load($type_id);

    // Create a new event.
    $event = bat_event_create(array(
      'type' => $event_type,
      'start_date' => $start_date->format('Y-m-d H:i:s'),
      'end_date' => $end_date->format('Y-m-d H:i:s'),
      'uid' => $type->uid,
      'created' => REQUEST_TIME,
    ));

    if (isset($form_state['storage']['unit_id'])) {
      $unit_id = $form_state['storage']['unit_id'];

      if (in_array($unit_id, $valid_unit_ids)) {
        $event->event_bat_unit_reference[LANGUAGE_NONE][0]['target_id'] = $unit_id;
      }
      else {
        drupal_set_message(t('These dates are no longer available for this unit.'), 'error');

        if (isset($_GET['destination'])) {
          drupal_goto($_GET['destination']);
        }
        else {
          drupal_goto('admin/bat/config/booking');
        }
      }
    }
    else {
      $event->event_bat_unit_reference[LANGUAGE_NONE][0]['target_id'] = reset($valid_unit_ids);
    }

    $booked_state = bat_event_load_state_by_machine_name(BOOKED);
    $event->event_state_reference[LANGUAGE_NONE][0]['state_id'] = $booked_state['id'];

    $event->save();

    $form_state['values']['booking_event_reference'][LANGUAGE_NONE][0]['target_id'] = $event->event_id;

    // Create a new order.
    $order = commerce_order_new($type->uid, 'pending');

    if (isset($form_state['values']['booking_guest'][LANGUAGE_NONE][0]['target_id']) &&
        !empty($form_state['values']['booking_guest'][LANGUAGE_NONE][0]['target_id'])) {
      $order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id'] = $form_state['values']['booking_guest'][LANGUAGE_NONE][0]['target_id'];
    }

    commerce_order_save($order);

    // Create a new line item.
    $product_id = $type->accommodation_product_reference[LANGUAGE_NONE][0]['target_id'];
    $product = commerce_product_load($product_id);
    $line_item = commerce_product_line_item_new($product, 1, 0, array(), 'roomify_accommodation_booking');

    $amount = $form_state['values']['booking_price'][LANGUAGE_NONE][0]['amount'];
    $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount'] = $amount;
    $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['data']['components']['0']['price']['amount'] = $amount;

    $line_item->order_id = $order->order_id;
    $line_item->line_item_label = roomify_system_get_line_item_label($bat_type, $property, $start_date, $end_date, $nights);

    commerce_line_item_save($line_item);

    // Add the line item to the order.
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $order_wrapper->commerce_line_items[] = $line_item;

    // Save the order again to update its line item reference field.
    commerce_order_save($order);

    $form_state['values']['booking_line_item_reference'][LANGUAGE_NONE][0]['target_id'] = $line_item->line_item_id;
  }
}

/**
 * Custom submit function for the bat_booking_edit_form form on edit existing booking.
 */
function roomify_accommodation_booking_edit_booking_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  // Update dates on related event.
  if (isset($values['booking_event_reference'][LANGUAGE_NONE][0]['target_id'])) {
    $event = bat_event_load($values['booking_event_reference'][LANGUAGE_NONE][0]['target_id']);

    $end_date = new DateTime($values['booking_end_date'][LANGUAGE_NONE][0]['value']);
    $end_date->sub(new DateInterval('PT1M'));

    if ($event->start_date != $values['booking_start_date'][LANGUAGE_NONE][0]['value'] ||
        $event->end_date != $end_date->format('Y-m-d H:i:s')) {
      $event->start_date = $values['booking_start_date'][LANGUAGE_NONE][0]['value'];

      $event->end_date = $end_date->format('Y-m-d H:i:s');

      $event->save();
    }
  }

  // Update price on related line item.
  if (isset($values['booking_line_item_reference'][LANGUAGE_NONE][0]['target_id'])) {
    $line_item = commerce_line_item_load($values['booking_line_item_reference'][LANGUAGE_NONE][0]['target_id']);

    $amount = $form_state['values']['booking_price'][LANGUAGE_NONE][0]['amount'];
    if ($line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount'] != $amount) {
      $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount'] = $amount;
      $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['data']['components']['0']['price']['amount'] = $amount;

      commerce_line_item_save($line_item);

      // Update the order total price.
      $order = commerce_order_load($line_item->order_id);
      commerce_order_calculate_total($order);
      commerce_order_save($order);
    }
  }
}

/**
 * Implements hook_commerce_checkout_complete().
 */
function roomify_accommodation_booking_commerce_checkout_complete($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  foreach ($order->commerce_line_items as $lang => $item) {
    foreach ($item as $item_id) {
      $line_item = commerce_line_item_load($item_id['line_item_id']);

      if ($line_item->type == 'roomify_accommodation_booking') {
        $booking = bat_booking_load($line_item->commerce_booking_reference[LANGUAGE_NONE][0]['target_id']);

        $booking->booking_guest[LANGUAGE_NONE][0]['target_id'] = $order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id'];

        $booking->save();

        // Set event state to 'Booked'.
        $event = bat_event_load($booking->booking_event_reference[LANGUAGE_NONE][0]['target_id']);

        $booked_state = bat_event_load_state_by_machine_name(BOOKED);
        $event->event_state_reference[LANGUAGE_NONE][0]['state_id'] = $booked_state['id'];

        $event->save();
      }
    }
  }
}

/**
 * Implements hook_bat_fullcalendar_modal_style_alter().
 */
function roomify_accommodation_booking_bat_fullcalendar_modal_style_alter(&$modal_style) {
  roomify_dashboard_setup_modal();
  // Override default modal style.
  $modal_style['bat-modal-style'] = roomify_dashboard_modal_style();
}

/**
 * Implements hook_bat_fullcalendar_modal_content().
 *
 * Edit booking instead of event in modal when there is a booking referencing
 * the given event.
 */
function roomify_accommodation_booking_bat_fullcalendar_modal_content($entity_id, $event_type, $event_id, $start_date, $end_date) {
  // See if there is a booking that references this event.
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'bat_booking')
    ->entityCondition('bundle', array('roomify_accommodation_booking', 'conversation_booking', 'booking_com', 'ical'), 'IN')
    ->fieldCondition('booking_event_reference', 'target_id', $event_id, '=');

  $result = $query->execute();

  if (isset($result['bat_booking'])) {
    drupal_add_js(drupal_get_path('module', 'roomify_accommodation_booking') . '/js/booking_modal.js');

    $entity_ids = array_keys($result['bat_booking']);
    $bat_booking = bat_booking_load(current($entity_ids));

    if ($bat_booking->type == 'conversation_booking') {
      $conversation_id = $bat_booking->booking_conversation_ref[LANGUAGE_NONE][0]['target_id'];
      $output = '<p style="font-size: 14px;">' . t('Conversation bookings can only be edited trough the conversation itself.') . '</p>';

      $output .= '<p>' . l(t('Go to conversation'), 'conversation/' . $conversation_id, array('attributes' => array('class' => array('button'), 'style' => 'color: #fff; font-size: 15px;'))) . '</p>';

      return array(
        'roomify_accommodation_booking' => array(
          'title' => t('Edit conversation'),
          'content' => $output,
        ),
      );
    }
    else {
      module_load_include('inc', 'bat_booking', 'bat_booking.admin');

      $form_state = array(
        'title' => t('Edit booking'),
        'ajax' => TRUE,
        'build_info' => array(
          'args' => array($bat_booking),
          'files' => array(
            'bat_booking' => array(
              'module' => 'bat_booking',
              'name' => 'bat_booking.admin',
              'type' => 'inc',
            ),
          ),
        ),
      );

      // Wrap the form via ctools modal.
      $output = ctools_modal_form_wrapper('bat_booking_form', $form_state);
      if ($form_state['executed']) {
        if (!empty($form_state['booking_deleted'])) {
          // If there are messages for the form, render them.
          $messages = theme('status_messages');

          $output = array();
          // If the form has not yet been rendered, render it.
          $output[] = ctools_modal_command_display(t('Booking deleted'), $messages);
        }
        else {
          $output = array(ctools_modal_command_dismiss());
        }
      }

      return array(
        'roomify_accommodation_booking' => array(
          'commands' => $output,
        ),
      );
    }
  }
}

/**
 * Implements hook_bat_fullcalendar_formatted_event_alter().
 */
function roomify_accommodation_booking_bat_fullcalendar_formatted_event_alter(&$formatted_event, $context) {
  if ($formatted_event['type'] == 'availability' && isset($context['bat_event'])) {
    $event = $context['bat_event'];

    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'bat_booking')
      ->fieldCondition('booking_event_reference', 'target_id', $event->event_id)
      ->execute();

    if (isset($result['bat_booking'])) {
      $booking = reset($result['bat_booking']);
      $booking = bat_booking_load($booking->booking_id);

      if (isset($booking->booking_guest[LANGUAGE_NONE][0]['target_id'])) {
        $customer_profile = commerce_customer_profile_load($booking->booking_guest[LANGUAGE_NONE][0]['target_id']);

        if (isset($customer_profile->commerce_customer_address[LANGUAGE_NONE][0]['name_line'])) {
          $formatted_event['title'] = $customer_profile->commerce_customer_address[LANGUAGE_NONE][0]['name_line'];
        }
      }
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function roomify_accommodation_booking_entity_presave($entity, $type) {
  if ($type == 'bat_booking') {
    if ($entity->type == 'roomify_accommodation_booking') {
      // Set 'Full name' as booking label.
      if ($full_name = field_get_items('bat_booking', $entity, 'booking_full_name')) {
        $entity->label = $full_name[0]['value'];
      }
      // If 'Full name' is empty set booking label 'Booking type + Id'.
      else {
        $booking_type = bat_booking_type_load($entity->type);
        $entity->label = $booking_type->label . ' ' . $entity->booking_id;
      }
    }
  }
}

/**
 * Rules action 'Set the line item price to the deposit price'.
 *
 * @param $line_item
 */
function roomify_accommodation_booking_deposit_apply($line_item) {
  module_load_include('inc', 'commerce_line_item', 'commerce_line_item.rules');

  $deposit_options = variable_get('roomify_accommodation_booking_deposit_options', array());

  $multiply_amount = variable_get('roomify_accommodation_booking_deposit_multiply', 25) / 100;

  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

  $event = $line_item_wrapper->commerce_booking_reference->booking_event_reference->value();

  foreach ($deposit_options as $option) {
    $start_date = new DateTime($option['start_date']);
    $end_date = new DateTime($option['end_date']);

    if ($event->start_date_object >= $start_date && $event->start_date_object <= $end_date) {
      $multiply_amount = $option['deposit'] / 100;
      break;
    }
  }

  commerce_line_item_unit_price_multiply($line_item, $multiply_amount, 'base_price', 1);
}

/**
 * Rules action 'Apply price to a booking line item'.
 *
 * @param $line_item
 */
function roomify_accommodation_booking_price_apply($line_item) {
  if ($line_item->type == 'roomify_accommodation_booking') {
    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

    if ($line_item_wrapper->__isset('commerce_booking_reference')) {
      if ($booking = $line_item_wrapper->commerce_booking_reference->value()) {
        if ($booking->type == 'roomify_accommodation_booking') {
          $booking_wrapper = entity_metadata_wrapper('bat_booking', $booking);
          $amount = $booking_wrapper->booking_price->amount->value();

          $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount'] = $amount;
          $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['data']['components']['0']['price']['amount'] = $amount;
        }
      }
    }
  }
}

/**
 * Rules action 'Set the line item price to the booked price'.
 *
 * @param $line_item
 */
function roomify_accommodation_booking_booked_price($line_item) {
  if ($line_item->type == 'roomify_accommodation_booking' || $line_item->type == 'roomify_accommodation_option') {
    if ($deposit = rules_config_load('roomify_accommodation_booking_deposit')) {
      if ($deposit->active) {
        foreach ($line_item->commerce_unit_price[LANGUAGE_NONE]['0']['data']['components'] as $id => $component) {
          if ($id > 0 && $component['name'] == 'base_price') {
            unset($line_item->commerce_unit_price[LANGUAGE_NONE]['0']['data']['components'][$id]);
          }
        }

        $base_price = commerce_price_component_total($line_item->commerce_unit_price[LANGUAGE_NONE]['0'], 'base_price');
        $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount'] = $base_price['amount'];
        $line_item->commerce_total[LANGUAGE_NONE]['0']['amount'] = $base_price['amount'];

        commerce_line_item_save($line_item);
      }
    }
  }
}

/**
 * Get 'Nightly', 'Weekly' and "Monthly" rates.
 *
 * @param $type_id
 *
 * @return array
 */
function roomify_accommodation_booking_get_rates($type_id, $group_size = 0) {
  $rates = array();

  foreach (roomify_rate_get_rates('standard', $type_id, 0, $group_size) as $rate) {
    if (isset($rate->data['standard']) && $rate->data['standard']) {
      $rates['nightly'] = $rate;
    }
    elseif (isset($rate->data['weekly']) && $rate->data['weekly']) {
      $rates['weekly'] = $rate;
    }
    elseif (isset($rate->data['monthly']) && $rate->data['monthly']) {
      $rates['monthly'] = $rate;
    }
  }

  return $rates;
}

/**
 * Implements hook_date_combo_process_alter().
 */
function roomify_accommodation_booking_date_combo_process_alter(&$element, &$form_state, $context) {
  if ($element['#field_name'] == 'booking_start_date' || $element['#field_name'] == 'booking_end_date') {
    if ($element['#entity_type'] == 'bat_booking') {
      if (in_array($element['#bundle'], array('roomify_accommodation_booking', 'booking_com', 'ical'))) {
        $date_format = variable_get('bat_daily_date_format', 'Y-m-d');
        $element['value']['#date_format'] = $date_format;
        $element['value']['#date_label_position'] = 'invisible';
      }
    }
  }
}

/**
 * Calculate booking price given a start date and end date for a specific type.
 *
 * @param $start_date
 * @param $end_date
 * @param $type_id
 * @param $group_size
 *
 * @return int
 */
function roomify_accommodation_booking_calculate_price($start_date, $end_date, $type_id, $group_size = 0, $offers = array()) {
  $nights = $start_date->diff($end_date)->days + 1;

  $rates = roomify_accommodation_booking_get_rates($type_id, $group_size);

  $type = 'nightly';

  if (!empty($offers)) {
    $type = 'offer';
  }
  elseif ($nights >= 7 && $nights < 28) {
    $type = 'weekly';
  }
  elseif ($nights >= 28) {
    $type = 'monthly';
  }

  $amount = roomify_accommodation_booking_get_price($rates, $start_date, $end_date, $nights, $type, $offers);

  return $amount;
}

/**
 * Implements hook_commerce_line_item_delete().
 */
function roomify_accommodation_booking_commerce_line_item_delete($line_item) {
  if ($line_item->type == 'roomify_accommodation_booking') {
    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

    if ($line_item_wrapper->__isset('commerce_booking_reference')) {
      if ($booking = $line_item_wrapper->commerce_booking_reference->value()) {
        if ($booking->type == 'roomify_accommodation_booking') {
          if ($order = commerce_order_load($line_item->order_id)) {
            $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

            // Remove associated options if booking is removed.
            foreach ($order->commerce_line_items as $lang => $item) {
              foreach ($item as $item_id) {
                $line_item_object = commerce_line_item_load($item_id['line_item_id']);
                if ($line_item_object->type == 'roomify_accommodation_option') {
                  if (isset($line_item_object->commerce_booking_reference[LANGUAGE_NONE][0]['target_id']) &&
                      $line_item_object->commerce_booking_reference[LANGUAGE_NONE][0]['target_id'] == $booking->booking_id) {
                    commerce_line_item_delete($line_item_object->line_item_id);
                  }
                }
              }
            }
          }

          $booking->delete();

          if (isset($booking->booking_booking_conversation_ref[LANGUAGE_NONE][0]['target_id']) &&
              $conversation_booking = bat_booking_load($booking->booking_booking_conversation_ref[LANGUAGE_NONE][0]['target_id'])) {
            // Resave event to force state 'In conversation'.
            $event = bat_event_load($conversation_booking->booking_event_reference[LANGUAGE_NONE][0]['target_id']);
            $event->save();
          }
        }
      }
    }

    // Remove the order.
    if ($order = commerce_order_load($line_item->order_id)) {
      if (empty($order->commerce_line_items)) {
        commerce_order_delete($order->order_id);
      }
    }
  }
}

/**
 * Conversation booking confirmation page.
 */
function roomify_accommodation_booking_conversation_confirmation_page($conversation) {
  global $user;
  global $databases;

  $prefix = (isset($databases['default']['default']['prefix'])) ? $databases['default']['default']['prefix'] : '';

  if ($user->uid != $conversation->uid) {
    return drupal_access_denied();
  }

  $conversation_wrapper = entity_metadata_wrapper('roomify_conversation', $conversation);
  $booking = $conversation_wrapper->conversation_booking_ref->value();

  $unit = $conversation_wrapper->conversation_booking_ref->booking_event_reference->event_bat_unit_reference->value();

  $start_date = new DateTime($booking->booking_start_date[LANGUAGE_NONE][0]['value']);
  $end_date = new DateTime($booking->booking_end_date[LANGUAGE_NONE][0]['value']);

  $amount = $booking->booking_price[LANGUAGE_NONE][0]['amount'];
  $booking_cost = commerce_currency_format($amount, $booking->booking_price[LANGUAGE_NONE][0]['currency_code']);

  $type = bat_type_load($unit->type_id);
  if ($property_id = field_get_items('bat_type', $type, 'field_st_property_reference')) {
    $property = roomify_property_load($property_id[0]['target_id']);
  }

  if ($type->type == 'single_day_activity' || $type->type == 'single_day_tour') {
    $end_date->sub(new DateInterval('PT1M'));
  }

  if (isset($type->name)) {
    drupal_set_title(t('Booking for @type', array('@type' => $type->name)));

    // Change Title for Locanda Properties.
    if ($property->type == 'locanda_property' && isset($property->name)) {
      drupal_set_title(t('Booking for @property - @type', array('@property' => $property->name, '@type' => $type->name)));
    }

    // Change Title for Casa Properties.
    if ($property->type == 'casa_property' && isset($property->name)) {
      drupal_set_title(t('Booking for @property', array('@property' => $property->name)));
    }
  }

  $nights = $start_date->diff($end_date)->days;

  $group_size = 0;
  if (isset($conversation->conversation_guests[LANGUAGE_NONE][0]['value'])) {
    $group_size = $conversation->conversation_guests[LANGUAGE_NONE][0]['value'];
  }

  $current_search = drupal_get_form('roomify_accommodation_booking_current_search_form', $type->type_id, $start_date, $end_date, $nights, $group_size, $booking_cost);
  unset($current_search['current_search']['submit']);

  $form = drupal_get_form('roomify_accommodation_booking_confirmation_form', $start_date, $end_date, $nights, $type->type_id, $amount, 0, $unit->unit_id, $conversation);

  $image = FALSE;
  if ($featured_image = field_get_items('roomify_property', $property, 'field_sp_featured_image')) {
    $image = array(
      'style_name' => 'homepage_features',
      'path' => $featured_image[0]['uri'],
    );
  }

  return array(
    '#theme' => 'booking_confirmation_page',
    '#current_search' => $current_search,
    '#featured_image' => $image,
    '#form' => $form,
  );
}

/**
 * Implements hook_commerce_cart_line_item_refresh().
 */
function roomify_accommodation_booking_commerce_cart_line_item_refresh($line_item, $order_wrapper) {
  if ($line_item->type == 'roomify_accommodation_option') {
    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

    // Apply taxes on Addons.
    if (variable_get('roomify_accommodation_booking_apply_tax_addons', 1)) {
      if ($line_item_wrapper->commerce_booking_reference->type->value() == 'roomify_accommodation_booking') {
        $unit = $line_item_wrapper->commerce_booking_reference->booking_event_reference->event_bat_unit_reference->value();
        $type = bat_type_load($unit->type_id);
        $property = roomify_property_load($type->field_st_property_reference[LANGUAGE_NONE][0]['target_id']);

        if (isset($property->field_tax_enable[LANGUAGE_NONE][0]['value']) && $property->field_tax_enable[LANGUAGE_NONE][0]['value']) {
          $tax_rate = commerce_tax_rate_load($property->field_tax_rule_id[LANGUAGE_NONE][0]['value']);
          commerce_tax_rate_apply($tax_rate, $line_item);
        }
      }
    }

    // Apply deposit to Addons.
    if ($deposit = rules_config_load('roomify_accommodation_booking_deposit')) {
      if ($deposit->active) {
        $full_payment = FALSE;

        if (variable_get('roomify_accommodation_booking_full_payment', 0)) {
          $now = new DateTime();
          $interval = format_interval(variable_get('roomify_accommodation_booking_full_payment_duration', 86400));
          $now->modify('+' . $interval);

          $booking = $line_item_wrapper->commerce_booking_reference->value();
          $start_date = new DateTime($booking->booking_start_date[LANGUAGE_NONE][0]['value']);

          if ($start_date <= $now) {
            $full_payment = TRUE;
          }
        }

        if ($full_payment === FALSE) {
          if (count(commerce_price_component_load($line_item_wrapper->commerce_unit_price->value(), 'base_price')) == 1) {
            foreach ($deposit as $action) {
              if ($action instanceof RulesAction) {
                if ($action->getElementName() == 'roomify_accommodation_booking_deposit_apply') {
                  module_load_include('inc', 'commerce_line_item', 'commerce_line_item.rules');

                  $multiply_amount = $action->settings['amount'];
                  roomify_accommodation_booking_deposit_apply($line_item, $multiply_amount, 'base_price', 1);
                }
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function roomify_accommodation_booking_page_alter(&$page) {
  // Make sure you're on the right page.
  if (current_path() == 'cart') {
    drupal_set_title(t('Your Reservation'));
  }
}

/**
 * Implements hook_commerce_line_item_summary_link_info_alter().
 */
function roomify_accommodation_booking_commerce_line_item_summary_link_info_alter(&$links) {
  if (!empty($links['view_cart']['title'])) {
    $links['view_cart']['title'] = t('View Reservation');
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function roomify_accommodation_booking_preprocess_views_view(&$vars) {
  if ($vars['name'] == 'commerce_cart_summary') {
    $vars['footer'] .= '<div class="link-to-cart">' . l(t('Edit Reservation'), 'cart', array('attributes' => array('class' => 'btn btn-info btn-default'))) . '</div>';
  }
}

/**
 * Send 'New Order' email to the property owner and roomify manager.
 */
function roomify_accommodation_booking_send_mail($line_item, $settings, $rules_state) {
  module_load_include('inc', 'pet', 'pet.rules');

  // Send email to the property owner.
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
  $type = bat_type_load($line_item_wrapper->commerce_booking_reference->booking_event_reference->event_bat_unit_reference->type_id->value());

  $to_account = user_load($type->uid);
  pet_action_send_pet('new_order', NULL, $to_account, NULL, NULL, array(), $rules_state);

  // Send email to all users of role 'roomify manager'.
  $role = user_role_load_by_name('roomify manager');

  $uids = db_select('users_roles', 'ur')
    ->fields('ur', array('uid'))
    ->condition('ur.rid', $role->rid, '=')
    ->execute()
    ->fetchCol();
  $users = user_load_multiple($uids);

  $mails = array();
  foreach ($users as $user) {
    $mails[] = '<' . $user->mail . '>';
  }
  $pet_to = implode(',', $mails);

  $pet = pet_load('new_order');
  $params = array(
    'pet_from' => variable_get('site_mail', ini_get('sendmail_from')),
    'pet_to' => $pet_to,
    'rules_state' => $rules_state,
  );
  pet_send_one_mail($pet, $params);
}

/**
 * Send email to property owner when a new booking.com booking is updated.
 */
function roomify_accommodation_booking_email_owner_bcom_updated($booking, $settings, $rules_state) {
  module_load_include('inc', 'pet', 'pet.rules');

  $booking_wrapper = entity_metadata_wrapper('bat_booking', $booking);

  if ($type = bat_type_load($booking_wrapper->booking_event_reference->event_bat_unit_reference->type_id->value())) {
    $to_account = user_load($type->uid);

    pet_action_send_pet('booking_com_booking_updated', NULL, $to_account, NULL, NULL, array(), $rules_state);
  }
}

/**
 * Send email to property owner when a new iCal booking is saved.
 */
function roomify_accommodation_booking_email_owner_ical_booking_saved($booking, $settings, $rules_state) {
  module_load_include('inc', 'pet', 'pet.rules');

  $booking_wrapper = entity_metadata_wrapper('bat_booking', $booking);

  if ($type = bat_type_load($booking_wrapper->booking_event_reference->event_bat_unit_reference->type_id->value())) {
    $to_account = user_load($type->uid);

    pet_action_send_pet('ical_booking_created_or_updated', NULL, $to_account, NULL, NULL, array(), $rules_state);
  }
}

/**
 * Implements hook_pet_substitutions_alter().
 */
function roomify_accommodation_booking_pet_substitutions_alter(&$substitutions, $params) {
  if (isset($params['rules_state']->currentArguments['commerce_line_item'])) {
    $line_item = $params['rules_state']->currentArguments['commerce_line_item']->value();
    $substitutions['commerce_line_item'] = $line_item;

    if ($line_item->type == 'roomify_accommodation_booking') {
      $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

      $booking = $line_item_wrapper->commerce_booking_reference->value();
      $type = bat_type_load($line_item_wrapper->commerce_booking_reference->booking_event_reference->event_bat_unit_reference->type_id->value());
      $property = roomify_property_load($type->field_st_property_reference[LANGUAGE_NONE][0]['target_id']);

      $substitutions['roomify_property'] = $property;
      $substitutions['bat_booking'] = $booking;
    }
  }

  if (isset($params['rules_state']->variables['commerce_order'])) {
    $commerce_order = $params['rules_state']->variables['commerce_order']->value();
    $type = roomify_accommodation_booking_get_bat_types_from_order($commerce_order);
    $property_reference = field_get_items('bat_type', $type, 'field_st_property_reference');
    $property = roomify_property_load($property_reference[0]['target_id']);

    $substitutions['commerce_order'] = $commerce_order;
    $substitutions['bat_type'] = $type;
    $substitutions['roomify_property'] = $property;
  }

  if (isset($params['rules_state']->variables['bat_booking'])) {
    $booking = $params['rules_state']->variables['bat_booking']->value();
    $booking_wrapper = entity_metadata_wrapper('bat_booking', $booking);

    $type = bat_type_load($booking_wrapper->booking_event_reference->event_bat_unit_reference->type_id->value());
    $property = roomify_property_load($type->field_st_property_reference[LANGUAGE_NONE][0]['target_id']);

    $substitutions['bat_type'] = $type;
    $substitutions['bat_booking'] = $booking;
    $substitutions['roomify_property'] = $property;
  }
}

/**
 * @param $rates
 * @param $start_date
 * @param $end_date
 * @param $nights
 * @param $type
 * @param $offers
 *
 * @return int
 */
function roomify_accommodation_booking_get_price($rates, $start_date, $end_date, $nights, $type = 'nightly', $offers = array()) {
  global $databases;

  $prefix = (isset($databases['default']['default']['prefix'])) ? $databases['default']['default']['prefix'] : '';

  if ($type == 'offer') {
    $rate = array_pop($offers);
  }
  else {
    $rate = $rates[$type];
  }

  $units = array(
    $rate->rate_id => new Unit($rate->rate_id, 0),
  );

  $event_type = 'pricing';

  if ($rate->type == 'special_offer_percentage') {
    $event_type = 'percentage_discount';
  }

  $state_store = new DrupalDBStore($event_type, DrupalDBStore::BAT_STATE, $prefix);
  $event_store = new DrupalDBStore($event_type, DrupalDBStore::BAT_EVENT, $prefix);

  $calendar = new Calendar($units, $event_store);
  $events = $calendar->getEvents($start_date, $end_date);

  $amount = 0;

  $duration_unit = new \DateInterval('P1D');

  foreach ($events as $unit_id => $unit_events) {
    foreach ($unit_events as $event) {
      $unit = new Unit($rate->rate_id, $rate->getEventDefaultValue('pricing'));

      if ($event->getValue() > 0) {
        $bat_event = bat_event_load($event->getValue());

        if ($bat_event->getEventValue() > 0) {
          if ($rate->type == 'special_offer_percentage') {
            if ($nights >= 7 && $nights < 28) {
              $amount += roomify_accommodation_booking_get_price($rates, $event->getStartDate(), $event->getEndDate(), $nights, 'weekly') * (100 - $bat_event->getEventValue()) / 100;
            }
            elseif ($nights >= 28) {
              $amount += roomify_accommodation_booking_get_price($rates, $event->getStartDate(), $event->getEndDate(), $nights, 'monthly') * (100 - $bat_event->getEventValue()) / 100;
            }
            else {
              $amount += roomify_accommodation_booking_get_price($rates, $event->getStartDate(), $event->getEndDate(), $nights, 'nightly') * (100 - $bat_event->getEventValue()) / 100;
            }
          }
          else {
            $valuator = new IntervalValuator($event->getStartDate(), $event->getEndDate(), $unit, $state_store, $duration_unit);

            if ($type == 'weekly') {
              $amount += $valuator->determineValue() / 7;
            }
            elseif ($type == 'monthly') {
              $amount += $valuator->determineValue() / 28;
            }
            else {
              $amount += $valuator->determineValue();
            }
          }
        }
        else {
          if ($type == 'weekly') {
            $amount += roomify_accommodation_booking_get_price($rates, $event->getStartDate(), $event->getEndDate(), $nights, 'nightly');
          }
          elseif ($type == 'monthly') {
            $amount += roomify_accommodation_booking_get_price($rates, $event->getStartDate(), $event->getEndDate(), $nights, 'weekly');
          }
          else {
            $valuator = new IntervalValuator($event->getStartDate(), $event->getEndDate(), $unit, $state_store, $duration_unit);
            $amount += $valuator->determineValue();
          }
        }
      }
      else {
        $valuator = new IntervalValuator($event->getStartDate(), $event->getEndDate(), $unit, $state_store, $duration_unit);

        if ($type == 'offer') {
          if (!empty($offers) && $rate->type != 'special_offer_percentage') {
            $amount += roomify_accommodation_booking_get_price($rates, $event->getStartDate(), $event->getEndDate(), $nights, 'offer', $offers);
          }
          elseif ($nights >= 7 && $nights < 28) {
            $amount += roomify_accommodation_booking_get_price($rates, $event->getStartDate(), $event->getEndDate(), $nights, 'weekly');
          }
          elseif ($nights >= 28) {
            $amount += roomify_accommodation_booking_get_price($rates, $event->getStartDate(), $event->getEndDate(), $nights, 'monthly');
          }
          else {
            $amount += roomify_accommodation_booking_get_price($rates, $event->getStartDate(), $event->getEndDate(), $nights, 'nightly');
          }
        }
        elseif ($type == 'weekly') {
          $amount += $valuator->determineValue() / 7;
        }
        elseif ($type == 'monthly') {
          $amount += $valuator->determineValue() / 28;
        }
        else {
          $amount += $valuator->determineValue();
        }
      }
    }
  }

  return $amount;
}

/**
 * @param $booking
 */
function roomify_accommodation_booking_schedule_job($booking) {
  $start_date = new DateTime($booking->booking_start_date[LANGUAGE_NONE][0]['value']);

  if ($days = variable_get('roomify_owner_first_notification', 0)) {
    $period = $start_date->getTimestamp() - REQUEST_TIME - (86400 * $days);

    if ($period > 0) {
      $job = array(
        'type' => 'email owner ' . $days . ' days before',
        'id' => $booking->booking_id,
        'period' => $period,
        'periodic' => FALSE,
      );
      JobScheduler::get('roomify_accommodation_booking_owner_notification')->set($job);
    }
  }

  if ($days = variable_get('roomify_owner_second_notification', 0)) {
    $period = $start_date->getTimestamp() - REQUEST_TIME - (86400 * $days);

    if ($period > 0) {
      $job = array(
        'type' => 'email owner ' . $days . ' days before',
        'id' => $booking->booking_id,
        'period' => $period,
        'periodic' => FALSE,
      );
      JobScheduler::get('roomify_accommodation_booking_owner_notification')->set($job);
    }
  }

  if ($days = variable_get('roomify_owner_third_notification', 0)) {
    $period = $start_date->getTimestamp() - REQUEST_TIME - (86400 * $days);

    if ($period > 0) {
      $job = array(
        'type' => 'email owner ' . $days . ' days before',
        'id' => $booking->booking_id,
        'period' => $period,
        'periodic' => FALSE,
      );
      JobScheduler::get('roomify_accommodation_booking_owner_notification')->set($job);
    }
  }

  if ($days = variable_get('roomify_owner_fourth_notification', 0)) {
    $period = $start_date->getTimestamp() - REQUEST_TIME - (86400 * $days);

    if ($period > 0) {
      $job = array(
        'type' => 'email owner ' . $days . ' days before',
        'id' => $booking->booking_id,
        'period' => $period,
        'periodic' => FALSE,
      );
      JobScheduler::get('roomify_accommodation_booking_owner_notification')->set($job);
    }
  }

  if ($days = variable_get('roomify_guest_first_notification', 0)) {
    $period = $start_date->getTimestamp() - REQUEST_TIME - (86400 * $days);

    if ($period > 0) {
      $job = array(
        'type' => 'email guest ' . $days . ' days before',
        'id' => $booking->booking_id,
        'period' => $period,
        'periodic' => FALSE,
      );
      JobScheduler::get('roomify_accommodation_booking_guest_notification')->set($job);
    }
  }

  if ($days = variable_get('roomify_guest_second_notification', 0)) {
    $period = $start_date->getTimestamp() - REQUEST_TIME - (86400 * $days);

    if ($period > 0) {
      $job = array(
        'type' => 'email guest ' . $days . ' days before',
        'id' => $booking->booking_id,
        'period' => $period,
        'periodic' => FALSE,
      );
      JobScheduler::get('roomify_accommodation_booking_guest_notification')->set($job);
    }
  }

  if ($days = variable_get('roomify_guest_third_notification', 0)) {
    $period = $start_date->getTimestamp() - REQUEST_TIME - (86400 * $days);

    if ($period > 0) {
      $job = array(
        'type' => 'email guest ' . $days . ' days before',
        'id' => $booking->booking_id,
        'period' => $period,
        'periodic' => FALSE,
      );
      JobScheduler::get('roomify_accommodation_booking_guest_notification')->set($job);
    }
  }

  if ($days = variable_get('roomify_guest_fourth_notification', 0)) {
    $period = $start_date->getTimestamp() - REQUEST_TIME - (86400 * $days);

    if ($period > 0) {
      $job = array(
        'type' => 'email guest ' . $days . ' days before',
        'id' => $booking->booking_id,
        'period' => $period,
        'periodic' => FALSE,
      );
      JobScheduler::get('roomify_accommodation_booking_guest_notification')->set($job);
    }
  }
}

/**
 * Implements hook_cron_job_scheduler_info().
 */
function roomify_accommodation_booking_cron_job_scheduler_info() {
  $info = array();
  $info['roomify_accommodation_booking_guest_notification'] = array(
    'queue name' => 'roomify_accommodation_booking_guest_notification_queue',
  );
  $info['roomify_accommodation_booking_owner_notification'] = array(
    'queue name' => 'roomify_accommodation_booking_owner_notification_queue',
  );
  return $info;
}

/**
 * Implements hook_cron_queue_info().
 */
function roomify_accommodation_booking_cron_queue_info() {
  $queues = array();
  $queues['roomify_accommodation_booking_guest_notification_queue'] = array(
    'worker callback' => 'roomify_accommodation_booking_guest_notification_mail',
  );
  $queues['roomify_accommodation_booking_owner_notification_queue'] = array(
    'worker callback' => 'roomify_accommodation_booking_owner_notification_mail',
  );
  return $queues;
}

/**
 * Send 'Booking Reminder' email to guest.
 */
function roomify_accommodation_booking_guest_notification_mail(array $job) {
  if ($booking = bat_booking_load($job['id'])) {
    module_load_include('inc', 'pet', 'pet.rules');

    $booking_wrapper = entity_metadata_wrapper('bat_booking', $booking);

    $to_text = NULL;
    if ($booking->type == 'booking_com') {
      $to_text = $booking_wrapper->field_bcom_email->value();
    }
    elseif ($booking->type == 'roomify_accommodation_booking') {
      $user = user_load($booking->uid);
      $to_text = $user->mail;
    }

    if ($to_text !== NULL) {
      $rules_state = new RulesState();

      $rules_state->currentArguments['bat_booking'] = $booking_wrapper;
      $rules_state->variables['bat_booking'] = $booking_wrapper;

      pet_action_send_pet('booking_reminder', $to_text, NULL, NULL, NULL, array(), $rules_state);
    }
  }
}

/**
 * Send 'Booking Reminder' email to owner.
 */
function roomify_accommodation_booking_owner_notification_mail(array $job) {
  if ($booking = bat_booking_load($job['id'])) {
    module_load_include('inc', 'pet', 'pet.rules');

    $booking_wrapper = entity_metadata_wrapper('bat_booking', $booking);

    if ($type = bat_type_load($booking_wrapper->booking_event_reference->event_bat_unit_reference->type_id->value())) {
      $to_account = user_load($type->uid);

      $rules_state = new RulesState();

      $rules_state->currentArguments['bat_booking'] = $booking_wrapper;
      $rules_state->variables['bat_booking'] = $booking_wrapper;

      pet_action_send_pet('owner_booking_reminder', NULL, $to_account, NULL, NULL, array(), $rules_state);
    }
  }
}

/**
 * 'Booking Notifications' configuration form.
 */
function roomify_accommodation_booking_notifications_form($form, &$form_state) {
  $options = array(0 => t('- Skip -')) + array_combine(range(1, 30), range(1, 30));

  $form['guest'] = array(
    '#type' => 'fieldset',
    '#title' => t('Guest notifications'),
  );

  $form['guest']['roomify_guest_first_notification'] = array(
    '#type' => 'select',
    '#title' => t('First notification'),
    '#options' => $options,
    '#field_suffix' => t('days before'),
    '#default_value' => variable_get('roomify_guest_first_notification', 0),
  );

  $form['guest']['roomify_guest_second_notification'] = array(
    '#type' => 'select',
    '#title' => t('Second notification'),
    '#options' => $options,
    '#field_suffix' => t('days before'),
    '#default_value' => variable_get('roomify_guest_second_notification', 0),
  );

  $form['guest']['roomify_guest_third_notification'] = array(
    '#type' => 'select',
    '#title' => t('Third notification'),
    '#options' => $options,
    '#field_suffix' => t('days before'),
    '#default_value' => variable_get('roomify_guest_third_notification', 0),
  );

  $form['guest']['roomify_guest_fourth_notification'] = array(
    '#type' => 'select',
    '#title' => t('Fourth notification'),
    '#options' => $options,
    '#field_suffix' => t('days before'),
    '#default_value' => variable_get('roomify_guest_fourth_notification', 0),
  );

  $form['guest']['edit_link'] = array(
    '#markup' => l(t('Edit email template'), 'admin/structure/pets/manage/booking_reminder'),
  );

  $form['owner'] = array(
    '#type' => 'fieldset',
    '#title' => t('Owner notifications'),
  );

  $form['owner']['roomify_owner_first_notification'] = array(
    '#type' => 'select',
    '#title' => t('First notification'),
    '#options' => $options,
    '#field_suffix' => t('days before'),
    '#default_value' => variable_get('roomify_owner_first_notification', 0),
  );

  $form['owner']['roomify_owner_second_notification'] = array(
    '#type' => 'select',
    '#title' => t('Second notification'),
    '#options' => $options,
    '#field_suffix' => t('days before'),
    '#default_value' => variable_get('roomify_owner_second_notification', 0),
  );

  $form['owner']['roomify_owner_third_notification'] = array(
    '#type' => 'select',
    '#title' => t('Third notification'),
    '#options' => $options,
    '#field_suffix' => t('days before'),
    '#default_value' => variable_get('roomify_owner_third_notification', 0),
  );

  $form['owner']['roomify_owner_fourth_notification'] = array(
    '#type' => 'select',
    '#title' => t('Fourth notification'),
    '#options' => $options,
    '#field_suffix' => t('days before'),
    '#default_value' => variable_get('roomify_owner_fourth_notification', 0),
  );

  $form['owner']['edit_link'] = array(
    '#markup' => l(t('Edit email template'), 'admin/structure/pets/manage/owner_booking_reminder'),
  );

  $form['#submit'][] = 'roomify_accommodation_booking_notifications_form_submit';

  return system_settings_form($form);
}

/**
 * Submit function for the roomify_accommodation_booking_notifications_form form.
 */
function roomify_accommodation_booking_notifications_form_submit($form, &$form_state) {
  if ($form['guest']['roomify_guest_first_notification']['#value'] != $form['guest']['roomify_guest_first_notification']['#default_value'] || $form['guest']['roomify_guest_second_notification']['#value'] != $form['guest']['roomify_guest_second_notification']['#default_value'] || $form['guest']['roomify_guest_third_notification']['#value'] != $form['guest']['roomify_guest_third_notification']['#default_value'] || $form['guest']['roomify_guest_fourth_notification']['#value'] != $form['guest']['roomify_guest_fourth_notification']['#default_value'] || $form['owner']['roomify_owner_first_notification']['#value'] != $form['owner']['roomify_owner_first_notification']['#default_value'] || $form['owner']['roomify_owner_second_notification']['#value'] != $form['owner']['roomify_owner_second_notification']['#default_value'] || $form['owner']['roomify_owner_third_notification']['#value'] != $form['owner']['roomify_owner_third_notification']['#default_value'] || $form['owner']['roomify_owner_fourth_notification']['#value'] != $form['owner']['roomify_owner_fourth_notification']['#default_value']) {
    drupal_set_message(t('This configuration will be applied to all future bookings made on @sitename. Reminders for existing bookings will be sent at the intervals configured at the time the booking was made.', array('@sitename' => variable_get('site_name', 'Drupal'))), 'warning');
  }
}

/**
 * @param $order
 *
 * @return BatType|false
 */
function roomify_accommodation_booking_get_bat_types_from_order($order = FALSE) {
  if ($order !== FALSE) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);

    // See if there are any product line items.
    if (commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types()) > 0) {
      // Get the unit IDs already in the cart.
      foreach ($wrapper->commerce_line_items as $line_item) {
        // There are some line_item types as: coupon, fee, etc. that don't
        // have a referenced commerce_product.
        if (in_array($line_item->type->value(), commerce_product_line_item_types())) {

          // Need to check if commerce_product_type = 'roomify_accommodation_product'.
          if ($line_item->commerce_product->value()->type == 'roomify_accommodation_product') {
            $type = bat_type_load($line_item->commerce_booking_reference->booking_event_reference->event_bat_unit_reference->type_id->value());
          }

        }
      }
    }

    return $type;
  }

  return FALSE;
}

/**
 * Implements hook_references_dialog_entity_admin_paths().
 */
function roomify_accommodation_booking_references_dialog_entity_admin_paths() {
  return array(
    'commerce_customer_profile' => array(
      'add' => 'admin/commerce/customer-profiles/add/billing',
      'edit' => 'admin/commerce/customer-profiles/[entity_id]/edit',
      'search' => array(
        'function' => 'references_dialog_get_field_search_links',
        'title' => t('Search Dialog'),
      ),
    ),
  );
}

/**
 * Implements hook_references_dialog_widgets_alter().
 */
function roomify_accommodation_booking_references_dialog_widgets_alter(&$widgets) {
  $widgets['entityreference_autocomplete']['operations']['add']['function'] = 'roomify_accommodation_booking_references_dialog_entityreference_add_link';
  $widgets['entityreference_autocomplete']['operations']['search']['function'] = 'roomify_accommodation_booking_references_dialog_entityreference_search_link';
}

/**
 * Custom - Add link callback for entity references.
 */
function roomify_accommodation_booking_references_dialog_entityreference_add_link($element, $widget_settings, $field, $instance) {
  $add_links = references_dialog_entityreference_add_link($element, $widget_settings, $field, $instance);

  if (isset($add_links[0]['title'])) {
    if ($add_links[0]['title'] == t('Create Billing information')) {
      $add_links[0]['title'] = t('Add new Guest');
    }
  }

  return $add_links;
}

/**
 * Custom - Search link callback for entity references.
 */
function roomify_accommodation_booking_references_dialog_entityreference_search_link($element, $widget_settings, $field, $instance) {
  $search_link = references_dialog_get_field_search_links($element, $widget_settings, $field, $instance);

  if ($element['#entity_type'] == 'bat_booking' && $element['#field_name'] == 'booking_guest') {
    $search_link[0]['title'] = t('Search for existing Guest');
  }

  return $search_link;
}
