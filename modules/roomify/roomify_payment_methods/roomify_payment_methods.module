<?php

/**
 * @file
 * Hooks and API functions for roomify_payment_methods module.
 */

/**
 * Implements hook_menu().
 */
function roomify_payment_methods_menu() {
  $items = array();

  $items['admin/roomify/payment_methods'] = array(
    'title' => 'Payment Methods',
    'description' => 'Configure settings for the Payment methods.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('roomify_payment_methods_settings'),
    'access arguments' => array('administer payment methods'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 *
 */
function roomify_payment_methods_settings($form, &$form_state) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  $form['#tree'] = TRUE;

  // Management vertical tabs.
  $form['payment_methods_settings'] = array(
    '#type' => 'vertical_tabs',
    '#attached' => array(
      'css' => array(
        array(
          'data' => '#rooms-booking-settings .vertical-tabs .form-type-textfield input { width: auto; }',
          'type' => 'inline',
        ),
      ),
    ),
  );

  // Stripe.
  $commerce_payment_commerce_stripe = commerce_payment_method_instance_load('commerce_stripe|commerce_payment_commerce_stripe');

  $rules_commerce_payment_commerce_stripe = rules_config_load('commerce_payment_commerce_stripe');

  $settings = $commerce_payment_commerce_stripe['settings'];

  $form['stripe_settings'] = array(
    '#type' => 'fieldset',
    '#group' => 'payment_methods_settings',
    '#title' => t('Stripe settings'),
  );

  $form['stripe_settings']['enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enabled'),
    '#default_value' => $rules_commerce_payment_commerce_stripe->active,
  );

  $form['stripe_settings']['stripe_currency'] = array(
    '#type' => 'select',
    '#title' => t('Currency'),
    '#options' => array(
      'CAD' => t('CAD'),
      'EUR' => t('EUR'),
      'GBP' => t('GBP'),
      'USD' => t('USD'),
      'AUD' => t('AUD'),
      'CHF' => t('CHF'),
    ),
    '#description' => t('Select the currency that you are using.'),
    '#default_value' => !empty($settings['stripe_currency']) ? $settings['stripe_currency'] : 'USD',
  );

  $form['stripe_settings']['secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret Key'),
    '#description' => t('Secret API Key. Get your key from https://stripe.com/'),
    '#default_value' => !empty($settings['secret_key']) ? $settings['secret_key'] : '',
  );

  $form['stripe_settings']['public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Publishable Key'),
    '#description' => t('Publishable API Key. Get your key from https://stripe.com/'),
    '#default_value' => !empty($settings['public_key']) ? $settings['public_key'] : '',
  );

  // Paypal WPS.
  $commerce_payment_paypal_wps = commerce_payment_method_instance_load('paypal_wps|commerce_payment_paypal_wps');

  $rules_commerce_payment_paypal_wps = rules_config_load('commerce_payment_paypal_wps');

  $settings = $commerce_payment_paypal_wps['settings'];
  $settings = (array) $settings + commerce_paypal_wps_default_settings();

  $form['paypal_settings'] = array(
    '#type' => 'fieldset',
    '#group' => 'payment_methods_settings',
    '#title' => t('Paypal settings'),
  );

  $form['paypal_settings']['enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enabled'),
    '#default_value' => $rules_commerce_payment_paypal_wps->active,
  );

  $form['paypal_settings']['business'] = array(
    '#type' => 'textfield',
    '#title' => t('PayPal e-mail address'),
    '#description' => t('The primary e-mail address of the PayPal account you want to use to receive payments.'),
    '#default_value' => $settings['business'],
  );

  $form['paypal_settings']['currency_code'] = array(
    '#type' => 'select',
    '#title' => t('Default currency'),
    '#description' => t('Transactions in other currencies will be converted to this currency, so multi-currency sites must be configured to use appropriate conversion rates.'),
    '#options' => commerce_paypal_currencies('paypal_wps'),
    '#default_value' => $settings['currency_code'],
  );

  $form['paypal_settings']['allow_supported_currencies'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow transactions to use any currency in the options list above.'),
    '#description' => t('Transactions in unsupported currencies will still be converted into the default currency.'),
    '#default_value' => $settings['allow_supported_currencies'],
  );

  $form['paypal_settings']['language'] = array(
    '#type' => 'select',
    '#title' => t('PayPal login page language / locale'),
    '#options' => commerce_paypal_wps_languages(),
    '#default_value' => $settings['language'],
  );

  $form['paypal_settings']['receiver_emails'] = array(
    '#type' => 'textfield',
    '#title' => t('PayPal receiver e-mail addresses'),
    '#description' => t('Enter the primary e-mail address for your PayPal account if different from the one entered above or a comma separated list of all valid e-mail addresses on the account.') . '<br />' . t('IPNs that originate from payments made to a PayPal account whose e-mail address is not in this list will not be processed.'),
    '#default_value' => $settings['receiver_emails'],
  );

  // Authorize.net.
  $commerce_payment_authnet_aim = commerce_payment_method_instance_load('authnet_aim|commerce_payment_authnet_aim');

  $rules_commerce_payment_authnet_aim = rules_config_load('commerce_payment_authnet_aim');

  $settings = $commerce_payment_authnet_aim['settings'];
  $settings = (array) $settings + commerce_authnet_aim_default_settings();

  $form['authorizenet_settings'] = array(
    '#type' => 'fieldset',
    '#group' => 'payment_methods_settings',
    '#title' => t('Authorize.net settings'),
  );

  $form['authorizenet_settings']['enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enabled'),
    '#default_value' => $rules_commerce_payment_authnet_aim->active,
  );

  $form['authorizenet_settings']['login'] = array(
    '#type' => 'textfield',
    '#title' => t('API Login ID'),
    '#description' => t('Your API Login ID is different from the username you use to login to your Authorize.Net account. Once you login, browse to your Account tab and click the <em>API Login ID and Transaction Key</em> link to find your API Login ID. If you are using a new Authorize.Net account, you may still need to generate an ID.'),
    '#default_value' => $settings['login'],
  );

  $form['authorizenet_settings']['tran_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction Key'),
    '#description' => t('Your Transaction Key can be found on the same screen as your API Login ID. However, it will not be readily displayed. You must answer your security question and submit a form to see your Transaction Key.'),
    '#default_value' => $settings['tran_key'],
  );

  $form['authorizenet_settings']['txn_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Adjust to live transactions when you are ready to start processing real payments.') . '<br />' . t('Only specify a developer test account if you login to your account through https://test.authorize.net.'),
    '#options' => array(
      AUTHNET_TXN_MODE_LIVE => t('Live transactions in a live account'),
      AUTHNET_TXN_MODE_LIVE_TEST => t('Test transactions in a live account'),
    ),
    '#default_value' => $settings['txn_mode'],
  );

  $form['authorizenet_settings']['txn_type'] = array(
    '#type' => 'radios',
    '#title' => t('Default credit card transaction type'),
    '#description' => t('The default will be used to process transactions during checkout.'),
    '#options' => array(
      COMMERCE_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
      COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only (requires manual or automated capture after checkout)'),
    ),
    '#default_value' => $settings['txn_type'],
  );

  $form['authorizenet_settings']['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit accepted credit cards to the following types'),
    '#description' => t('If you want to limit acceptable card types, you should only select those supported by your merchant account.') . '<br />' . t('If none are checked, any credit card type will be accepted.'),
    '#options' => commerce_payment_credit_card_types(),
    '#default_value' => $settings['card_types'],
  );

  $form['authorizenet_settings']['email_customer'] = array(
    '#type' => 'checkbox',
    '#title' => t('Tell Authorize.net to e-mail the customer a receipt based on your account settings.'),
    '#default_value' => $settings['email_customer'],
  );

  // Custom Offline Payments.
  $commerce_payment_custom = custom_offline_payment_load('custom');

  $form['customofflinepayment_settings'] = array(
    '#type' => 'fieldset',
    '#group' => 'payment_methods_settings',
    '#title' => t('Custom Offline Payment settings'),
  );

  $form['customofflinepayment_settings']['enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enabled'),
    '#default_value' => $commerce_payment_custom['status'],
  );

  $form['customofflinepayment_settings']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => $commerce_payment_custom['title'],
  );

  $information_description = t('Information you would like to be shown to users when they select this payment method, such as delivery payment details.');
  $information_description .= '<br />';
  $information_description .= t('This could be used as default information for the new payment method rules of this payment.');

  // Change the format with the one usable by Managers.
  if ($commerce_payment_custom['format'] == 'full_html') {
    $commerce_payment_custom['format'] = 'filtered_text';
  }

  $form['customofflinepayment_settings']['information'] = array(
    '#type' => 'text_format',
    '#title' => t('Information'),
    '#description' => $information_description,
    '#default_value' => $commerce_payment_custom['information'],
    '#format' => isset($commerce_payment_custom['format']) ? $commerce_payment_custom['format'] : 'plain_text',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );

  return $form;
}

/**
 * Validation function for the roomify_payment_methods_settings form.
 */
function roomify_payment_methods_settings_validate($form, &$form_state) {
  $values = $form_state['values'];

  // Stripe.
  if ($values['stripe_settings']['enable']) {
    if (empty($values['stripe_settings']['secret_key'])) {
      form_set_error('stripe_settings][secret_key', t('Stripe: !name field is required.', array('!name' => $form['stripe_settings']['secret_key']['#title'])));
    }
    if (empty($values['stripe_settings']['public_key'])) {
      form_set_error('stripe_settings][public_key', t('Stripe: !name field is required.', array('!name' => $form['stripe_settings']['public_key']['#title'])));
    }
  }

  // Paypal WPS.
  if ($values['paypal_settings']['enable']) {
    if (empty($values['paypal_settings']['business'])) {
      form_set_error('paypal_settings][business', t('Paypal: !name field is required.', array('!name' => $form['paypal_settings']['business']['#title'])));
    }
  }

  // Authorize.net.
  if ($values['authorizenet_settings']['enable']) {
    if (empty($values['authorizenet_settings']['login'])) {
      form_set_error('authorizenet_settings][login', t('Authorize.net: !name field is required.', array('!name' => $form['authorizenet_settings']['login']['#title'])));
    }
    if (empty($values['authorizenet_settings']['tran_key'])) {
      form_set_error('authorizenet_settings][tran_key', t('Authorize.net: !name field is required.', array('!name' => $form['authorizenet_settings']['tran_key']['#title'])));
    }
  }

  // Custom Offline Payments.
  if ($values['customofflinepayment_settings']['enable']) {
    if (empty($values['customofflinepayment_settings']['title'])) {
      form_set_error('customofflinepayment_settings][title', t('Custom Offline Payment: !name field is required.', array('!name' => $form['customofflinepayment_settings']['title']['#title'])));
    }
  }
}

/**
 * Submit callback for the roomify_payment_methods_settings form.
 */
function roomify_payment_methods_settings_submit($form, &$form_state) {
  $values = $form_state['values'];

  // Stripe.
  $rules_commerce_payment_commerce_stripe = rules_config_load('commerce_payment_commerce_stripe');
  $rules_commerce_payment_commerce_stripe->active = ($values['stripe_settings']['enable']) ? TRUE : FALSE;
  $rules_commerce_payment_commerce_stripe->save();

  foreach ($rules_commerce_payment_commerce_stripe->actions() as $action) {
    if ($action->settings['payment_method'] == 'commerce_stripe') {
      $action->settings['payment_method'] = array(
        'method_id' => 'commerce_stripe',
        'settings' => array(),
      );
    }

    if ($action->settings['payment_method']['method_id'] == 'commerce_stripe') {
      $action->settings['payment_method']['settings']['stripe_currency'] = $values['stripe_settings']['stripe_currency'];
      $action->settings['payment_method']['settings']['secret_key'] = $values['stripe_settings']['secret_key'];
      $action->settings['payment_method']['settings']['public_key'] = $values['stripe_settings']['public_key'];
      $action->settings['payment_method']['settings']['display_title'] = 'Stripe';

      $action->save();
    }
  }

  // Paypal WPS.
  $rules_commerce_payment_paypal_wps = rules_config_load('commerce_payment_paypal_wps');
  $rules_commerce_payment_paypal_wps->active = ($values['paypal_settings']['enable']) ? TRUE : FALSE;
  $rules_commerce_payment_paypal_wps->save();

  foreach ($rules_commerce_payment_paypal_wps->actions() as $action) {
    if ($action->settings['payment_method'] == 'paypal_wps') {
      $action->settings['payment_method'] = array(
        'method_id' => 'paypal_wps',
        'settings' => array(),
      );
    }

    if ($action->settings['payment_method']['method_id'] == 'paypal_wps') {
      $action->settings['payment_method']['settings']['business'] = $values['paypal_settings']['business'];
      $action->settings['payment_method']['settings']['currency_code'] = $values['paypal_settings']['currency_code'];
      $action->settings['payment_method']['settings']['allow_supported_currencies'] = $values['paypal_settings']['allow_supported_currencies'];
      $action->settings['payment_method']['settings']['language'] = $values['paypal_settings']['language'];
      $action->settings['payment_method']['settings']['server'] = 'live';
      $action->settings['payment_method']['settings']['payment_action'] = 'sale';
      $action->settings['payment_method']['settings']['ipn_logging'] = 'notification';
      $action->settings['payment_method']['settings']['receiver_emails'] = $values['paypal_settings']['receiver_emails'];
      $action->settings['payment_method']['settings']['ipn_create_billing_profile'] = 1;
      $action->settings['payment_method']['settings']['show_payment_instructions'] = 1;

      $action->save();
    }
  }

  // Authorize.net.
  $rules_commerce_payment_authnet_aim = rules_config_load('commerce_payment_authnet_aim');
  $rules_commerce_payment_authnet_aim->active = ($values['authorizenet_settings']['enable']) ? TRUE : FALSE;
  $rules_commerce_payment_authnet_aim->save();

  foreach ($rules_commerce_payment_authnet_aim->actions() as $action) {
    if ($action->settings['payment_method'] == 'authnet_aim') {
      $action->settings['payment_method'] = array(
        'method_id' => 'authnet_aim',
        'settings' => array(),
      );
    }

    if ($action->settings['payment_method']['method_id'] == 'authnet_aim') {
      $action->settings['payment_method']['settings']['login'] = $values['authorizenet_settings']['login'];
      $action->settings['payment_method']['settings']['tran_key'] = $values['authorizenet_settings']['tran_key'];
      $action->settings['payment_method']['settings']['txn_mode'] = $values['authorizenet_settings']['txn_mode'];
      $action->settings['payment_method']['settings']['txn_type'] = $values['authorizenet_settings']['txn_type'];
      $action->settings['payment_method']['settings']['card_types'] = $values['authorizenet_settings']['card_types'];
      $action->settings['payment_method']['settings']['email_customer'] = $values['authorizenet_settings']['email_customer'];
      $action->settings['payment_method']['settings']['log']['request'] = 'request';
      $action->settings['payment_method']['settings']['log']['response'] = 'response';

      $action->save();
    }
  }

  // Custom Offline Payments.
  $commerce_payment_custom = custom_offline_payment_load('custom');

  $commerce_payment_custom['status'] = $values['customofflinepayment_settings']['enable'];

  if (!empty($values['customofflinepayment_settings']['title'])) {
    $commerce_payment_custom['title'] = filter_xss_admin($values['customofflinepayment_settings']['title']);
  }

  $commerce_payment_custom['information'] = filter_xss_admin($values['customofflinepayment_settings']['information']['value']);
  $commerce_payment_custom['format'] = $values['customofflinepayment_settings']['information']['format'];

  commerce_cop_payment_save($commerce_payment_custom);

  db_update('rules_config')
    ->fields(array('active' => $commerce_payment_custom['status']))
    ->condition('name', 'commerce_payment_custom')
    ->execute();

  drupal_set_message(t('The configuration options have been saved.'));
}

/**
 * Implements hook_module_implements_alter().
 */
function roomify_payment_methods_module_implements_alter(&$implementations, $hook) {
  // Remove function commerce_stripe_commerce_payment_method_info_alter
  // in order to remove the warning if Stripe private and public keys are not set.
  if ($hook == 'commerce_payment_method_info_alter') {
    if (isset($implementations['commerce_stripe'])) {
      unset($implementations['commerce_stripe']);
    }
  }
}
