<?php

/**
 * @file
 * Code for the Roomify Conversations feature.
 */

include_once 'roomify_conversations.features.inc';

/**
 * Implements hook_menu().
 */
function roomify_conversations_menu() {
  $items = array();

  $items['admin/bat/make-offer'] = array(
    'page callback' => 'roomify_conversations_make_offer_page',
    'access arguments' => array('view own roomify_conversation entities'),
    'type' => MENU_CALLBACK,
    'theme callback' => 'roomify_conversations_default_theme_callback',
  );

  $items['admin/conversations/%roomify_conversation/quick-reply/%ctools_js'] = array(
    'page callback' => 'roomify_conversations_quick_reply',
    'page arguments' => array(2, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Return the default theme.
 */
function roomify_conversations_default_theme_callback() {
  return variable_get('theme_default', 'bartik');
}

/**
 * Implements hook_mail().
 */
function roomify_conversations_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = array('user' => $params['account']);
  $message['subject'] .= roomify_conversations_mail_text($key . '_subject', $language, $variables);
  $message['body'][] = roomify_conversations_mail_text($key . '_body', $language, $variables);
}

/**
 * Returns a mail string for a variable name.
 *
 * Used by roomify_conversations_mail() and the settings forms to retrieve strings.
 */
function roomify_conversations_mail_text($key, $language = NULL, $variables = array(), $replace = TRUE) {
  $langcode = isset($language) ? $language->language : NULL;

  switch ($key) {
    case 'register_no_approval_required_subject':
      $text = t('Welcome to [site:name]', array(), array('langcode' => $langcode));
      break;

    case 'register_no_approval_required_body':
      $text = t("Hello [user:name],

Thank you for your enquiry!

You can talk with the owner of the property by logging in to the site where an account has automatically been created for you.

You may now log in by clicking this link or copying and pasting it to your browser:

[user:one-time-login-url]

This link can only be used once to log in and will lead you to a page where you can set your password. After setting your password, you will be able to log in at [site:login-url] in the future using [user:name] and the password you choose.


--  [site:name] Team", array(), array('langcode' => $langcode));
      break;
  }

  if ($replace) {
    // We do not sanitize the token replacement, since the output of this
    // replacement is intended for an e-mail message, not a web browser.
    return token_replace($text, $variables, array('language' => $language, 'callback' => 'user_mail_tokens', 'sanitize' => FALSE, 'clear' => TRUE));
  }

  return $text;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function roomify_conversations_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_pet_substitutions_alter().
 */
function roomify_conversations_pet_substitutions_alter(&$substitutions, $params) {
  if (isset($params['rules_state']->variables['message'])) {
    $message = $params['rules_state']->variables['message']->value();
    $substitutions['message'] = $message;
    $substitutions['roomify_conversation'] = roomify_conversation_load($message->message_conversation_reference[LANGUAGE_NONE][0]['target_id']);
  }
  elseif (isset($params['rules_state']->variables['bat_booking'])) {
    $bat_booking = $params['rules_state']->variables['bat_booking']->value();

    $substitutions['bat_booking'] = $bat_booking;

    if (isset($bat_booking->booking_conversation_ref)) {
      $substitutions['roomify_conversation'] = roomify_conversation_load($bat_booking->booking_conversation_ref[LANGUAGE_NONE][0]['target_id']);
    }
  }
  elseif (isset($params['rules_state']->variables['roomify_conversation'])) {
    $conversation = $params['rules_state']->variables['roomify_conversation']->value();
    $substitutions['roomify_conversation'] = $conversation;

    $property = $params['rules_state']->variables['roomify_conversation']->conversation_unit_type_ref->field_st_property_reference->value();
    $substitutions['roomify_property'] = $property;
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function roomify_conversations_entity_view_alter(&$build, $type) {
  if ($type == 'bat_booking' && $build['#view_mode'] == 'conversation') {
    $build['content'] = array(
      '#markup' => roomify_conversations_conversation_booking_render($build['#entity']),
    );
  }
  elseif ($type == 'message') {
    unset($build['message__message_text__0']);

    $build['content'] = array(
      '#markup' => roomify_conversations_message_render($build['#entity']),
    );
  }
}

/**
 * Implements hook_theme().
 */
function roomify_conversations_theme() {
  return array(
    'roomify_conversation_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'roomify_conversation.admin.inc',
    ),
  );
}

/**
 * Implements hook_theme_registry_alter().
 */
function roomify_conversations_theme_registry_alter(&$theme_registry) {
  // Defined path to the current module.
  $module_path = drupal_get_path('module', 'roomify_conversations');
  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}

/**
 * Implements hook_views_api().
 */
function roomify_conversations_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'roomify_conversations') . '/views',
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function roomify_conversations_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function roomify_conversations_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['roomify_conversations'])) {
    $group = $implementations['roomify_conversations'];
    unset($implementations['roomify_conversations']);
    $implementations['roomify_conversations'] = $group;
  }

  if ($hook == 'commerce_checkout_complete' && isset($implementations['roomify_conversations'])) {
    $group = $implementations['roomify_conversations'];
    unset($implementations['roomify_conversations']);
    $implementations['roomify_conversations'] = $group;
  }
}

/**
 * Implements hook_form_alter().
 */
function roomify_conversations_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && $form['#id'] == 'views-exposed-form-user-conversations-page-1') {
    $form['#attached']['css'][] = drupal_get_path('module', 'roomify_conversations') . '/css/roomify_conversations.css';

    $form['name']['#field_suffix'] = '<div class="description">Enter a unit name.</div>';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function roomify_conversations_form_bat_booking_edit_form_alter(&$form, &$form_state) {
  if ($form['#entity']->type == 'conversation_booking') {
    if (isset($_GET['startdate'])) {
      $start_date = (is_numeric(check_plain($_GET['startdate']))) ? check_plain($_GET['startdate']) : '';
      $form['booking_start_date'][LANGUAGE_NONE][0]['#default_value']['value'] = gmdate('Y-m-d', $start_date);
      $form['booking_start_date'][LANGUAGE_NONE][0]['#default_value']['value2'] = gmdate('Y-m-d', $start_date);
      $form['booking_start_date']['#access'] = FALSE;
    }

    if (isset($_GET['enddate'])) {
      $end_date = (is_numeric(check_plain($_GET['enddate']))) ? check_plain($_GET['enddate']) : '';
      $form['booking_end_date'][LANGUAGE_NONE][0]['#default_value']['value'] = gmdate('Y-m-d', $end_date);
      $form['booking_end_date'][LANGUAGE_NONE][0]['#default_value']['value2'] = gmdate('Y-m-d', $end_date);
      $form['booking_end_date']['#access'] = FALSE;
    }

    $form['booking_event_reference']['#access'] = FALSE;
    $form['booking_accommodation_ref']['#access'] = FALSE;

    $form['actions']['submit']['#submit'][] = 'roomify_conversations_bat_booking_edit_form_submit';
  }
  elseif ($form['#entity']->type == 'roomify_accommodation_booking') {
    $form['booking_conversation_ref']['#access'] = FALSE;
  }
}

/**
 *
 */
function roomify_conversations_bat_booking_edit_form_submit($form, &$form_state) {
  $booking = $form_state['bat_booking'];

  if (isset($booking->booking_conversation_ref[LANGUAGE_NONE][0]['target_id'])) {
    if ($conversation = roomify_conversation_load($booking->booking_conversation_ref[LANGUAGE_NONE][0]['target_id'])) {
      $conversation->conversation_booking_ref[LANGUAGE_NONE][0]['target_id'] = $booking->booking_id;
      roomify_conversation_save($conversation);

      $form_state['redirect'] = 'conversation/' . $conversation->conversation_id;
    }
  }
}

/**
 * Implements hook_entity_info().
 */
function roomify_conversations_entity_info() {
  $return['roomify_conversation'] = array(
    'label' => t('Roomify Conversation'),
    // The entity class and controller class extend the classes provided by the
    // Entity API.
    'entity class' => 'RoomifyConversation',
    'controller class' => 'RoomifyConversationController',
    'base table' => 'roomify_conversations',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'conversation_id',
      'bundle' => 'type',
      'label' => 'name',
    ),
    // Bundles are defined by the booking bundles below.
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle
    // objects.
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'roomify_conversation_create',
    'access callback' => 'roomify_conversation_access',
    'access arguments' => array(
      'user key' => 'uid',
      'access tag' => 'roomify_conversation_access',
    ),
    'permission labels' => array(
      'singular' => t('conversation'),
      'plural' => t('conversations'),
    ),
    'module' => 'roomify_conversations',
    // The information below is used by the RoomifyConversationUIController (which extends
    // the EntityDefaultUIController).
    'admin ui' => array(
      'path' => 'admin/bat/config/conversations',
      'file' => 'roomify_conversation.admin.inc',
      'controller class' => 'RoomifyConversationUIController',
      'menu wildcard' => '%roomify_conversation',
    ),
  );

  $return['roomify_conversation_type'] = array(
    'label' => t('Roomify Conversation Type'),
    'entity class' => 'RoomifyConversationType',
    'controller class' => 'RoomifyConversationTypeController',
    'base table' => 'roomify_conversation_types',
    'fieldable' => TRUE,
    'bundle of' => 'roomify_conversation',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'roomify_conversation_type_access',
    'module' => 'roomify_conversations',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/bat/config/conversation-types',
      'file' => 'roomify_conversation_type.admin.inc',
      'controller class' => 'RoomifyConversationTypeUIController',
    ),
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the conversation types via a hook to avoid a recursion
 * issue as loading the room types requires the entity info as well.
 */
function roomify_conversations_entity_info_alter(&$entity_info) {
  foreach (roomify_conversation_get_types() as $type => $info) {
    $entity_info['roomify_conversation']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/bat/config/conversation-types/manage/%roomify_conversation_type',
        'real path' => 'admin/bat/config/conversation-types/manage/' . $type,
        'bundle argument' => 5,
        'access arguments' => array('bypass roomify_conversation entities access'),
      ),
    );
  }

  $entity_info['bat_booking']['view modes']['conversation'] = array(
    'label' => t('Conversation View Mode'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_permission().
 */
function roomify_conversations_permission() {
  $permissions = array();

  // Permission for Roomify Conversation Types.
  $permissions += array(
    'administer roomify_conversation_type entities' => array(
      'title' => t('Administer conversation types'),
      'description' => t('Allows users to add conversation types and configure their fields.'),
      'restrict access' => TRUE,
    ),
  );

  $permissions += bat_entity_access_permissions('roomify_conversation');

  return $permissions;
}

/**
 * User conversations page.
 */
function roomify_conversations_user_conversations() {
  return views_embed_view('user_conversations', 'block_1');
}

/**
 * Checks order access for various operations.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $conversation
 *   The conversation entity to perform the operation on.
 * @param object $account
 *   The user to check for. Leave it to NULL to check for the current user.
 *
 * @return bool
 *   Boolean indicating if the defined user has access to the conversation or not.
 */
function roomify_conversation_access($op, $conversation = NULL, $account = NULL) {
  return bat_entity_access($op, $conversation, $account, 'roomify_conversation');
}

/**
 * Fetches a conversation object.
 *
 * @param int $conversation_id
 *   Integer specifying the conversation id.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return object
 *   A fully-loaded $conversation object or FALSE if it cannot be loaded.
 *
 * @see roomify_conversation_load_multiple()
 */
function roomify_conversation_load($conversation_id, $reset = FALSE) {
  $conversations = roomify_conversation_load_multiple(array($conversation_id), array(), $reset);
  return reset($conversations);
}

/**
 * Load multiple conversations based on certain conditions.
 *
 * @param array $conversation_ids
 *   An array of conversation IDs.
 * @param array $conditions
 *   An array of conditions to match against the {roomify_conversation} table.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return array
 *   An array of conversation objects, indexed by conversation_id.
 *
 * @see entity_load()
 * @see roomify_conversation_load()
 */
function roomify_conversation_load_multiple($conversation_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('roomify_conversation', $conversation_ids, $conditions, $reset);
}

/**
 * Deletes a conversation.
 *
 * @param RoomifyConversation $conversation
 *   The RoomifyConversation object that represents the conversation to delete.
 */
function roomify_conversation_delete(RoomifyConversation $conversation) {
  $conversation->delete();
}

/**
 * Delete multiple conversations.
 *
 * @param array $conversation_ids
 *   An array of conversation IDs.
 */
function roomify_conversation_delete_multiple(array $conversation_ids) {
  entity_get_controller('roomify_conversation')->delete($conversation_ids);
}

/**
 * Create a conversation object.
 */
function roomify_conversation_create($values = array()) {
  return entity_get_controller('roomify_conversation')->create($values);
}

/**
 * Saves a conversation to the database.
 *
 * @param RoomifyConversation $conversation
 *   The RoomifyConversation object.
 */
function roomify_conversation_save(RoomifyConversation $conversation) {
  return entity_save('roomify_conversation', $conversation);
}

/**
 *
 */
function roomify_conversation_uri(RoomifyConversation $conversation) {
  return array(
    'path' => 'conversation/' . $conversation->conversation_id,
  );
}

/**
 *
 */
function roomify_conversation_page_title(RoomifyConversation $conversation) {
  return $conversation->name;
}

/**
 *
 */
function roomify_conversation_page_view($conversation, $view_mode = 'full') {
  $controller = entity_get_controller('roomify_conversation');
  $content = $controller->view(array($conversation->conversation_id => $conversation));

  drupal_set_title($conversation->name);

  return $content;
}

/**
 *
 */
function roomify_conversation_type_access() {
  return TRUE;
}

/**
 * Create a conversation type object.
 */
function roomify_conversation_type_create($values = array()) {
  return entity_get_controller('roomify_conversation_type')->create($values);
}

/**
 * Menu argument loader; Load a conversation type by string.
 *
 * @param $type
 *   The machine-readable name of a conversation type to load.
 * @param bool $reset
 *   A boolean indicating whether the internal cache should be reset.
 *
 * @return array|false
 *   A conversation type array or FALSE if $type does not exist.
 */
function roomify_conversation_type_load($type, $reset = FALSE) {
  return roomify_conversation_get_types($type, $reset);
}

/**
 * Gets an array of all conversation types, keyed by the type name.
 *
 * @param string $type_name
 *   If set, the type with the given name is returned.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return RoomifyConversationType[]
 *   Depending whether $type isset, an array of conversation types or a single one.
 */
function roomify_conversation_get_types($type_name = NULL, $reset = FALSE) {
  // entity_load() will get the Entity controller for our conversation type
  // entity and call the load function of that object.
  $types = entity_load_multiple_by_name('roomify_conversation_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Saves a conversation type to the db.
 *
 * @param RoomifyConversationType $conversation_type
 *   The conversation type to save.
 */
function roomify_conversation_type_save(RoomifyConversationType $conversation_type) {
  $conversation_type->save();
}

/**
 * Deletes a conversation type from the db.
 */
function roomify_conversation_type_delete(RoomifyConversationType $bundle) {
  $bundle->delete();
}

/**
 *
 */
class RoomifyConversation extends Entity {

  /**
   *
   */
  public function __construct($values = array()) {
    parent::__construct($values, 'roomify_conversation');
  }

  /**
   *
   */
  protected function defaultLabel() {
    return $this->name;
  }

  /**
   *
   */
  protected function defaultUri() {
    return array('path' => 'conversation/' . $this->conversation_id);
  }

}

/**
 *
 */
class RoomifyConversationType extends Entity {

  /**
   * The conversation type.
   *
   * @var string
   */
  public $type;

  /**
   * The conversation type label.
   *
   * @var string
   */
  public $label;

  /**
   *
   */
  public function __construct($values = array()) {
    parent::__construct($values, 'roomify_conversation_type');
  }

}

/**
 * The Controller for Conversation entities.
 */
class RoomifyConversationController extends EntityAPIController {

  /**
   *
   */
  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  /**
   *
   */
  public function create(array $values = array()) {
    $values += array(
      'conversation_id' => '',
      'is_new' => TRUE,
      'name' => '',
      'created' => '',
      'changed' => '',
      'data' => '',
    );

    $conversation = parent::create($values);

    return $conversation;
  }

  /**
   *
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);

    return $content;
  }

}

/**
 * The Controller for RoomifyConversationType entities.
 */
class RoomifyConversationTypeController extends EntityAPIControllerExportable {

  /**
   *
   */
  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  /**
   *
   */
  public function create(array $values = array()) {
    $values += array(
      'id' => '',
      'is_new' => TRUE,
      'data' => '',
    );

    $conversation_type = parent::create($values);

    return $conversation_type;
  }

}

/**
 * Implements hook_default_message_type().
 */
function roomify_conversations_default_message_type() {
  $defaults['conversation'] = entity_create('message_type', array(
    'description' => 'Conversation',
    'argument_keys' => array(
      '@string',
    ),
    'message_text' => array(
      LANGUAGE_NONE => array(
        array('value' => 'Example text.'),
      ),
    ),
    'language' => 'en',
  ));

  return $defaults;
}

/**
 * Implements hook_entity_delete().
 */
function roomify_conversations_entity_delete($entity, $type) {
  if ($type == 'bat_booking') {
    // When delete a booking remove the reference from Conversation.
    if (isset($entity->booking_conversation_ref[LANGUAGE_NONE][0]['target_id'])) {
      if ($conversation = roomify_conversation_load($entity->booking_conversation_ref[LANGUAGE_NONE][0]['target_id'])) {
        $conversation->conversation_booking_ref = array();
        roomify_conversation_save($conversation);
      }
    }

    // Remove correlated event.
    if (isset($entity->booking_event_reference[LANGUAGE_NONE][0]['target_id'])) {
      if ($event = bat_event_load($entity->booking_event_reference[LANGUAGE_NONE][0]['target_id'])) {
        if ($state = $event->event_state_reference[LANGUAGE_NONE][0]['state_id']) {
          $booked_state = bat_event_load_state_by_machine_name(BOOKED);
          if ($booked_state['id'] == $state) {
            module_load_include('inc', 'pet', 'pet.rules');

            $rules_state = new RulesState();
            // Booking Wrapper.
            $booking_wrapper = entity_metadata_wrapper('bat_booking', $entity);
            // Event Wrapper Wrapper.
            $bat_event_wrapper = entity_metadata_wrapper('bat_event', $event);

            // Notify Property Owner and Guest.
            $unit = bat_unit_load($event->event_bat_unit_reference[LANGUAGE_NONE][0]['target_id']);
            $type = bat_type_load($unit->type_id);
            $type_wrapper = entity_metadata_wrapper('bat_type', $type);

            // SET RULE STATE.
            $rules_state->currentArguments['bat_booking'] = $booking_wrapper;
            $rules_state->variables['bat_booking'] = $booking_wrapper;

            // Notify Property Owner.
            $to_account = user_load($type->uid);
            pet_action_send_pet('booking_cancelled', NULL, $to_account, NULL, NULL, array(), $rules_state);

            // Notify Guest.
            if ($line_item_id = $entity->booking_line_item_reference[LANGUAGE_NONE][0]['target_id']) {
              $line_item = commerce_line_item_load($line_item_id);
              $order = commerce_order_load($line_item->order_id);

              $to_account = user_load($order->uid);
              pet_action_send_pet('booking_cancelled', NULL, $to_account, NULL, NULL, array(), $rules_state);
            }
          }
        }

        $event->delete();
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function roomify_conversations_entity_update($entity, $type) {
}

/**
 * Implements hook_entity_insert().
 */
function roomify_conversations_entity_insert($entity, $type) {
  if ($type == 'bat_booking') {
    if ($entity->type == 'conversation_booking') {
      global $user;

      $wrapper = entity_metadata_wrapper('bat_booking', $entity);
      $unit_type = $wrapper->booking_conversation_ref->conversation_unit_type_ref->value()->type;

      if ($unit_type == 'home' || $unit_type == 'room') {
        $event_type = 'availability';

        // Create a new 'Availability' event.
        $event = bat_event_create(array(
          'type' => $event_type,
          'start_date' => $entity->booking_start_date[LANGUAGE_NONE][0]['value'],
          'end_date' => $entity->booking_end_date[LANGUAGE_NONE][0]['value'],
          'uid' => $user,
        ));

        $in_conversation_state = bat_event_load_state_by_machine_name('in_conversation');
        $event->event_state_reference[LANGUAGE_NONE][0]['state_id'] = $in_conversation_state['id'];

        $start_date = new DateTime($event->start_date);

        // Subtract one minute from the end date since BAT considers the last minute of an event included.
        $end_date = new DateTime($event->end_date);
        $end_date->sub(new DateInterval('PT1M'));
        $event->end_date = $end_date->format('Y-m-d H:i');

        $wrapper = entity_metadata_wrapper('bat_booking', $entity);
        $type_id = $wrapper->booking_conversation_ref->conversation_unit_type_ref->type_id->value();

        $valid_unit_ids = bat_event_get_matching_units($start_date, $end_date, array(AVAILABLE), $type_id, $event_type, FALSE, FALSE);

        $event->event_bat_unit_reference[LANGUAGE_NONE][0]['target_id'] = reset($valid_unit_ids);

        $event->save();

        // Save reference to created event in the booking entity.
        $entity->booking_event_reference[LANGUAGE_NONE][0]['target_id'] = $event->event_id;
        field_attach_update($type, $entity);
      }
    }
  }

  if ($type == 'message') {
    if (isset($entity->message_conversation_reference[LANGUAGE_NONE][0]['target_id'])) {
      // Update conversation changed date.
      $conversation_id = $entity->message_conversation_reference[LANGUAGE_NONE][0]['target_id'];

      $conversation = roomify_conversation_load($conversation_id);
      $conversation->changed = time();

      roomify_conversation_save($conversation);
    }
  }
}

/**
 * Form "Send message".
 */
function roomify_conversations_send_message_form($form, &$form_state, $conversation_id) {
  $form['conversation_id'] = array(
    '#type' => 'hidden',
    '#value' => $conversation_id,
  );

  $form['message'] = array(
    '#title' => t('Message'),
    '#type' => 'textarea',
    '#resizable' => TRUE,
    '#rows' => 5,
    '#required' => TRUE,
    '#attributes' => array('placeholder' => t('Add a message here.')),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send your Message'),
    '#attributes' => array('class' => array('btn-primary')),
  );

  return $form;
}

/**
 * "Send message" form submit function.
 */
function roomify_conversations_send_message_form_submit($form, &$form_state) {
  global $user;

  $conversation = roomify_conversation_load($form_state['values']['conversation_id']);
  $text_message = $form_state['values']['message'];

  $arguments = array(
    '@string' => $text_message,
  );

  // Create a new message entity.
  $message = message_create('conversation', array('arguments' => $arguments), $user);

  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->message_conversation_reference->set($conversation);
  $wrapper->save();
}

/**
 * "Book This" form.
 */
function roomify_conversations_book_this_form($form, &$form_state, $booking_id) {
  $form['booking_id'] = array(
    '#type' => 'hidden',
    '#value' => $booking_id,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Book This'),
    '#attributes' => array('class' => array('btn-success')),
  );

  return $form;
}

/**
 * "Book This" form submit function.
 */
function roomify_conversations_book_this_form_submit($form, &$form_state) {
  $booking = bat_booking_load($form_state['values']['booking_id']);

  $form_state['redirect'] = 'conversation-booking/' . $booking->booking_conversation_ref[LANGUAGE_NONE][0]['target_id'];
}

/**
 * Render function for booking entities.
 */
function roomify_conversations_conversation_booking_render($booking) {
  global $user;

  $output = '';

  $currency_setting = commerce_currency_load(commerce_default_currency());
  $currency_symbol = $currency_setting['symbol'];

  if (isset($booking->booking_event_reference[LANGUAGE_NONE][0]['target_id'])) {
    if ($event = bat_event_load($booking->booking_event_reference[LANGUAGE_NONE][0]['target_id'])) {
      if ($unit = bat_unit_load($event->event_bat_unit_reference[LANGUAGE_NONE][0]['target_id'])) {
        $type = bat_type_load($unit->type_id);
        $type_name = $type->name;

        $start_date_object = new DateTime($booking->booking_start_date[LANGUAGE_NONE][0]['value']);
        $end_date_object = new DateTime($booking->booking_end_date[LANGUAGE_NONE][0]['value']);

        if ($type->type == 'single_day_tour' || $type->type == 'single_day_activity') {
          $date_format = variable_get('bat_date_format', 'Y-m-d H:i');
        }
        else {
          $date_format = variable_get('bat_daily_date_format', 'Y-m-d');
        }

        $start_date = $start_date_object->format($date_format);
        $end_date = $end_date_object->format($date_format);

        if ($booking->type == 'conversation_booking') {
          $price = t('@currency_symbol@amount', array(
            '@currency_symbol' => $currency_symbol,
            '@amount' => number_format($booking->booking_price[LANGUAGE_NONE][0]['amount'] / 100, 2, '.', ''),
          ));

          $output = '<div class="text">' . t('Offer to book @type_name for @start_date - @end_date for @price (Not including taxes or fees)', array('@type_name' => $type_name, '@start_date' => $start_date, '@end_date' => $end_date, '@price' => $price)) . '</div>';

          if (isset($booking->booking_accommodation_ref[LANGUAGE_NONE][0]['target_id']) &&
              $accommodation_booking = bat_booking_load($booking->booking_accommodation_ref[LANGUAGE_NONE][0]['target_id'])) {
            $line_item = commerce_line_item_load($accommodation_booking->booking_line_item_reference[LANGUAGE_NONE][0]['target_id']);
            $order = commerce_order_load($line_item->order_id);

            $statuses = commerce_order_statuses(array('cart' => TRUE));
            if (isset($statuses[$order->status])) {
              if ($user->uid == $booking->uid) {
                $output .= '<div class="button">' . t('Order in cart') . '</div>';
              }
              else {
                $output .= '<div class="button">' . l(t('Checkout'), 'checkout', array('attributes' => array('class' => array('ctools-use-modal', 'btn', 'btn-success')))) . '</div>';
              }
            }
            else {
              $output .= '<div class="button">' . l(t('View Booking Details'), 'user/' . $user->uid . '/orders/' . $order->order_id, array('attributes' => array('class' => array('ctools-use-modal', 'btn', 'btn-success')))) . '</div>';
            }
          }
          else {
            if ($user->uid == $booking->uid) {
              ctools_include('modal');
              ctools_modal_add_js();

              $conversation = roomify_conversation_load(arg(1));

              $output .= '<div class="button">' . l(t('Edit Offer'), 'admin/bat/make-offer', array('attributes' => array('class' => array('ctools-use-modal', 'btn', 'btn-success')), 'query' => array('bookingid' => $conversation->conversation_booking_ref[LANGUAGE_NONE][0]['target_id'], 'conversationid' => $conversation->conversation_id)));

              $form = drupal_get_form('roomify_conversations_withdraw_offer_form', $conversation->conversation_id);
              $output .= drupal_render($form) . '</div>';
            }
            else {
              $form = drupal_get_form('roomify_conversations_book_this_form', $booking->booking_id);
              $output .= '<div class="book-this-button">' . drupal_render($form) . '</div>';
            }
          }
        }
        else {
          $line_item = commerce_line_item_load($booking->booking_line_item_reference[LANGUAGE_NONE][0]['target_id']);

          $price = t('@currency_symbol@amount', array(
            '@currency_symbol' => $currency_symbol,
            '@amount' => number_format($line_item->commerce_unit_price[LANGUAGE_NONE][0]['amount'] / 100, 2, '.', ''),
          ));

          $output = '<div class="text">' . t('Accepted offer: @type_name for @start_date - @end_date for @price', array('@type_name' => $type_name, '@start_date' => $start_date, '@end_date' => $end_date, '@price' => $price)) . '</div>';

          if ($user->uid == $booking->uid) {
            $output .= '<div class="button">' . l(t('View booking'), 'admin/bat/bookings/booking/' . $booking->booking_id . '/edit', array('attributes' => array('class' => array('btn', 'btn-success')))) . '</div>';
          }
          else {
            $output .= '<div class="button">' . l(t('View booking'), 'user/' . $user->uid . '/stays', array('attributes' => array('class' => array('btn', 'btn-success')))) . '</div>';
          }
        }
      }
    }
  }

  return $output;
}

/**
 * Render function for message entities.
 */
function roomify_conversations_message_render($message) {
  global $user;

  $account = user_load($message->uid);

  $pictures_uri = module_invoke_all('roomify_conversations_user_picture', $account);
  $picture_uri = is_array($pictures_uri) ? end($pictures_uri) : FALSE;

  if ($picture_uri) {
    $user_picture = image_style_url('square', $picture_uri);
  }
  else {
    $user_picture = file_create_url(drupal_get_path('module', 'roomify_conversations') . '/img/user.png');
  }

  $output = '';
  if ($message->uid == $user->uid) {
    $output .= '<div class="message message-right">';
    $output .= '<div class="user-name">' . $account->name . '</div>';
    $output .= '<div class="user-picture"><img height="40px" width="40px" src="' . $user_picture . '" /></div>';
    $output .= '<div class="text">' . $message->arguments['@string'] . '</div>';

    $output .= '<div class="date">' . format_date($message->timestamp, 'custom', 'd.m.Y') . '</div>';

    $output .= '</div>';
  }
  else {
    $output .= '<div class="message message-left">';
    $output .= '<div class="user-name">' . $account->name . '</div>';
    $output .= '<div class="text">' . $message->arguments['@string'] . '</div>';
    $output .= '<div class="user-picture"><img height="40px" width="40px" src="' . $user_picture . '" /></div>';

    $output .= '<div class="date">' . format_date($message->timestamp, 'custom', 'd.m.Y') . '</div>';

    $output .= '</div>';
  }

  return $output;
}

/**
 * Send email to conversation guest when a new booking offer is created.
 */
function roomify_conversations_send_booking_offer_email($booking, $settings, $rules_state) {
  module_load_include('inc', 'pet', 'pet.rules');

  if ($conversation = roomify_conversation_load($booking->booking_conversation_ref[LANGUAGE_NONE][0]['target_id'])) {
    $to_account = user_load($conversation->uid);

    pet_action_send_pet('new_booking_offer', NULL, $to_account, NULL, NULL, array(), $rules_state);
  }
}

/**
 * Send email to conversation recipients when a new message is created.
 */
function roomify_conversations_send_message_email($message, $settings, $rules_state) {
  module_load_include('inc', 'pet', 'pet.rules');

  $conversation_id = $message->message_conversation_reference[LANGUAGE_NONE][0]['target_id'];

  $conversation = roomify_conversation_load($conversation_id);
  $conversation_wrapper = entity_metadata_wrapper('roomify_conversation', $conversation);

  $property_uid = $conversation_wrapper->conversation_unit_type_ref->field_st_property_reference->uid->value();

  if ($message->uid == $property_uid) {
    $to_account = user_load($conversation->conversation_guest_user_ref[LANGUAGE_NONE][0]['target_id']);
  }
  else {
    $to_account = user_load($property_uid);
  }

  pet_action_send_pet('new_conversation_message', NULL, $to_account, NULL, NULL, array(), $rules_state);
}

/**
 * Create a new conversation on commerce checkout.
 */
function roomify_conversations_new_conversation($order) {
  foreach ($order->commerce_line_items as $lang => $item) {
    foreach ($item as $item_id) {
      $line_item = commerce_line_item_load($item_id['line_item_id']);
      if ($line_item->type == 'roomify_accommodation_booking') {
        if (!isset($line_item->field_conversation_booking_reference[LANGUAGE_NONE][0]['target_id'])) {
          $unit = bat_unit_load($booking->unit_id);

          // Create a new conversation.
          $user = user_load($order->uid);

          $conv_fields = array(
            'name' => $user->name,
            'created' => time(),
            'changed' => time(),
            'uid' => $user->uid,
            'language' => LANGUAGE_NONE,
          );
          $conversation = roomify_conversation_create($conv_fields);

          $conversation->conversation_owner_user_ref[LANGUAGE_NONE][0]['target_id'] = $unit->field_owner[LANGUAGE_NONE][0]['target_id'];
          $conversation->conversation_guest_user_ref[LANGUAGE_NONE][0]['target_id'] = $user->uid;

          $conversation->booking_conversation_ref[LANGUAGE_NONE][0]['target_id'] = $booking->booking_id;
          $conversation->field_conversation_unit[LANGUAGE_NONE][0]['target_id'] = $unit->unit_id;

          roomify_conversation_save($conversation);
        }
      }
    }
  }
}

/**
 * Implements hook_roomify_rights().
 */
function roomify_conversations_roomify_rights() {
  $rights['roomify_conversations'] = array(
    'authenticated user' => array(
      'view own roomify_conversation entities',
      'view any bat_booking entity of bundle conversation_booking',
    ),
  );

  return $rights;
}

/**
 * Access callback: Checks whether the user has permission to add a conversation.
 *
 * @return bool
 *   TRUE if the user has add permission, otherwise FALSE.
 */
function roomify_conversation_add_access() {
  if (user_access('administer roomify_conversation_type entities')) {
    return TRUE;
  }

  $bundles = roomify_conversation_get_types();
  foreach ($bundles as $bundle) {
    if (roomify_conversation_access('create', roomify_conversation_create(array('type' => $bundle->type, 'uid' => 0)))) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Make offer page callback.
 */
function roomify_conversations_make_offer_page() {
  // Include modal library.
  ctools_include('modal');

  $params = drupal_get_query_parameters();

  if (isset($params['bookingid'])) {
    $booking_id = $params['bookingid'];
    $conversation_id = $params['conversationid'];

    $form_state = array(
      'title' => t('Edit Offer (Not including taxes or fees)'),
      'ajax' => TRUE,
      'build_info' => array(
        'args' => array($booking_id, $conversation_id),
      ),
    );

    $output = ctools_modal_form_wrapper('roomify_conversations_edit_offer_form', $form_state);
    print ajax_render($output);
    exit();
  }
  else {
    $start_date = $params['startdate'];
    $end_date = $params['enddate'];
    $groupsize = $params['groupsize'];
    $groupsizechildren = $params['groupsizechildren'];
    $unit_id = $params['unitid'];
    $conversation_id = $params['conversationid'];

    $form_state = array(
      'title' => t('Define Booking Cost (Not including taxes or fees)'),
      'ajax' => TRUE,
      'build_info' => array(
        'args' => array($start_date, $end_date, $groupsize, $groupsizechildren, $unit_id, $conversation_id),
      ),
    );

    $output = ctools_modal_form_wrapper('roomify_conversations_make_offer_form', $form_state);
    print ajax_render($output);
    exit();
  }
}

/**
 * "Make Offer" form.
 */
function roomify_conversations_make_offer_form($form, &$form_state, $start_date, $end_date, $group_size, $group_size_children, $unit_id, $conversation_id) {
  $form['groupsize'] = array(
    '#type' => 'hidden',
    '#value' => $group_size,
  );

  $form['groupsizechildren'] = array(
    '#type' => 'hidden',
    '#value' => $group_size_children,
  );

  $form['type_id'] = array(
    '#type' => 'hidden',
    '#value' => $unit_id,
  );

  $form['conversation_id'] = array(
    '#type' => 'hidden',
    '#value' => $conversation_id,
  );

  $conversation = roomify_conversation_load($conversation_id);

  $type = bat_type_load($conversation->conversation_unit_type_ref[LANGUAGE_NONE][0]['target_id']);

  $price = $conversation->conversation_book_price[LANGUAGE_NONE][0]['amount'];
  $currency_code = $conversation->conversation_book_price[LANGUAGE_NONE][0]['currency_code'];

  $std_cost = commerce_currency_format($price, $currency_code);

  $form['std_cost'] = array(
    '#markup' => '<div><label>' . t('Standard Cost:') . '</label> <span>' . $std_cost . '</span></div>',
  );

  $date_fields = bat_date_range_fields();
  $form += $date_fields;

  $form['bat_start_date']['#title'] = t('Check-in');
  $form['bat_end_date']['#title'] = t('Check-out');

  $form['bat_start_date']['#default_value'] = $start_date;
  $form['bat_end_date']['#default_value'] = $end_date;

  if ($type->type == 'single_day_tour' || $type->type == 'single_day_activity') {
    $form['bat_start_date']['#date_format'] = variable_get('bat_date_format', 'Y-m-d H:i');
    $form['bat_end_date']['#date_format'] = variable_get('bat_date_format', 'Y-m-d H:i');
  }

  $form['price'] = array(
    '#type' => 'textfield',
    '#title' => t('New Offer:'),
    '#size' => '10',
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create offer'),
    '#attributes' => array('class' => array('btn', 'btn-success')),
  );

  $form['#validate'][] = 'bat_form_start_end_dates_validate';

  return $form;
}

/**
 * "Make Offer" form submit.
 */
function roomify_conversations_make_offer_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  $start_date = new DateTime($values['bat_start_date']);
  $end_date = new DateTime($values['bat_end_date']);
  $type = bat_type_load($values['type_id']);

  if (bat_event_get_matching_units($start_date, $end_date, array(AVAILABLE), $type->type_id, 'availability', FALSE, FALSE) === FALSE) {
    $property = roomify_property_load($type->field_st_property_reference[LANGUAGE_NONE][0]['target_id']);

    if ($type->type == 'home') {
      // Casa property.
      drupal_set_message(t('These dates are no longer available for "@property_name", please try different dates.', array('@property_name' => $property->name)), 'error');
    }
    else {
      // Locanda property.
      drupal_set_message(t('These dates are no longer available for "@property_name - @type_name", please try different dates.', array('@property_name' => $property->name, '@type_name' => $type->name)), 'error');
    }
  }
  else {
    $booking = bat_booking_create(array(
      'type' => 'conversation_booking',
      'uid' => $type->uid,
    ));
    $booking->booking_start_date[LANGUAGE_NONE][0]['value'] = $values['bat_start_date'];
    $booking->booking_end_date[LANGUAGE_NONE][0]['value'] = $values['bat_end_date'];
    $booking->booking_price[LANGUAGE_NONE][0] = array(
      'currency_code' => commerce_default_currency(),
      'amount' => $values['price'] * 100,
    );
    $booking->booking_conversation_ref[LANGUAGE_NONE][0]['target_id'] = $values['conversation_id'];
    $booking->save();

    $conversation = roomify_conversation_load($values['conversation_id']);
    $conversation->conversation_booking_ref[LANGUAGE_NONE][0]['target_id'] = $booking->booking_id;
    $conversation->save();
  }

  ctools_include('ajax');
  ctools_add_js('ajax-responder');

  $commands = array();
  $commands[] = ctools_modal_command_dismiss();
  $commands[] = ctools_ajax_command_redirect('conversation/' . $values['conversation_id']);

  print ajax_render($commands);
  exit;
}

/**
 * Form "Edit Offer".
 */
function roomify_conversations_edit_offer_form($form, &$form_state, $booking_id, $conversation_id) {
  $booking = bat_booking_load($booking_id);

  $form['booking_id'] = array(
    '#type' => 'hidden',
    '#value' => $booking_id,
  );

  $form['conversation_id'] = array(
    '#type' => 'hidden',
    '#value' => $conversation_id,
  );

  $conversation = roomify_conversation_load($conversation_id);

  $type = bat_type_load($conversation->conversation_unit_type_ref[LANGUAGE_NONE][0]['target_id']);

  $form['std_cost'] = array(
    '#markup' => '<div><label>' . t('Standard Cost:') . '</label> <span>' . $std_cost . '</span></div>',
  );

  $date_fields = bat_date_range_fields();
  $form += $date_fields;

  $form['bat_start_date']['#title'] = t('Check-in');
  $form['bat_end_date']['#title'] = t('Check-out');

  $form['bat_start_date']['#default_value'] = $booking->booking_start_date[LANGUAGE_NONE][0]['value'];
  $form['bat_end_date']['#default_value'] = $booking->booking_end_date[LANGUAGE_NONE][0]['value'];

  if ($type->type == 'single_day_tour' || $type->type == 'single_day_activity') {
    $form['bat_start_date']['#date_format'] = variable_get('bat_date_format', 'Y-m-d H:i');
    $form['bat_end_date']['#date_format'] = variable_get('bat_date_format', 'Y-m-d H:i');
  }

  $form['price'] = array(
    '#type' => 'textfield',
    '#title' => t('Price:'),
    '#size' => '10',
    '#required' => TRUE,
    '#default_value' => $booking->booking_price[LANGUAGE_NONE][0]['amount'] / 100,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
    '#attributes' => array('class' => array('btn', 'btn-success')),
  );

  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('roomify_conversations_offer_delete_form_submit'),
    '#attributes' => array('class' => array('btn', 'btn-primary')),
  );

  $form['#validate'][] = 'bat_form_start_end_dates_validate';

  return $form;
}

/**
 * "Edit Offer" form submit.
 */
function roomify_conversations_edit_offer_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  $booking = bat_booking_load($values['booking_id']);
  $booking->booking_start_date[LANGUAGE_NONE][0]['value'] = $values['bat_start_date'];
  $booking->booking_end_date[LANGUAGE_NONE][0]['value'] = $values['bat_end_date'];
  $booking->booking_price[LANGUAGE_NONE][0]['amount'] = $values['price'] * 100;
  $booking->save();

  ctools_include('ajax');
  ctools_add_js('ajax-responder');

  $commands = array();
  $commands[] = ctools_modal_command_dismiss();
  $commands[] = ctools_ajax_command_redirect('conversation/' . $values['conversation_id']);

  print ajax_render($commands);
  exit;
}

/**
 * "Edit Offer" form delete button submit.
 */
function roomify_conversations_offer_delete_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  $booking = bat_booking_load($values['booking_id']);
  $booking->delete();

  module_load_include('inc', 'pet', 'pet.rules');

  if ($conversation = roomify_conversation_load($values['conversation_id'])) {
    $to_account = user_load($conversation->uid);

    $conversation_wrapper = entity_metadata_wrapper('roomify_conversation', $conversation);

    $rules_state = new RulesState();
    $rules_state->currentArguments['roomify_conversation'] = $conversation_wrapper;
    $rules_state->variables['roomify_conversation'] = $conversation_wrapper;

    pet_action_send_pet('withdraw_offer', NULL, $to_account, NULL, NULL, array(), $rules_state);
  }

  ctools_include('ajax');
  ctools_add_js('ajax-responder');

  $commands = array();
  $commands[] = ctools_modal_command_dismiss();
  $commands[] = ctools_ajax_command_redirect('conversation/' . $values['conversation_id']);

  print ajax_render($commands);
  exit;
}

/**
 * Implements hook_entity_presave().
 */
function roomify_conversations_entity_presave($entity, $type) {
  if ($type == 'bat_booking') {
    if ($entity->type == 'conversation_booking') {
      // Set 'Full name' as booking label.
      if ($full_name = field_get_items('bat_booking', $entity, 'booking_full_name')) {
        $entity->label = $full_name[0]['value'];
      }
      // If 'Full name' is empty set booking label 'Booking type + Id'.
      else {
        $booking_type = bat_booking_type_load($entity->type);
        $entity->label = $booking_type->label . ' ' . $entity->booking_id;
      }
    }
  }
}

/**
 * Callback for Quick Reply modal.
 */
function roomify_conversations_quick_reply($conversation, $ajax) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');

    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Quick Reply'),
      'conversation' => $conversation,
    );

    // Use ctools to generate ajax instructions for the browser to create
    // a form in a modal popup.
    $output = ctools_modal_form_wrapper('roomify_conversations_quick_reply_form', $form_state);

    // If the form has been submitted, there may be additional instructions
    // such as dismissing the modal popup.
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }

    // Return the ajax instructions to the browser via ajax_render().
    print ajax_render($output);
    drupal_exit();
  }
  else {
    $form_state = array(
      'conversation' => $conversation,
    );
    return drupal_get_form('roomify_conversations_quick_reply_form', $form_state);
  }
}

/**
 * Form for quick reply modal.
 */
function roomify_conversations_quick_reply_form($form, &$form_state) {
  $guest = user_load($form_state['conversation']->conversation_guest_user_ref[LANGUAGE_NONE][0]['target_id']);
  $form = array();

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'roomify_dashboard') . '/js/roomify_dashboard_modal.js',
  );
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'roomify_conversations') . '/css/quick_reply.css',
  );

  drupal_set_title(t('Quick Reply'));

  $form['conversation_id'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['conversation']->conversation_id,
  );

  $form['property_title'] = array(
    '#markup' => '<h2>' . t('Conversation with @guest', array('@guest' => $guest->name)) . '</h2>',
  );

  $form['most_recent_message'] = array(
    '#markup' => '<h4>' . t('Previous message') . ': ' . roomify_conversations_get_most_recent_message($form_state['conversation']->conversation_id) . '</h4>',
  );

  $form['reply'] = array(
    '#type' => 'textarea',
    '#cols' => 40,
    '#rows' => 2,
  );

  $form['view_conversation'] = array(
    '#type' => 'submit',
    '#value' => t('View entire conversation'),
    '#limit_validation_errors' => array(),
    '#submit' => array('roomify_conversations_quick_reply_form_redirect_submit'),

  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send Reply'),
  );

  return $form;
}

/**
 * Submit handler for quick reply - redirect to conversation.
 */
function roomify_conversations_quick_reply_form_redirect_submit($form, &$form_state) {
  // Close the modal.
  ctools_add_js('ajax-responder');
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
  $delay = 0;
  $options = array();
  $path = '/conversation/' . $form_state['complete form']['conversation_id']['#value'];
  $form_state['ajax_commands'][] = ctools_ajax_command_redirect($path, $delay, $options);
}

/**
 * Submit handler for quick reply modal.
 */
function roomify_conversations_quick_reply_form_submit($form, &$form_state) {
  global $user;

  $conversation = roomify_conversation_load($form_state['values']['conversation_id']);
  $text_message = $form_state['values']['reply'];

  $arguments = array(
    '@string' => $text_message,
  );

  // Create a new message entity.
  $message = message_create('conversation', array('arguments' => $arguments), $user);

  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->message_conversation_reference->set($conversation);
  $wrapper->save();

  // Close the modal.
  ctools_add_js('ajax-responder');
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
  $delay = 0;
  $options = array();
  if (!empty($form_state['#redirect'])) {
    $path = $form_state['#redirect'];
  }
  else {
    $path = 'user';
  }
  $form_state['ajax_commands'][] = ctools_ajax_command_redirect($path, $delay, $options);
}

/**
 * Get most recent message for a given conversation.
 */
function roomify_conversations_get_most_recent_message($conversation_id) {
  // Get the most recent message referencing this conversation.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'message')
    ->entityCondition('bundle', 'conversation')
    ->fieldCondition('message_conversation_reference', 'target_id', $conversation_id, '=')
    ->propertyOrderBy('timestamp', 'DESC')
    ->range(0, 1);

  $result = $query->execute();

  // If we find a message, return its text.
  if (isset($result['message'])) {
    $message = message_load(current(current($result))->mid);
    return $message->arguments['@string'];
  }

  return FALSE;
}

/**
 * Implements hook_default_cer().
 */
function roomify_conversations_default_cer() {
  $items = array();

  $items['bat_booking:conversation_booking:booking_event_reference*bat_event:availability:event_booking_reference'] = entity_import('cer', '{
    "cer_bidirectional" : { "und" : [ { "value" : "1" } ] },
    "cer_enabled" : { "und" : [ { "value" : "1" } ] },
    "cer_left" : { "und" : [
        { "path" : "bat_booking:conversation_booking:booking_event_reference" }
      ]
    },
    "cer_right" : { "und" : [ { "path" : "bat_event:availability:event_booking_reference" } ] },
    "cer_weight" : { "und" : [ { "value" : "0" } ] },
    "identifier" : "bat_booking:conversation_booking:booking_event_reference*bat_event:availability:event_booking_reference",
    "rdf_mapping" : []
  }');

  $items['bat_booking:conversation_booking:booking_accommodation_ref*bat_booking:roomify_accommodation_booking:booking_booking_conversation_ref'] = entity_import('cer', '{
    "identifier" : "bat_booking:conversation_booking:booking_accommodation_ref*bat_booking:roomify_accommodation_booking:booking_booking_conversation_ref",
    "cer_bidirectional" : { "und" : [ { "value" : "1" } ] },
    "cer_enabled" : { "und" : [ { "value" : "1" } ] },
    "cer_weight" : { "und" : [ { "value" : "0" } ] },
    "cer_left" : { "und" : [ { "path" : "bat_booking:conversation_booking:booking_accommodation_ref" } ] },
    "cer_right" : { "und" : [
        { "path" : "bat_booking:roomify_accommodation_booking:booking_booking_conversation_ref" }
      ]
    },
    "rdf_mapping" : []
  }');

  return $items;
}

/**
 * Form 'Withdraw offer'.
 */
function roomify_conversations_withdraw_offer_form($form, &$form_state, $conversation_id) {
  $form['conversation_id'] = array(
    '#type' => 'hidden',
    '#value' => $conversation_id,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Withdraw offer'),
    '#attributes' => array('class' => array('btn-danger')),
  );

  return $form;
}

/**
 * Submit function for the roomify_conversations_withdraw_offer_form form.
 */
function roomify_conversations_withdraw_offer_form_submit($form, &$form_state) {
  module_load_include('inc', 'pet', 'pet.rules');

  $conversation = roomify_conversation_load($form_state['values']['conversation_id']);

  $booking = bat_booking_load($conversation->conversation_booking_ref[LANGUAGE_NONE][0]['target_id']);
  $booking->delete();

  $to_account = user_load($conversation->uid);

  $conversation_wrapper = entity_metadata_wrapper('roomify_conversation', $conversation);

  $rules_state = new RulesState();
  $rules_state->currentArguments['roomify_conversation'] = $conversation_wrapper;
  $rules_state->variables['roomify_conversation'] = $conversation_wrapper;

  pet_action_send_pet('withdraw_offer', NULL, $to_account, NULL, NULL, array(), $rules_state);
}

/**
 *
 */
function roomify_conversations_inquiry_render($conversation) {
  global $user;

  drupal_add_js(drupal_get_path('module', 'roomify_conversations') . '/js/roomify_conversations.js');

  $output = '<div class="enquiry-item">';

  $type = bat_type_load($conversation->conversation_unit_type_ref[LANGUAGE_NONE][0]['target_id']);
  $type_name = $type->name;

  if ($type->type == 'single_day_tour' || $type->type == 'single_day_activity') {
    $date_format = variable_get('bat_date_format', 'Y-m-d H:i');
  }
  else {
    $date_format = variable_get('bat_daily_date_format', 'Y-m-d');
  }

  $guests = 0;
  if (isset($conversation->conversation_guests[LANGUAGE_NONE][0]['value'])) {
    $guests = $conversation->conversation_guests[LANGUAGE_NONE][0]['value'];
  }
  $children = 0;
  if (isset($conversation->conversation_children[LANGUAGE_NONE][0]['value'])) {
    if (!empty($conversation->conversation_children[LANGUAGE_NONE][0]['value'])) {
      $children = $conversation->conversation_children[LANGUAGE_NONE][0]['value'];
    }
  }

  $name = '';
  if (isset($conversation->conversation_user_name[LANGUAGE_NONE][0]['value'])) {
    $name = $conversation->conversation_user_name[LANGUAGE_NONE][0]['value'];
  }

  $user_email = '';
  if (isset($conversation->conversation_user_email[LANGUAGE_NONE][0]['value'])) {
    $user_email = $conversation->conversation_user_email[LANGUAGE_NONE][0]['value'];
  }

  $telephone = '';
  if (isset($conversation->conversation_telephone[LANGUAGE_NONE][0]['value'])) {
    if (empty($conversation->conversation_telephone[LANGUAGE_NONE][0]['value'])) {
      $telephone = '-';
    }
    else {
      $telephone = $conversation->conversation_telephone[LANGUAGE_NONE][0]['value'];
    }
  }

  $further_info = '';
  if (isset($conversation->conversation_further_info[LANGUAGE_NONE][0]['value'])) {
    $further_info = $conversation->conversation_further_info[LANGUAGE_NONE][0]['value'];
  }

  $start_date_object = new DateTime($conversation->conversation_book_start_date[LANGUAGE_NONE][0]['value']);
  $end_date_object = new DateTime($conversation->conversation_book_end_date[LANGUAGE_NONE][0]['value']);

  $start_date = $start_date_object->format($date_format);
  $end_date = $end_date_object->format($date_format);

  $output .= '<div class="left">';

  $output .= '<div class="text">' . t('Enquiry about @type_name from @start_date - @end_date (@guests guests)', array('@type_name' => $type_name, '@start_date' => $start_date, '@end_date' => $end_date, '@guests' => $guests)) . '</div>';

  if (isset($conversation->field_enquiry_further_info[LANGUAGE_NONE][0]['value'])) {
    if (!empty($conversation->field_enquiry_further_info[LANGUAGE_NONE][0]['value'])) {
      $output .= '<div class="further-info">"' . $conversation->field_enquiry_further_info[LANGUAGE_NONE][0]['value'] . '"</div>';
    }
  }

  $output .= '</div><div class="right">';

  $output .= '<div class="button">' . l(t('View Enquiry Details'), '', array('attributes' => array('class' => array('expand-enquiry', 'btn', 'btn-primary')))) . '</div>';
  $output .= '<div class="button" style="display: none;">' . l(t('Hide Enquiry Details'), '', array('attributes' => array('class' => array('hide-enquiry', 'btn', 'btn-primary')))) . '</div>';

  if ($user->uid == $type->uid) {
    if (!isset($conversation->conversation_booking_ref[LANGUAGE_NONE][0]['target_id'])) {
      ctools_include('modal');
      ctools_modal_add_js();

      $output .= '<div class="button make-offer">' . l(t('Make Offer'), 'admin/bat/make-offer', array('attributes' => array('class' => array('ctools-use-modal', 'btn', 'btn-success')), 'query' => array('startdate' => $start_date_object->format('Y-m-d'), 'enddate' => $end_date_object->format('Y-m-d'), 'groupsize' => $guests, 'groupsizechildren' => $children, 'unitid' => $conversation->conversation_unit_type_ref[LANGUAGE_NONE][0]['target_id'], 'conversationid' => $conversation->conversation_id))) . '</div>';
    }
  }

  $output .= '</div>';

  $output .= '</div>';

  $output .= '<div class="enquiry" style="display: none;">';

  $output .= '<div class="enquiry-name well"><div class="label">' . t('Name') . '</div><div class="item">' . $name . '</div></div>';

  $output .= '<div class="enquiry-email well"><div class="label">' . t('Email address') . '</div><div class="item">' . $user_email . '</div></div>';

  $output .= '<div class="enquiry-telephone well"><div class="label">' . t('Telephone') . '</div><div class="item">' . $telephone . '</div></div>';

  $output .= '<div class="enquiry-arr-date well"><div class="label">' . t('Arrival date') . '</div><div class="item"><span class="date-display-single">' . $start_date . '</span></div></div>';

  $output .= '<div class="enquiry-dep-date well"><div class="label">' . t('Departure date') . '</div><div class="item"><span class="date-display-single">' . $end_date . '</span></div></div>';

  $output .= '<div class="enquiry-type-ref well"><div class="label">' . t('Listing Type') . '</div><div class="item">' . $type_name . '</div></div>';

  $output .= '<div class="enquiry-guests well"><div class="label">' . t('Guests') . '</div><div class="item">' . $guests . '</div></div>';

  $output .= '<div class="enquiry-children well"><div class="label">' . t('Children') . '</div><div class="item">' . $children . '</div></div>';

  if ($further_info != '') {
    $output .= '<div class="enquiry-info well"><div class="label">' . t('Further info') . '</div><div class="item">' . $further_info . '</div></div>';
  }

  if (isset($conversation->conversation_book_price[LANGUAGE_NONE][0]['amount'])) {
    $price = $conversation->conversation_book_price[LANGUAGE_NONE][0]['amount'];
    $currency_code = $conversation->conversation_book_price[LANGUAGE_NONE][0]['currency_code'];

    $std_cost = commerce_currency_format($price, $currency_code);

    $offer_text = '';
    // Let's look if there's an offer.
    if (module_exists('roomify_offers')) {
      $temp_end_date = clone($end_date_object);
      $temp_end_date->sub(new DateInterval('PT1M'));
      $property = roomify_property_load($type->field_st_property_reference[LANGUAGE_NONE][0]['target_id']);
      $offers = roomify_offers_get_offers($property, $start_date_object, $temp_end_date);
      $offer_names = array();
      if (!empty($offers)) {
        foreach ($offers as $offer) {
          if (isset($offer->name)) {
            $offer_names[] = $offer->name;
          }
        }
        $offer_text = '<div class="offers">';
        foreach ($offer_names as $name) {
          $offer_text .= '<div class="offer">' . t('Offer triggered: @name', array('@name' => $name)) . '</div>';
        }
        $offer_text .= '</br></div>';
      }
    }

    $output .= '<div class="enquiry-price">' . $offer_text . '<div class="label">' . t('Price') . ':&nbsp;</div><div class="item">' . $std_cost . '</div></div>';
  }

  $output .= '</div>';

  return $output;
}
