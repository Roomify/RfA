<?php

/**
 * @file
 * Code for the Roomify Translate module.
 */

/**
 * Implements hook_roomify_rights().
 */
function roomify_translate_roomify_rights() {
  $permissions = array_keys(user_permission_get_modules());

  $rights['roomify_translate'] = array(
    'translator' => array(
      'translate user-defined strings',
      'translate interface',
      'translate admin strings',
      'translate bat_type entities',
      'translate node entities',
      'translate roomify_property entities',
      'translate taxonomy_term entities',
    ),
    'roomify manager' => array(
      'assign translator role',
      'administer languages',
      'translate user-defined strings',
      'translate interface',
      'translate admin strings',
      'translate node entities',
      'translate bat_type entities',
      'translate roomify_property entities',
      'translate taxonomy_term entities',
    ),
    'property owner' => array(
      'translate bat_type entities',
      'translate roomify_property entities',
    ),
  );
  return $rights;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function roomify_translate_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_panels_panels_pre_render().
 *
 * Add the Translate link to the dashboard.
 */
function roomify_translate_panels_pre_render($panels_display, $renderer) {
  if ($panels_display->css_id == 'mini-panel-dashboard_manage_configuration') {
    $translate_link = panels_new_pane('translations', 'translations', TRUE);
    $panels_display->add_pane($translate_link, 'middle');
  }

  if ($panels_display->css_id == 'mini-panel-dashboard_manage_configuration') {
    foreach ($panels_display->content as $key => $pane) {
      if ($pane->type == 'translations') {
        $pane->access['plugins'][0]['name'] = 'perm';
        $pane->access['plugins'][0]['settings']['perm'] = 'translate user-defined strings';
        $pane->access['plugins'][0]['context'] = 'logged-in-user';
        $pane->access['plugins'][0]['not'] = FALSE;
        $pane->css['css_class'] = 'manage-translations';
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function roomify_translate_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['roomify_translate'])) {
    $group = $implementations['roomify_translate'];
    unset($implementations['roomify_translate']);
    $implementations['roomify_translate'] = $group;
  }
}

/**
 * Implements hook_form_alter().
 */
function roomify_translate_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['translation']) && $form['translation']['#type'] == 'fieldset') {
    $form['translation']['#group'] = 'additional_settings';
  }
}

/**
 * Roomify Properties and Types translation settings.
 */
function roomify_translate_entities_translation_settings() {
  $settings['default_language'] = 'xx-et-default';
  $settings['hide_language_selector'] = 1;
  $settings['exclude_language_none '] = 0;
  $settings['lock_language'] = 0;
  $settings['shared_fields_original_only'] = 0;

  variable_set('entity_translation_settings_roomify_property__casa_property', $settings);
  variable_set('entity_translation_settings_roomify_property__locanda_property', $settings);
  variable_set('entity_translation_settings_bat_type__home', $settings);
  variable_set('entity_translation_settings_bat_type__room', $settings);
}

/**
 * Implements hook_language_fallback_candidates_alter().
 */
function roomify_translate_language_fallback_candidates_alter(array &$fallback_candidates) {
  global $language;

  $menu_item = menu_get_item();

  if ($menu_item['path'] == 'listing/%' || $menu_item['path'] == 'room-type/%') {
    if (isset($menu_item['page_arguments'][1]->data->translations->data[$language->language])) {
      $fallback_candidates = array($language->language, LANGUAGE_NONE);
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function roomify_translate_entity_presave($entity, $type) {
  if ($type == 'taxonomy_term') {
    if (!isset($entity->language)) {
      $entity->language = language_default('language');
    }
  }
}
