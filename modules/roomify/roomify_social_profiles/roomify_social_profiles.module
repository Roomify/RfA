<?php

/**
 * @file
 * Module file for Roomify Social Sharing.
 */

require 'roomify_social_profiles.config.inc';

/**
 * Implements hook_menu().
 */
function roomify_social_profiles_menu() {
  $items['admin/config/content/rsp'] = array(
    'title' => 'Roomify Social Profiles Buttons',
    'description' => 'Configure the Roomify Social Profiles Buttons to select which social buttons you would like to enable.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rsp_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer roomify_social_profiles'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function roomify_social_profiles_permission() {
  return array(
    'administer roomify_social_profiles' => array(
      'title' => t('Administer Roomify Social Profiles'),
      'description' => t('Permission to allow user to configure the Roomify Social Profiles Buttons.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function roomify_social_profiles_theme($existing, $type, $theme, $path) {
  return array(
    'roomify_social_profiles_config_buttons' => array(
      'render element' => 'element',
    ),
    'roomify_social_profiles_button' => array(
      'variables' => array('name' => NULL, 'button' => NULL),
    ),
  );
}

/**
 * Theme function for roomify_social_profiles_config_buttons.
 * Prints the table for the buttons config in the settings form.
 */
function theme_roomify_social_profiles_config_buttons($variables) {
  $elements = $variables['element'];
  // Allow dragging of rows to set the weights, handled by javascript.
  drupal_add_tabledrag('roomify_social_profiles_config_buttons', 'order', 'sibling', 'item-row-weight');

  $header = array(
    'label' => t('Button'),
    'enabled' => t('Enabled'),
    // @@TODO Not sure if there is anywhere we can write a description '#description' => t('Username for your page/channel/profile.'),
    'link' => t('Link'),
    'weight' => t('Weight'),
  );

  $rows = array();
  foreach (element_children($elements) as $name) {
    $row = array('class' => array('draggable'));
    foreach ($header as $fieldname => $title) {
      $row['data'][] = drupal_render($elements[$name][$fieldname]);
    }
    $rows[] = $row;
  }

  return theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => 'rsp_config_buttons'),
  ));
}

/**
 * Theme function for roomify_social_profiles_button.
 * Prints a single button.
 */
function theme_roomify_social_profiles_button($variables) {
  // Variables are $name, $button, $link.
  extract($variables);

  $link = $button['link'];
  $output = <<<EOM
<li class="rsp-social-icon rsp-$name"><a href="$link" target="_blank" ><span class="rsp-icon">$button[svg]</span></a></li>
EOM;
  return $output;
}

/**
 * Implements hook_block_info().
 */
function roomify_social_profiles_block_info() {
  $blocks['roomify_social_profiles'] = array(
    'info' => t('Roomify Social Profiles Buttons'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function roomify_social_profiles_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'roomify_social_profiles':
      $block['subject'] = t('Follow Us.');
      $block['content'] = rsp_get_buttons();
      break;
  }
  return $block;
}

/**
 * Return the chosen buttons, or the default values if not yet set.
 */
function roomify_social_profiles_get_chosen() {
  $defaults = array(
    'facebook' => array(
      'enabled' => TRUE,
      'link' => 'http://www.facebook.com/roomify-us',
    ),
    'linkedin' => array(
      'enabled' => TRUE,
      'link' => 'http://www.linkedin.com/company/roomify-llc',
    ),
    'twitter' => array(
      'enabled' => TRUE,
      'link' => 'http://www.twitter.com/roomifyus',
    ),
  );
  $chosen = variable_get('rsp_chosen', $defaults);

  if (!is_array(current($chosen))) {
    // Migrate from old format of variable.
    foreach ($chosen as $name => &$enabled) {
      $enabled = array('enabled' => $enabled ? TRUE : FALSE);
    }
  }

  return $chosen;
}

/**
 * Admin form.
 */
function rsp_form() {
  $all_buttons = rsp_settings(TRUE);
  $chosen = roomify_social_profiles_get_chosen();

  $form['rsp_chosen'] = array(
    '#tree' => TRUE,
    '#title' => t('Configure buttons'),
    '#theme' => 'roomify_social_profiles_config_buttons',
  );
  foreach ($all_buttons as $name => $button) {
    // Determine if this button requires a particular value of
    // roomify_social_profiles_follow to be valid.
    // This is the case if one or other of the URL as not present.
    // Both URLs absent makes no sense and would be a bug.
    $form['rsp_chosen'][$name]['label'] = array(
      '#type' => 'item',
      '#markup' => $button['text'],
    );
    $form['rsp_chosen'][$name]['enabled'] = array(
      '#type' => 'checkbox',
      '#default_value' => isset($chosen[$name]['enabled']) ? $chosen[$name]['enabled'] : FALSE,
    );
    // Hide entries where there is no corresponding URL.
    $form['rsp_chosen'][$name]['enabled']['#states'] = array(
      'visible' => array(":input[name='rsp_follow']" => array('value' => 1)),
    );
    $form['rsp_chosen'][$name]['link'] = array(
      '#type' => 'textfield',
      '#default_value' => isset($chosen[$name]['link']) ? $chosen[$name]['link'] : '',
      // Hide the username for share URLs where it isn't needed.
      // Otherwise it is a required field.
      // @@TODO Required field not working.
      '#states' => array(
        'visible' => array(":input[name='rsp_follow']" => array('value' => 1)),
        'required' => array(":input[name='rsp_chosen[$name][enabled]']" => array('checked' => TRUE)),
      ),
    );

    $form['rsp_chosen'][$name]['weight'] = array(
      '#type' => 'weight',
      '#default_value' => isset($chosen[$name]['weight']) ? $chosen[$name]['weight'] : 0,
      '#delta' => 20,
      '#attributes' => array('class' => array('item-row-weight')),
    );
  }

  $form['#validate'][] = 'rsp_form_validate';

  return system_settings_form($form);
}

/**
 * Verify handler for roomify_social_profiles_form().
 */
function rsp_form_validate($form, &$form_state) {
  $follow_text = t('Follow');

  foreach ($form_state['values']['rsp_chosen'] as $name => $settings) {
    if ($settings['enabled']) {
      if (isset($settings['link']) && !$settings['link']) {
        // @@TODO The form highlighting the error in red isn't working.
        form_set_error("rsp_chosen[$name][link]", t('You must set the link to use "Follow" button for !button', array('!button' => $name)));
      }
    }
  }
}

/**
 * Fetch buttons settings.
 *
 * @param bool $all
 *   TRUE: Fetch all buttons.  FALSE: only fetch enabled buttons.
 *
 * @return array
 *   Key is button name, value is an array of button config and settings merged.
 *   For config values, see hook_roomify_social_profiles_buttons.
 *   Settings values are 'enabled', 'weight', 'username'.
 */
function rsp_settings($all = FALSE) {
  $buttons = &drupal_static($all ? __FUNCTION__ : __FUNCTION__ . '__all');

  // Get all buttons.
  $chosen = roomify_social_profiles_get_chosen();
  $defaults = array('enabled' => FALSE, 'weight' => 0, 'link' => '');
  $buttons = module_invoke_all('roomify_social_profiles_buttons');
  drupal_alter('roomify_social_profiles_buttons', $buttons);

  // Set some defaults.
  foreach ($buttons as $name => &$button) {
    if (!(isset($chosen[$name]))) {
      $chosen[$name] = array('enabled' => FALSE);
    }
    // Merge in the current config, with suitable defaults and checking.
    if (isset($chosen[$name])) {
      $button += $chosen[$name];
    }
    $button += $defaults;
    $button['link'] = check_plain($button['link']);

    // Default text to name.
    if (!isset($button['text'])) {
      $button['text'] = $name;
    }
  }
  // Sort buttons by configured weight.
  uasort($buttons, 'drupal_sort_weight');

  if (!$all) {
    // Filter to only include enabled ones with a URL configured.
    $enabled_buttons = array();
    foreach ($buttons as $key => $value) {
      if ($value['enabled']) {
        $enabled_buttons[$key] = $buttons[$key];
      }
    }
  }
  else {
    $enabled_buttons = $buttons;
  }

  return $enabled_buttons;
}

/**
 * Returns a Drupal render array for the buttons.
 *
 * @param object $node
 *   The node object you are trying to share.
 *
 * @return string
 *   A string of markup for the list of buttons.
 */
function rsp_get_buttons($node = NULL) {
  $items = array();
  foreach (rsp_settings() as $name => $button) {
    // Set share and follow as the link.
    $items[] = array(
      '#theme' => 'roomify_social_profiles_button',
      '#name' => $name,
      '#button' => $button,
    );
  }

  // Add css and js here, so it's always available when we're showing buttons.
  // Don't have to worry about adding them more than once.

  return $items;
}
