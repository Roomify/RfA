<?php

/**
 * @file
 * Code for the Roomify Listing Availability Search Block.
 */

use Roomify\Bat\Event\Event;

/**
 * Implements hook_block_info().
 */
function roomify_listing_availability_search_block_block_info() {
  $blocks = array();

  $blocks['roomify_listing_search'] = array(
    'info' => t('Listing Availability Search Form'),
    'pages' => 'booking',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['roomify_property_search'] = array(
    'info' => t('Roomify Property Search'),
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function roomify_listing_availability_search_block_block_view($delta = '') {
  $block = array();

  if ($delta == 'roomify_listing_search') {
    $menu_item = menu_get_item();

    if (isset($menu_item['page_arguments'][1]->data)) {
      if (get_class($menu_item['page_arguments'][1]->data) == 'RoomifyProperty') {
        $starting_price = get_lower_default_price_property_types($menu_item['page_arguments'][1]->data->property_id);

        if ($starting_price) {
          $block['subject'] = '<span class="title">' . t('Check Availability') . '</span>' . ' ' . '<span class="roomify-starting-price">' . t('Starting from') . ' ' . $starting_price . ' ' . t('per night') . '</span>';
        }
        else {
          $block['subject'] = t('Check Availability');
        }

        $block['content'] = drupal_get_form('roomify_listing_search_block_form');
      }
    }
  }

  if ($delta == 'roomify_property_search') {
    module_load_include('module', 'property_bat_facets', 'property_bat_facets');

    $block['subject'] = t('Check availability');
    $block['content'] = drupal_get_form('property_bat_facets_availability');
  }

  return $block;
}

/**
 * Implements hook_block_info_alter().
 */
function roomify_listing_faceted_search_block_block_info_alter(&$blocks, $theme, $code_blocks) {
  foreach ($blocks['facetapi'] as &$block) {
    // Add Attributes facet API block to booking page.
    if (stristr($block['info'], 'Attributes') !== FALSE) {
      $block['status'] = 1;
      $block['weight'] = -25;
      $block['region'] = 'sidebar_first';
      $block['visibility'] = 1;
      $block['pages'] = 'booking';
    }
  }
}

/**
 * Callback for roomify_listing_search_block block.
 */
function roomify_listing_search_block_form() {
  $date_format = variable_get('bat_daily_date_format', 'Y-m-d');

  $params = drupal_get_query_parameters();
  $now = date_create();
  $max_capacity = 2;

  $menu_item = menu_get_item();

  $property = $menu_item['page_arguments'][1]->data;

  $bat_type = field_get_items('roomify_property', $property, 'property_bat_type_reference');
  $type = bat_type_load($bat_type[0]['target_id']);

  $max_capacity = field_get_items('bat_type', $type, 'field_st_max_capacity');
  $max_capacity = $max_capacity[0]['value'];

  $form['container'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('container-inline'),
    ),
  );

  if (isset($params['start_date']) && !empty($params['start_date'])) {
    $validation = date_parse(check_plain($params['start_date']));
    if ($validation['error_count'] == 0) {
      $arrival_date = new DateTime(check_plain($params['start_date']));
      $arrival = $arrival_date->format($date_format);
    }
  }
  if (isset($params['end_date']) && !empty($params['end_date'])) {
    $validation = date_parse(check_plain($params['end_date']));
    if ($validation['error_count'] == 0) {
      $departure_date = new DateTime(check_plain($params['end_date']));
      $departure = $departure_date->format($date_format);
    }
  }

  if (isset($params['bat_start_date']) && !empty($params['bat_start_date'])) {
    $validation = date_parse(check_plain($params['bat_start_date']));
    if ($validation['error_count'] == 0) {
      $arrival_date = new DateTime(check_plain($params['bat_start_date']));
      $arrival = $arrival_date->format($date_format);
    }
  }
  if (isset($params['bat_end_date']) && !empty($params['bat_end_date'])) {
    $validation = date_parse(check_plain($params['bat_end_date']));
    if ($validation['error_count'] == 0) {
      $departure_date = new DateTime(check_plain($params['bat_end_date']));
      $departure = $departure_date->format($date_format);
    }
  }

  // Create unique ids and selectors for each picker.
  $start_date_id = drupal_html_id('datepicker-start-date');
  $start_date_selector = '#' . $start_date_id . ' .form-text';

  $end_date_id = drupal_html_id('datepicker-end-date');
  $end_date_selector = '#' . $start_date_id . ' .form-text';

  $start_date = new DateTime();
  $end_date = clone($start_date);
  if ($days_advance = variable_get('roomify_accommodation_booking_days_in_advance', 1)) {
    $start_date->add(new DateInterval('P' . $days_advance . 'D'));
  }
  $future_limit = variable_get('roomify_accommodation_booking_future_limit', 31104000);
  $end_date->add(new DateInterval('PT' . $future_limit . 'S'));

  $sd = clone($start_date);
  $sd->modify('first day of this month');
  $ed = clone($end_date);
  $ed->modify('first day of next month');
  foreach (new DatePeriod($sd, new DateInterval('P1M'), $ed) as $date) {
    $year = $date->format('Y');
    $month = $date->format('m');

    $allowed_values = roomify_listing_availability_search_block_allowed_values($type->type_id, $year, $month);

    $allowed_values_start[$year . '-' . $month] = $allowed_values['start'];
    $allowed_values_end[$year . '-' . $month] = $allowed_values['end'];
  }

  $datepicker_options = array(
    'minDate' => '+' . $days_advance . 'd',
    'maxDate' => '+' . ($future_limit / 86400) . 'd',
    'numberOfMonths' => 2,
    'changeMonth' => FALSE,
    'changeYear' => FALSE,
  );

  $form['container']['arrival'] = array(
    '#prefix' => '<div class="form-wrapper listing-date-range"><div class="start-date" id="' . $start_date_id . '">',
    '#suffix' => '</div>',
    '#type' => 'date_popup',
    '#title' => t('Check in'),
    '#date_format' => $date_format,
    '#default_value' => isset($arrival) ? $arrival : '',
    '#datepicker_options' => array_merge($datepicker_options, array('allowedValues' => $allowed_values_start, 'endDateSelector' => $end_date_selector)),
    '#attributes' => array('class' => array('date-restrictions-datepicker'), 'placeholder' => t('Check-in')),
    '#required' => TRUE,
  );

  $form['container']['departure'] = array(
    '#prefix' => '<div class="end-date" id="' . $end_date_id . '">',
    '#suffix' => '</div></div>',
    '#type' => 'date_popup',
    '#title' => t('Check out'),
    '#date_format' => $date_format,
    '#default_value' => isset($departure) ? $departure : '',
    '#datepicker_options' => array_merge($datepicker_options, array(
      'allowedValues' => $allowed_values_end,
      'startDateSelector' => $start_date_selector,
      'endDateDays' => 1,
    )),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'roomify_listing_availability_search_block') . '/js/date_restrictions_datepicker.js',
        drupal_get_path('module', 'bat') . '/js/bat_date_popup.js',
        array(
          'data' => array(
            'bat' => array(
              'datepickers' => array(
                $start_date_selector => array(
                  'endDateSelector' => $end_date_selector,
                ),
              ),
            ),
          ),
          'type' => 'setting',
        ),
      ),
      'css' => array(drupal_get_path('module', 'roomify_listing_availability_search_block') . '/skin/melon.datepicker.css'),
    ),
    '#attributes' => array('class' => array('date-restrictions-datepicker'), 'placeholder' => t('Check-out')),
    '#required' => TRUE,
  );

  $form['container']['group_size'] = array(
    '#type' => 'select',
    '#title' => t('Guests'),
    '#description' => '',
    '#options' => range(1, $max_capacity),
    '#default_value' => isset($params['group_size']) ? $params['group_size'] - 1 : 1,
  );

  $form['container']['type_id'] = array(
    '#type' => 'hidden',
    '#value' => $type->type_id,
  );

  $instant_booking = field_get_items('roomify_property', $property, 'field_sp_allow_instant_bookings');

  $button_text = t('Make an Enquiry');
  if (isset($instant_booking) && $instant_booking[0]['value']) {
    $button_text = t('Book Now');
  }

  $form['container']['submit'] = array(
    '#prefix' => '<div class="listing-availability-search-submit">',
    '#suffix' => '</div>',
    '#type' => 'submit',
    '#value' => $button_text,
  );

  return $form;
}

/**
 * Validation handler for the roomify_listing_search_block_form form.
 */
function roomify_listing_search_block_form_validate($form, $form_state) {
}

/**
 * Submit handler for the roomify_listing_search_block_form form.
 */
function roomify_listing_search_block_form_submit($form, $form_state) {
  $values = $form_state['values'];

  $date_format = variable_get('bat_daily_date_format', 'Y-m-d');

  $start_date = new DateTime($values['arrival']);
  $arrival = $start_date->format($date_format);

  $end_date = new DateTime($values['departure']);
  $departure = $end_date->format($date_format);

  $type = bat_type_load($values['type_id']);

  $menu_item = menu_get_item();
  $property = $menu_item['page_arguments'][1]->data;

  $path = 'booking/' . $arrival . '/' . $departure . '/' . $type->type_id;

  // Check if the Unit is available.
  $event_type = 'availability';

  $end_date->sub(new DateInterval('PT1M'));

  $cal_response = bat_event_get_calendar_response($start_date, $end_date, array(AVAILABLE), $type->type_id, 'availability');

  if (count($cal_response['included'])) {
    drupal_goto($path, array('query' => array('group_size' => $values['group_size'] + 1, 'property' => $property->property_id)));
  }
  else {
    drupal_set_message(t('@unit_name not available for these dates, try others if possible', array('@unit_name' => $type->name)), 'error');

    foreach (array_unique($cal_response['excluded']) as $message) {
      drupal_set_message($message, 'error');
    }
  }
}

/**
 * Return available dates.
 *
 * @param $type_id
 * @param $year
 * @param $month
 *
 * @return array
 */
function roomify_listing_availability_search_block_allowed_values($type_id, $year, $month) {
  $start_dates = array();
  $end_dates = array();

  $start_date = new DateTime($year . '-' . $month . '-01');

  $end_date = clone($start_date);
  $end_date->modify('+1 month -1 minute');

  $event_type = 'availability';

  $av_state = bat_event_load_state_by_machine_name(AVAILABLE);

  $calendar = bat_event_get_calendar($type_id, $event_type);

  $states = $calendar->getEventsItemized($start_date, $end_date, Event::BAT_DAILY);

  $period = new DatePeriod($start_date, new DateInterval('P1D'), $end_date);

  foreach ($period as $date) {
    $first_date = new DateTime();
    $first_date->setTime(0, 0);
    if ($days_advance = variable_get('roomify_accommodation_booking_days_in_advance', 1)) {
      $first_date->add(new DateInterval('P' . $days_advance . 'D'));
    }
    $last_date = new DateTime();
    $last_date->setTime(0, 0);
    $future_limit = variable_get('roomify_accommodation_booking_future_limit', 31104000);
    $last_date->add(new DateInterval('PT' . $future_limit . 'S'));

    foreach ($states as $unit => $unit_states) {
      if ($av_state['id'] == $unit_states['bat_day'][$date->format('Y')][$date->format('n')]['d' . $date->format('j')]) {
        if (!in_array($date->format('Y-m-d'), $start_dates)) {
          if ($date >= $first_date && $date <= $last_date) {
            $start_dates[] = $date->format('Y-m-d');
          }
        }

        if (!in_array($date->format('Y-m-d'), $end_dates)) {
          if ($date >= $first_date && $date <= $last_date) {
            $end_dates[] = $date->format('Y-m-d');
          }
        }

        if ($date >= $first_date && $date <= $last_date) {
          $end_dates[] = $date->modify('+1 day')->format('Y-m-d');
        }

        break;
      }
    }
  }

  $dates = array(
    'start' => $start_dates,
    'end' => $end_dates,
  );

  return $dates;
}

/**
 * Converts a format string into help text, i.e. 'Y-m-d' becomes 'YYYY-MM-DD'.
 *
 * @param string $format
 *   A date format string.
 *
 * @return string
 *   The conveted help text.
 */
function roomify_listing_availability_search_block_date_format_help($format, $lower_case = FALSE) {
  $replace = array(
    'Y' => 'YYYY',
    'm' => 'MM',
    'd' => 'DD',
    'H' => 'HH',
    'i' => 'MM',
    's' => 'SS',
    '\T' => 'T',
  );

  if ($lower_case) {
    return strtolower(strtr($format, $replace));
  }

  return strtr($format, $replace);
}

/**
 * Implements hook_ctools_plugin_directory()
 */
function roomify_listing_availability_search_block_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Callback for roomify_listing_search_block block.
 */
function locanda_search_availability_search_form() {
  $date_format = variable_get('bat_daily_date_format', 'Y-m-d');

  $params = drupal_get_query_parameters();

  $menu_item = menu_get_item();

  $property = $menu_item['page_arguments'][1]->data;

  $form['container'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('container-inline'),
    ),
  );

  if (isset($params['bat_start_date']) && !empty($params['bat_start_date'])) {
    $validation = date_parse(check_plain($params['bat_start_date']));
    if ($validation['error_count'] == 0) {
      $arrival_date = new DateTime(check_plain($params['bat_start_date']));
      $arrival = $arrival_date->format($date_format);
    }
  }
  if (isset($params['bat_end_date']) && !empty($params['bat_end_date'])) {
    $validation = date_parse(check_plain($params['bat_end_date']));
    if ($validation['error_count'] == 0) {
      $departure_date = new DateTime(check_plain($params['bat_end_date']));
      $departure = $departure_date->format($date_format);
    }
  }

  // Create unique ids and selectors for each picker.
  $start_date_id = drupal_html_id('datepicker-start-date');
  $start_date_selector = '#' . $start_date_id . ' .form-text';

  $end_date_id = drupal_html_id('datepicker-end-date');
  $end_date_selector = '#' . $start_date_id . ' .form-text';

  $start_date = new DateTime();
  if ($days_advance = variable_get('roomify_accommodation_booking_days_in_advance', 1)) {
    $start_date->add(new DateInterval('P' . $days_advance . 'D'));
  }

  $end_date = clone($start_date);
  $future_limit = variable_get('roomify_accommodation_booking_future_limit', 31104000);
  $end_date->add(new DateInterval('PT' . $future_limit . 'S'));

  // Specify the default datepicker parameters (see date_popup_element_info())
  $datepicker_options = array(
    'minDate' => '+' . $days_advance . 'd',
    'maxDate' => '+' . ($future_limit / 86400) . 'd',
    'numberOfMonths' => 1,
    'changeMonth' => FALSE,
    'changeYear' => FALSE,
  );
  $form['container']['arrival'] = array(
    '#prefix' => '<div class="form-wrapper bat-date-range"><div class="start-date" id="' . $start_date_id . '">',
    '#suffix' => '</div>',
    '#type' => 'date_popup',
    '#description' => '',
    '#date_format' => $date_format,
    '#default_value' => isset($arrival) ? $arrival : '',
    '#datepicker_options' => array_merge($datepicker_options, array('endDateSelector' => $end_date_selector)),
    '#required' => TRUE,
    '#attributes' => array('placeholder' => t('Arrival')),
  );

  $form['container']['departure'] = array(
    '#prefix' => '<div class="end-date" id="' . $end_date_id . '">',
    '#suffix' => '</div></div>',
    '#type' => 'date_popup',
    '#description' => '',
    '#date_format' => $date_format,
    '#default_value' => isset($departure) ? $departure : '',
    '#datepicker_options' => array_merge($datepicker_options, array('startDateSelector' => $start_date_selector, 'endDateDays' => 1)),
    '#required' => TRUE,
    '#attributes' => array('placeholder' => t('Departure')),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'bat') . '/js/bat_date_popup.js',
        array(
          'data' => array(
            'bat' => array(
              'batBookingStartDay' => variable_get('bat_event_start_date', 0),
              'batDateFormat' => 'dd/mm/yy',

              // Here we create a listing of all datepickers registered on the
              // current page. This is available for use in your own custom
              // jQuery scripts as Drupal.settings.bat.datepickers.
              'datepickers' => array(
                $start_date_selector => array(
                  'endDateSelector' => $end_date_selector,
                ),
              ),
            ),
          ),
          'type' => 'setting',
        ),
      ),
      'css' => array(drupal_get_path('module', 'roomify_listing_availability_search_block') . '/skin/single-melon.datepicker.css'),
    ),
  );

  $property_wrapper = entity_metadata_wrapper('roomify_property', $property);

  $max_capacity = 1;
  foreach ($property_wrapper->property_bat_type_reference->value() as $type) {
    if (isset($type->field_st_max_capacity[LANGUAGE_NONE][0]['value'])) {
      $max_capacity = max($max_capacity, $type->field_st_max_capacity[LANGUAGE_NONE][0]['value']);
    }
  }

  $form['container']['group_size'] = array(
    '#type' => 'select',
    '#title' => t('Guests'),
    '#description' => '',
    '#options' => range(1, $max_capacity),
    '#default_value' => isset($params['group_size']) ? $params['group_size'] - 1 : 1,
  );

  $instant_booking = field_get_items('roomify_property', $property, 'field_sp_allow_instant_bookings');

  $button_text = t('Make an Enquiry');
  if (isset($instant_booking) && $instant_booking[0]['value']) {
    $button_text = t('Book Now');
  }

  $form['container']['submit'] = array(
    '#type' => 'submit',
    '#prefix' => '<div class="locanda-availability-search-submit">',
    '#suffix' => '</div>',
    '#value' => $button_text,
  );

  return $form;
}

/**
 * Submit handler.
 */
function locanda_search_availability_search_form_submit($form, $form_state) {
  $params = drupal_get_query_parameters();

  $date_format = variable_get('bat_daily_date_format', 'Y-m-d');

  $start_date = new DateTime($form_state['values']['arrival']);
  $arrival = $start_date->format($date_format);

  $end_date = new DateTime($form_state['values']['departure']);
  $departure = $end_date->format($date_format);

  $menu_item = menu_get_item();
  $property = $menu_item['page_arguments'][1]->data;

  drupal_goto('listing/' . $property->property_id, array(
    'query' => array(
      'bat_start_date' => $arrival,
      'bat_end_date' => $departure,
      'group_size' => $form_state['values']['group_size'] + 1
    ),
    'fragment' => 'property-types',
    )
  );
}

/**
 * Callback for bat_type_search_availability_form block.
 */
function bat_type_search_availability_form() {
  $date_format = variable_get('bat_daily_date_format', 'Y-m-d');

  $params = drupal_get_query_parameters();

  $now = date_create();

  $menu_item = menu_get_item();

  $type = $menu_item['page_arguments'][1]->data;

  $max_capacity = field_get_items('bat_type', $type, 'field_st_max_capacity');
  $max_capacity = $max_capacity[0]['value'];

  $form['container'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('container-inline'),
    ),
  );

  if (isset($params['bat_start_date']) && !empty($params['bat_start_date'])) {
    $validation = date_parse(check_plain($params['bat_start_date']));
    if ($validation['error_count'] == 0) {
      $arrival_date = new DateTime(check_plain($params['bat_start_date']));
      $arrival = $arrival_date->format($date_format);
    }
  }
  if (isset($params['bat_end_date']) && !empty($params['bat_end_date'])) {
    $validation = date_parse(check_plain($params['bat_end_date']));
    if ($validation['error_count'] == 0) {
      $departure_date = new DateTime(check_plain($params['bat_end_date']));
      $departure = $departure_date->format($date_format);
    }
  }

  // Create unique ids and selectors for each picker.
  $start_date_id = drupal_html_id('datepicker-start-date');
  $start_date_selector = '#' . $start_date_id . ' .form-text';

  $end_date_id = drupal_html_id('datepicker-end-date');
  $end_date_selector = '#' . $start_date_id . ' .form-text';

  $start_date = new DateTime();
  if ($days_advance = variable_get('roomify_accommodation_booking_days_in_advance', 1)) {
    $start_date->add(new DateInterval('P' . $days_advance . 'D'));
  }

  $end_date = clone($start_date);
  $future_limit = variable_get('roomify_accommodation_booking_future_limit', 31104000);
  $end_date->add(new DateInterval('PT' . $future_limit . 'S'));

  $sd = clone($start_date);
  $sd->modify('first day of this month');
  $ed = clone($end_date);
  $ed->modify('first day of next month');
  foreach (new DatePeriod($sd, new DateInterval('P1M'), $ed) as $date) {
    $year = $date->format('Y');
    $month = $date->format('m');

    $allowed_values = roomify_listing_availability_search_block_allowed_values($type->type_id, $year, $month);

    $allowed_values_start[$year . '-' . $month] = $allowed_values['start'];
    $allowed_values_end[$year . '-' . $month] = $allowed_values['end'];
  }

  $datepicker_options = array(
    'minDate' => '+' . $days_advance . 'd',
    'maxDate' => '+' . ($future_limit / 86400) . 'd',
    'numberOfMonths' => 2,
    'changeMonth' => FALSE,
    'changeYear' => FALSE,
  );

  $form['container']['arrival'] = array(
    '#prefix' => '<div class="form-wrapper bat-date-range"><div class="start-date" id="' . $start_date_id . '">',
    '#suffix' => '</div>',
    '#type' => 'date_popup',
    '#description' => '',
    '#date_format' => $date_format,
    '#default_value' => isset($arrival) ? $arrival : '',
    '#datepicker_options' => array_merge($datepicker_options, array('allowedValues' => $allowed_values_start, 'endDateSelector' => $end_date_selector)),
    '#required' => TRUE,
    '#attributes' => array('class' => array('date-restrictions-datepicker'), 'placeholder' => t('Check-in')),
  );

  $form['container']['departure'] = array(
    '#prefix' => '<div class="end-date" id="' . $end_date_id . '">',
    '#suffix' => '</div></div>',
    '#type' => 'date_popup',
    '#description' => '',
    '#date_format' => $date_format,
    '#default_value' => isset($departure) ? $departure : '',
    '#datepicker_options' => array_merge($datepicker_options, array(
      'allowedValues' => $allowed_values_end,
      'startDateSelector' => $start_date_selector,
      'endDateDays' => 1,
    )),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'roomify_listing_availability_search_block') . '/js/date_restrictions_datepicker.js',
        drupal_get_path('module', 'bat') . '/js/bat_date_popup.js',
        array(
          'data' => array(
            'bat' => array(
              'datepickers' => array(
                $start_date_selector => array(
                  'endDateSelector' => $end_date_selector,
                ),
              ),
            ),
          ),
          'type' => 'setting',
        ),
      ),
      'css' => array(drupal_get_path('module', 'roomify_listing_availability_search_block') . '/skin/melon.datepicker.css'),
    ),
    '#attributes' => array('class' => array('date-restrictions-datepicker'), 'placeholder' => t('Check-out')),
    '#required' => TRUE,
  );

  $form['container']['group_size'] = array(
    '#type' => 'select',
    '#description' => '',
    '#options' => array('' => t('- Guests -')) + range(1, $max_capacity),
    '#default_value' => '',
    '#required' => TRUE,
  );

  $form['container']['submit'] = array(
    '#type' => 'submit',
    '#prefix' => '<div class="bat-type-availability-search-submit">',
    '#suffix' => '</div>',
    '#value' => t('Search'),
  );

  return $form;
}

/**
 * Submit handler.
 */
function bat_type_search_availability_form_submit($form, $form_state) {
  $values = $form_state['values'];

  $group_size = $values['group_size'] + 1;

  $date_format = variable_get('bat_daily_date_format', 'Y-m-d');

  $start_date = new DateTime($values['arrival']);
  $arrival = $start_date->format($date_format);

  $end_date = new DateTime($values['departure']);
  $departure = $end_date->format($date_format);

  $end_date->sub(new DateInterval('PT1M'));

  $menu_item = menu_get_item();
  $type = $menu_item['page_arguments'][1]->data;

  $property = roomify_property_load($type->field_st_property_reference[LANGUAGE_NONE][0]['target_id']);

  $cal_response = bat_event_get_calendar_response($start_date, $end_date, array(AVAILABLE), $type->type_id, 'availability');

  if (count($cal_response['included'])) {
    $path = 'booking' . '/' . $arrival . '/' . $departure . '/' . $type->type_id;
    drupal_goto($path, array('query' => array('property' => $property->property_id, 'group_size' => $group_size)));
  }
  else {
    if ($type->type == 'home') {
      // Casa property.
      drupal_set_message(t('These dates are no longer available for "@property_name", please try different dates.', array('@property_name' => $property->name)), 'error');
    }
    else {
      // Locanda property.
      drupal_set_message(t('These dates are no longer available for "@property_name - @type_name", please try different dates.', array('@property_name' => $property->name, '@type_name' => $type->name)), 'error');
    }

    foreach (array_unique($cal_response['excluded']) as $message) {
      drupal_set_message($message, 'error');
    }

    drupal_goto('room-type/' . $type->type_id, array('fragment' => 'search-availability'));
  }
}
