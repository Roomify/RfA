<?php

/**
 * @file
 * Code for the Roomify Travel Theme module.
 */

/**
 * Implements hook_modules_enabled().
 */
function roomify_travel_theme_modules_enabled($modules) {
  if (in_array('roomify_travel_theme', $modules)) {
    // Re-index blogposts.
    $search_api_index = search_api_index_load('blogposts_index');
    $search_api_index->clear();
    search_api_index_items($search_api_index, -1);

    // Re-index things to do.
    $search_api_index = search_api_index_load('things_to_do_index');
    $search_api_index->clear();
    search_api_index_items($search_api_index, -1);
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function roomify_travel_theme_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => "1");
  }
  if ($module == "slick" && $api == "slick_default_preset") {
    return array("version" => "1");
  }
  if ($module == "panels_mini" && $api == "panels_default") {
    return array("version" => "1");
  }
  if ($module == "facetapi" && $api == "facetapi_defaults") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_entityqueue_api().
 */
function roomify_travel_theme_entityqueue_api($module = NULL, $api = NULL) {
  if ($module == "entityqueue" && $api == "entityqueue_default") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_views_api().
 */
function roomify_travel_theme_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'roomify_travel_theme') . '/views',
  );
}

/**
 * Implements hook_views_handlers().
 */
function roomify_travel_theme_views_handlers() {
  return array(
    'info' => array(
      'path' => drupal_get_path('roomify_travel_theme', 'views'),
    ),
    'handlers' => array(
      // The name of my handler.
      'roomify_travel_theme_handler_starting_price' => array(
        // The name of the handler we are extending.
        'parent' => 'views_handler_field',
      ),
      'roomify_travel_theme_handler_areas_properties' => array(
        // The name of the handler we are extending.
        'parent' => 'views_handler_field',
      ),
    ),
  );
}

/**
 * Implements hook_default_search_api_index().
 */
function roomify_travel_theme_default_search_api_index() {
  $items = array();
  $items['blogposts_index'] = entity_import('search_api_index', '{
    "name" : "Blogposts Index",
    "machine_name" : "blogposts_index",
    "description" : null,
    "server" : "nodes",
    "item_type" : "node",
    "options" : {
      "datasource" : { "bundles" : [ "blog" ] },
      "index_directly" : 1,
      "cron_limit" : "50",
      "fields" : {
        "author" : { "type" : "integer", "entity_type" : "user" },
        "body:summary" : { "type" : "text" },
        "body:value" : { "type" : "text" },
        "created" : { "type" : "date" },
        "field_blog_area" : { "type" : "integer", "entity_type" : "taxonomy_term" },
        "field_blog_categories" : { "type" : "list\\u003Cinteger\\u003E", "entity_type" : "taxonomy_term" },
        "field_featured_blogpost" : { "type" : "boolean" },
        "field_tags" : { "type" : "list\\u003Cinteger\\u003E", "entity_type" : "taxonomy_term" },
        "nid" : { "type" : "integer" },
        "search_api_language" : { "type" : "string" },
        "title_field" : { "type" : "text" }
      },
      "data_alter_callbacks" : {
        "search_api_ranges_alter" : { "status" : 0, "weight" : "-50", "settings" : { "fields" : [] } },
        "search_api_alter_bundle_filter" : {
          "status" : 1,
          "weight" : "-10",
          "settings" : { "default" : "1", "bundles" : [] }
        },
        "search_api_metatag_alter_callback" : { "status" : 0, "weight" : "0", "settings" : [] },
        "search_api_alter_add_url" : { "status" : 0, "weight" : "0", "settings" : [] },
        "search_api_alter_add_aggregation" : { "status" : 1, "weight" : "0", "settings" : [] },
        "search_api_alter_add_viewed_entity" : { "status" : 0, "weight" : "0", "settings" : { "mode" : "full" } },
        "search_api_alter_add_hierarchy" : { "status" : 0, "weight" : "0", "settings" : { "fields" : [] } },
        "search_api_alter_node_access" : { "status" : 0, "weight" : "0", "settings" : [] },
        "search_api_alter_node_status" : { "status" : 1, "weight" : "0", "settings" : [] }
      },
      "processors" : {
        "search_api_case_ignore" : {
          "status" : 0,
          "weight" : "0",
          "settings" : { "fields" : { "title_field" : true, "body:value" : true, "body:summary" : true } }
        },
        "search_api_html_filter" : {
          "status" : 0,
          "weight" : "10",
          "settings" : {
            "fields" : { "title_field" : true, "body:value" : true, "body:summary" : true },
            "title" : 0,
            "alt" : 1,
            "tags" : "h1 = 5\\r\\nh2 = 3\\r\\nh3 = 2\\r\\nstrong = 2\\r\\nb = 2\\r\\nem = 1.5\\r\\nu = 1.5"
          }
        },
        "search_api_tokenizer" : {
          "status" : 0,
          "weight" : "20",
          "settings" : {
            "fields" : { "title_field" : true, "body:value" : true, "body:summary" : true },
            "spaces" : "[^[:alnum:]]",
            "ignorable" : "[\\u0027]"
          }
        },
        "search_api_stopwords" : {
          "status" : 0,
          "weight" : "30",
          "settings" : {
            "fields" : { "title_field" : true, "body:value" : true, "body:summary" : true },
            "file" : "",
            "stopwords" : "but\\r\\ndid\\r\\nthe this that those\\r\\netc"
          }
        },
        "search_api_highlighting" : {
          "status" : 0,
          "weight" : "35",
          "settings" : {
            "prefix" : "\\u003Cstrong\\u003E",
            "suffix" : "\\u003C\\/strong\\u003E",
            "excerpt" : 1,
            "excerpt_length" : "256",
            "exclude_fields" : [],
            "highlight" : "always"
          }
        }
      }
    },
    "enabled" : "1",
    "read_only" : "0",
    "rdf_mapping" : []
  }');

  $items['things_to_do_index'] = entity_import('search_api_index', '{
    "name" : "Things to do Index",
    "machine_name" : "things_to_do_index",
    "description" : null,
    "server" : "nodes",
    "item_type" : "node",
    "options" : {
      "datasource" : { "bundles" : [ "activity" ] },
      "index_directly" : 1,
      "cron_limit" : "50",
      "fields" : {
        "body:summary" : { "type" : "text" },
        "body:value" : { "type" : "text" },
        "field_activity_sticky_at_top" : { "type" : "boolean" },
        "field_activity_type" : { "type" : "integer", "entity_type" : "taxonomy_term" },
        "nid" : { "type" : "integer" },
        "search_api_language" : { "type" : "string" },
        "title_field" : { "type" : "text" }
      },
      "data_alter_callbacks" : {
        "search_api_ranges_alter" : { "status" : 0, "weight" : "-50", "settings" : [] },
        "search_api_alter_bundle_filter" : {
          "status" : 1,
          "weight" : "-10",
          "settings" : { "default" : "1", "bundles" : [] }
        },
        "search_api_metatag_alter_callback" : { "status" : 0, "weight" : "0", "settings" : [] },
        "search_api_alter_add_url" : { "status" : 0, "weight" : "0", "settings" : [] },
        "search_api_alter_add_aggregation" : { "status" : 1, "weight" : "0", "settings" : [] },
        "search_api_alter_add_viewed_entity" : { "status" : 0, "weight" : "0", "settings" : { "mode" : "full" } },
        "search_api_alter_add_hierarchy" : { "status" : 0, "weight" : "0", "settings" : { "fields" : [] } },
        "search_api_alter_node_access" : { "status" : 0, "weight" : "0", "settings" : [] },
        "search_api_alter_node_status" : { "status" : 1, "weight" : "0", "settings" : [] }
      },
      "processors" : {
        "search_api_case_ignore" : {
          "status" : 0,
          "weight" : "0",
          "settings" : { "fields" : { "title_field" : true, "body:value" : true, "body:summary" : true } }
        },
        "search_api_html_filter" : {
          "status" : 0,
          "weight" : "10",
          "settings" : {
            "fields" : { "title_field" : true, "body:value" : true, "body:summary" : true },
            "title" : 0,
            "alt" : 1,
            "tags" : "h1 = 5\\r\\nh2 = 3\\r\\nh3 = 2\\r\\nstrong = 2\\r\\nb = 2\\r\\nem = 1.5\\r\\nu = 1.5"
          }
        },
        "search_api_tokenizer" : {
          "status" : 0,
          "weight" : "20",
          "settings" : {
            "fields" : { "title_field" : true, "body:value" : true, "body:summary" : true },
            "spaces" : "[^[:alnum:]]",
            "ignorable" : "[\\u0027]"
          }
        },
        "search_api_stopwords" : {
          "status" : 0,
          "weight" : "30",
          "settings" : {
            "fields" : { "title_field" : true, "body:value" : true, "body:summary" : true },
            "file" : "",
            "stopwords" : "but\\r\\ndid\\r\\nthe this that those\\r\\netc"
          }
        },
        "search_api_highlighting" : {
          "status" : 0,
          "weight" : "35",
          "settings" : {
            "prefix" : "\\u003Cstrong\\u003E",
            "suffix" : "\\u003C\\/strong\\u003E",
            "excerpt" : 1,
            "excerpt_length" : "256",
            "exclude_fields" : [],
            "highlight" : "always"
          }
        }
      }
    },
    "enabled" : "1",
    "read_only" : "0",
    "rdf_mapping" : []
  }');

  return $items;
}

/**
 * Implements hook_default_search_api_server().
 */
function roomify_travel_theme_default_search_api_server() {
  $items = array();
  $items['nodes'] = entity_import('search_api_server', '{
    "name" : "Nodes",
    "machine_name" : "nodes",
    "description" : "",
    "class" : "search_api_db_service",
    "options" : {
      "database" : "default:default",
      "min_chars" : 1,
      "partial_matches" : 0,
      "always_show_facets" : 0,
      "indexes" : { "blogposts_index" : {
          "nid" : {
            "table" : "search_api_db_blogposts_index",
            "column" : "nid",
            "type" : "integer",
            "boost" : "1.0"
          },
          "created" : {
            "table" : "search_api_db_blogposts_index",
            "column" : "created",
            "type" : "date",
            "boost" : "1.0"
          },
          "author" : {
            "table" : "search_api_db_blogposts_index",
            "column" : "author",
            "type" : "integer",
            "boost" : "1.0"
          },
          "title_field" : {
            "table" : "search_api_db_blogposts_index_text",
            "type" : "text",
            "boost" : "1.0"
          },
          "field_blog_area" : {
            "table" : "search_api_db_blogposts_index",
            "column" : "field_blog_area",
            "type" : "integer",
            "boost" : "1.0"
          },
          "field_blog_categories" : {
            "table" : "search_api_db_blogposts_index_field_blog_categories",
            "column" : "value",
            "type" : "list\\u003Cinteger\\u003E",
            "boost" : "1.0"
          },
          "field_featured_blogpost" : {
            "table" : "search_api_db_blogposts_index",
            "column" : "field_featured_blogpost",
            "type" : "boolean",
            "boost" : "1.0"
          },
          "field_tags" : {
            "table" : "search_api_db_blogposts_index_field_tags",
            "column" : "value",
            "type" : "list\\u003Cinteger\\u003E",
            "boost" : "1.0"
          },
          "search_api_language" : {
            "table" : "search_api_db_blogposts_index",
            "column" : "search_api_language",
            "type" : "string",
            "boost" : "1.0"
          },
          "body:value" : {
            "table" : "search_api_db_blogposts_index_text",
            "type" : "text",
            "boost" : "1.0"
          },
          "body:summary" : {
            "table" : "search_api_db_blogposts_index_text",
            "type" : "text",
            "boost" : "1.0"
          }
        }
      }
    },
    "enabled" : "1",
    "rdf_mapping" : []
  }');

  return $items;
}

/**
 * Implements hook_roomify_rights().
 */
function roomify_travel_theme_roomify_rights() {
  $rights['roomify_system'] = array(
    'roomify manager' => array(
      'update featured_properties entityqueue',
      'update featured_areas entityqueue',
    ),
  );
  return $rights;
}

/**
 * Implements hook_form_alter().
 */
function roomify_travel_theme_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'locanda_search_availability_search_form' || $form_id == 'roomify_listing_search_block_form') {
    $menu_item = menu_get_item();

    $property = $menu_item['page_arguments'][1]->data;
    $price = get_lower_default_price_property_types($property->property_id);

    if (isset($_GET['bat_start_date']) && isset($_GET['bat_end_date'])) {
      // Show the real cost of the booking.
      $start_date = new DateTime($_GET['bat_start_date']);
      $end_date = new DateTime($_GET['bat_end_date']);
      $end_date->sub(new DateInterval('PT1M'));
      $currency_setting = commerce_currency_load(commerce_default_currency());
      $currency_symbol = $currency_setting['symbol'];
      $types_reference = field_get_items('roomify_property', $property, 'property_bat_type_reference');
      $price = 0;
      foreach ($types_reference as $reference) {
        $type = bat_type_load($reference['target_id']);

        $valid_unit_ids = bat_event_get_matching_units($start_date, $end_date, array(AVAILABLE), $type->type_id, 'availability', FALSE, FALSE);
        // If there are available units, mark this type as available.
        if ($valid_unit_ids !== FALSE) {
          $room_price = roomify_accommodation_booking_calculate_price($start_date, $end_date, $type->type_id);
          if ($room_price < $price || $price == 0) {
            $price = $room_price;
          }
        }
      }

      $booking_cost = commerce_currency_format($price, $currency_setting['code']);
      $price = $booking_cost;
    }

    $form['price'] = array(
      '#markup' => '<div class="listing-base-price">
        <span class="starting-from">' . t('Starting From') . ' </span>
        <span class="price">' . $price . '</span>
      </div>',
      '#weight' => -10,
    );
  }
  if ($form_id == 'activity_node_form') {
    $form['field_activity_sticky_at_top']['#access'] = FALSE;
  }
  if ($form_id == 'blog_node_form') {
    $form['field_blog_sticky_at_top']['#access'] = FALSE;
  }
}
